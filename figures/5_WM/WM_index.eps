%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: wm_index_tab.pdf
%%Creator: Adobe Acrobat 11.0.4
%%For: pz
%%CreationDate: 2017-8-20, 22:22:30
%%BoundingBox: 0 0 334 104
%%HiResBoundingBox: 0 0 333.5828 103.5347
%%CropBox: 0 0 333.5828 103.5347
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 942 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-08-20T22:21:38+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2010"
   xmp:ModifyDate="2017-08-20T22:21:38+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>pz</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -103.535 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
1.52588e-5 0 mo
1.52588e-5 103.535 li
333.583 103.535 li
333.583 0 li
cp
clp
gsave
-.99115 103.591 mo
334.009 103.591 li
334.009 -.409241 li
-.99115 -.409241 li
cp
clp
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
6.00885 68.3408 mo
34.5089 68.3408 li
34.5089 15.0908 li
6.00885 15.0908 li
6.00885 68.3408 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.749 sep
@
.75 lw
6.00885 34.5908 mo
34.5089 34.5908 li
@
6.00885 47.3408 mo
34.5089 47.3408 li
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CALIBRI
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e4b94a000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c79667aef13bf000085c800000eea68656164e625fe3d00000f640000
0036686865610dad06da00000f9c00000024686d7478362706d400000fc0
000025766c6f6361d69cd4a90000353800001e466d617870212d24920000
5380000000206e616d65267651f4000053a000000e16707265706baf02fe
000061b800002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e10002ff4000acff00000009000000004d53202000400000
00720600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d00000001000000059eb82c7db3ff5f0f3cf500190800
00000000bbeb7ccc00000000c522987afbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
000000000000000000000399040e00000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000003d5005c0000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000043400990362005a000000000000
000000000000000000000000000000000000000000000000000000000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000002710025
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000664009904340099000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000205009700000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a1014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e01fd01fd01fd01fd01fd01fd01fd01fd01fd
01fd01fd01fd01fd02960322032203220322032203220322032203220322
03b903b903b903b9045a045a045a045a045a045a045a045a045a045a04dd
04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd
04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd
04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd
04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd
04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd04dd
04dd05be064f064f064f064f064f064f064f064f064f064f064f064f064f
064f064f064f064f064f064f064f064f064f06c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c806c806c806c806c806c806c806c806c806c806c8
06c806c806c806c806c8070d070d070d070d070d070d070d070d070d070d
070d070d070d070d072f072f072f072f072f072f072f072f072f072f072f
072f072f072f072f072f072f072f072f072f072f072f072f072f072f072f
072f072f072f072f072f072f072f072f072f072f072f072f072f072f072f
072f072f072f072f072f072f072f072f072f072f072f072f072f072f072f
072f072f072f072f072f072f072f07750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
077507750775077507750775077507750775077507750775077507750775
07750775077507750775077507750000000100000f220051000500000000
00020010002f0065000011902410000000000000002d0222000000030000
0000006400000000000300000001000e00640000000300000002000e0304
0000000300000003003003120000000300000004000e0064000000030000
0005001803420000000300000006000e0064000000030000000700fa035a
0000000300000008002a03d0000000030000000900200454000000030000
000a02a00064000000030000000b00560474000000030000000c002a04ca
000000030000000d029804f4000000030000000e006c078c000100000000
0000003207f800010000000000010007082a00010000000000020007097a
00010000000000030018098100010000000000040007082a000100000000
0005000c099900010000000000060007082a0001000000000007007d09a5
0001000000000008001509e0000100000000000900100a22000100000000
000a0150082a000100000000000b002b0a32000100000000000c00150a5d
000100000000000d014c0a72000100000000000e00360bbe000300010409
0000006400000003000104090001000e00640003000104090002000e0304
0003000104090003003003120003000104090004000e0064000300010409
0005001803420003000104090006000e0064000300010409000700fa035a
0003000104090008002a03d0000300010409000900200454000300010409
000a02a00064000300010409000b00560474000300010409000c002a04ca
000300010409000d029804f4000300010409000e006c078c00a900200032
0030003000380020004d006900630072006f0073006f0066007400200043
006f00720070006f0072006100740069006f006e002e00200041006c006c
002000520069006700680074007300200052006500730065007200760065
0064002e00430061006c0069006200720069002000690073002000610020
006d006f006400650072006e002000730061006e00730020007300650072
00690066002000660061006d0069006c0079002000770069007400680020
0073007500620074006c006500200072006f0075006e00640069006e0067
00730020006f006e0020007300740065006d007300200061006e00640020
0063006f0072006e006500720073002e0020004900740020006600650061
007400750072006500730020007200650061006c0020006900740061006c
006900630073002c00200073006d0061006c006c00200063006100700073
002c00200061006e00640020006d0075006c007400690070006c00650020
006e0075006d006500720061006c00200073006500740073002e00200049
00740073002000700072006f0070006f007200740069006f006e00730020
0061006c006c006f00770020006800690067006800200069006d00700061
0063007400200069006e002000740069006700680074006c007900200073
006500740020006c0069006e006500730020006f00660020006200690067
00200061006e006400200073006d0061006c006c00200074006500780074
00200061006c0069006b0065002e002000430061006c0069006200720069
002700730020006d0061006e007900200063007500720076006500730020
0061006e006400200074006800650020006e006500770020007200610073
00740065007200690073006500720020007400650061006d002000750070
00200069006e0020006200690067006700650072002000730069007a0065
007300200074006f002000720065007600650061006c0020006100200077
00610072006d00200061006e006400200073006f00660074002000630068
0061007200610063007400650072002e0052006500670075006c00610072
004d006900630072006f0073006f00660074003a002000430061006c0069
006200720069003a0020003200300030003500560065007200730069006f
006e00200035002e0036003200430061006c006900620072006900200069
007300200065006900740068006500720020006100200072006500670069
007300740065007200650064002000740072006100640065006d00610072
006b0020006f007200200061002000740072006100640065006d00610072
006b0020006f00660020004d006900630072006f0073006f006600740020
0043006f00720070006f0072006100740069006f006e00200069006e0020
00740068006500200055006e006900740065006400200053007400610074
0065007300200061006e0064002f006f00720020006f0074006800650072
00200063006f0075006e00740072006900650073002e004c007500630028
006100730029002000640065002000470072006f006f0074006800740074
0070003a002f002f007700770077002e006d006900630072006f0073006f
00660074002e0063006f006d002f007400790070006f0067007200610070
00680079002f006300740066006f006e007400730068007400740070003a
002f002f0066006f006e007400660061006200720069006b002e0063006f
006d0059006f00750020006d006100790020007500730065002000740068
0069007300200066006f006e00740020006100730020007000650072006d
006900740074006500640020006200790020007400680065002000450055
004c004100200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
007500640065006400200074006f00200064006900730070006c00610079
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e0074002e00200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e0068007400740070003a002f002f007700770077002e006d
006900630072006f0073006f00660074002e0063006f006d002f00740079
0070006f006700720061007000680079002f0066006f006e00740073002f
00640065006600610075006c0074002e0061007300700078a92032303038
204d6963726f736f667420436f72706f726174696f6e2e20416c6c205269
676874732052657365727665642e43616c696272692069732061206d6f64
65726e2073616e732073657269662066616d696c79207769746820737562
746c6520726f756e64696e6773206f6e207374656d7320616e6420636f72
6e6572732e204974206665617475726573207265616c206974616c696373
2c20736d616c6c20636170732c20616e64206d756c7469706c65206e756d
6572616c20736574732e204974732070726f706f7274696f6e7320616c6c
6f77206869676820696d7061637420696e2074696768746c792073657420
6c696e6573206f662062696720616e6420736d616c6c207465787420616c
696b652e2043616c696272692773206d616e792063757276657320616e64
20746865206e65772072617374657269736572207465616d20757020696e
206269676765722073697a657320746f2072657665616c2061207761726d
20616e6420736f6674206368617261637465722e526567756c61724d6963
726f736f66743a2043616c696272693a203230303556657273696f6e2035
2e363243616c696272692069732065697468657220612072656769737465
7265642074726164656d61726b206f7220612074726164656d61726b206f
66204d6963726f736f667420436f72706f726174696f6e20696e20746865
20556e697465642053746174657320616e642f6f72206f7468657220636f
756e74726965732e4c7563286173292064652047726f6f74687474703a2f
2f7777772e6d6963726f736f66742e636f6d2f7479706f6772617068792f
6374666f6e7473687474703a2f2f666f6e7466616272696b2e636f6d596f
75206d617920757365207468697320666f6e74206173207065726d697474
6564206279207468652045554c4120666f72207468652070726f64756374
20696e207768696368207468697320666f6e7420697320696e636c756465
6420746f20646973706c617920616e64207072696e7420636f6e74656e74
2e20596f75206d6179206f6e6c792028692920656d626564207468697320
666f6e7420696e20636f6e74656e74206173207065726d69747465642062
792074686520656d62656464696e67207265737472696374696f6e732069
6e636c7564656420696e207468697320666f6e743b20616e642028696929
2074656d706f726172696c7920646f776e6c6f6164207468697320666f6e
7420746f2061207072696e746572206f72206f74686572206f7574707574
2064657669636520746f2068656c70207072696e7420636f6e74656e742e
687474703a2f2f7777772e6d6963726f736f66742e636f6d2f7479706f67
72617068792f666f6e74732f64656661756c742e61737078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[3819 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 3610 856 <00010097fff7016e00e0000b0017b10006b8ffc0b60c014d0609034c003f
cd012f2bc13130251406232226353436333216016e2f3e3c2e2f3e3c2e6d
472f2e45472f2e00>PBAAAA+CALIBRI AddT42Char 
2 1324 272 <0001005affed032003c900350089b11c00b8ffc0b310014d00b8ffe0b30d
014d00b8ffe8b40b014d0027b8ffe8b310014d27b8fff0b30f014d27b8ff
eeb30c014d27b8ffe8b30b014d27b8ffeab30d014d27b8020b400d2f0e01
0e19e71f400a0d481f24b80102b4134a03eb31b8ffc0b4090d48312cb801
06b1094d003ffdd42bed3ffdd42bed012f5de12b2b2b2b2bc42b2b2b3231
3025140e0623222e0235343e0233321e0615140623222e0223220615141e
0233323e0233321e020320020507193c4b582f61966535417199592b5144
3518090602120d0f273c553a777f21405d3c39563f2b0c070a0703a21119
110d19251d12407bb37585bf7a3b101a22180e131812271f212821b7ae57
83582b242b2308131d00>PBAAAA+CALIBRI AddT42Char 
2 1604 282 <00020060ffed039c056d00260039008b401f3f3b010b1b39100d014d390a
0c014d391010014d39100f014d39180b014d39bb01f90000002fffe0b30d
014d2fb8ffe8b310014d2fb8fff0b30f014d2fb8fff0b30c014d2fb8ffe8
b30b014d2fb8020a400a1321460b39271b040e2ab80105b2184a34b80104
b30e4d054c003f3fed3fed1217393f012fe12b2b2b2b2bd4e12b2b2b2b2b
323931305d25140e0223222e023535060623222e0235343e023332161711
343e0233321e021503262623220e0215141e0233323e0237039c07111c14
151c120847995b638c57283262915f4f834007141f1819201209a6437d44
3f58371915345641213d40462719080c070404070c08774d564d83b16274
bb84474543020b070d070505070d07fd4553573c627c404482653d122a43
3100>PBAAAA+CALIBRI AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+CALIBRI AddT42Char 
PBAAAA+CALIBRI /CharStrings get begin
/period 856 def
/c 272 def
/d 282 def
end
PBAAAA+CALIBRI /Encoding get
dup 46 /period put
dup 99 /c put
dup 100 /d put
pop
end
%ADOEndSubsetFont
/ATSHSF+CALIBRI /PBAAAA+CALIBRI findfont ct_VMDictPut
/ATSHSF+CALIBRI*1 
[46{/.notdef}rp /period 52{/.notdef}rp /c /d 155{/.notdef}rp]
ATSHSF+CALIBRI nf
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
17.7488 43.9558 mo
(c)sh
21.1315 43.9558 mo
(d)sh
ATSHSF+CALIBRI*1 [0 18 18 0 0 0 ]msf
20.5688 18.2308 mo
(.)sh
20.5688 22.7747 mo
(.)sh
20.5688 27.3186 mo
(.)sh
21.0388 50.1998 mo
(.)sh
21.0388 54.7437 mo
(.)sh
21.0388 59.2876 mo
(.)sh
.25 lw
31.5089 41.3408 mo
43.5089 41.3408 li
1 /0 /CSD get_res sepcs
.749 sep
@
45.7589 41.3408 mo
42.7589 43.5908 li
42.4289 43.2798 li
42.9589 42.2178 42.9688 40.9658 42.4388 39.8998 cv
42.7589 39.8408 li
45.7589 41.3408 li
cp
ef
.75 lw
45.7589 45.8408 mo
71.2589 45.8408 li
71.2589 36.8408 li
45.7589 36.8408 li
45.7589 45.8408 li
@
/1 
[/DeviceCMYK] /CSA add_res
0 1 1 .00173953 cmyk
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATSHSF+CALIBRI gcheck setglobal} if
2 668 258 <0002005cffed033f03ca0033004000b040200f421f422f42030b0917340c
0c014d34100d014d34180b014d34100f10014c34b801f7400e0027270f00
010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8ffe8b30b
014d3ab8ffe8b40f10014c3ab8020840141117c500341034023bc0340100
340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d04002f3f
ed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b5e5d392f
10e12b2b2b2b323931305e5d25140606232226263535060623222e023534
3e02333335342e0223220e0223222e0235343e0433321e02150723220e02
15141633323637033f101c1b1a1f0e3b91514773512d3e74a8697c16314e
393d6149310c080c0904071b4256663461885426a48d4464421f5950416f
3d180c0c06060c0c5a3f46254666414c704a25463450351b1d231d081019
0f191d1a231d132c557e54c4172d3f2946534244>ATSHSF+CALIBRI AddT42Char 
ATSHSF+CALIBRI /CharStrings get begin
/a 258 def
end
ATSHSF+CALIBRI /Encoding get
dup 97 /a put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATSHSF+CALIBRI*1 
[46{/.notdef}rp /period 50{/.notdef}rp /a /.notdef /c /d 155{/.notdef}rp]
ATSHSF+CALIBRI nf
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
47.9088 43.8628 mo
(a)sh
51.7409 43.8628 mo
(a)sh
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
55.5789 43.8628 mo
(c)sh
58.9615 43.8628 mo
(d)sh
63.1588 43.8628 mo
(.)sh
65.1784 43.8628 mo
(.)sh
67.1979 43.8628 mo
(.)sh
81.0089 45.8408 mo
109.509 45.8408 li
109.509 36.8408 li
81.0089 36.8408 li
81.0089 45.8408 li
1 /0 /CSD get_res sepcs
.749 sep
@
.834195 .0135195 1 .00173953 cmyk
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATSHSF+CALIBRI gcheck setglobal} if
2 1018 271 <00020099ffed03d50571002a003d0085b53f3f010a2136b8fff6b30c014d
36b8fff0b30d014d36b8ffe8b30b014d36b8fff0b40f10014c36b801f840
1b152b120c014d2b200d014d2b180b014d2b1810014d2b100f014d2bb802
0a400900150a363521040530b80105b6264a1b46104c39b80105b1054d00
3fed3f3f3fed121739012fd4e12b2b2b2b2b10e12b2b2b2b323931305d01
140e0223222e022715140e0223222e023511343e0233321e0215113e0333
321e0207342e0223220e020711161633323e0203d53363905d2b49464627
08121b15141c12060713201819201208284b484828628b5728ae15345640
203e404527447c433e58371901e775bb844611263a296e080c070404070c
080538080c080404080c08fde5293823104e83b0754582643d122a4232fe
9953573c637b>ATSHSF+CALIBRI AddT42Char 
ATSHSF+CALIBRI /CharStrings get begin
/b 271 def
end
ATSHSF+CALIBRI /Encoding get
dup 98 /b put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATSHSF+CALIBRI*1 
[46{/.notdef}rp /period 50{/.notdef}rp /a /b /c /d 155{/.notdef}rp]
ATSHSF+CALIBRI nf
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
84.5789 43.8628 mo
(a)sh
88.4109 43.8628 mo
(b)sh
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
92.6089 43.8628 mo
(c)sh
95.9915 43.8628 mo
(d)sh
100.199 43.8628 mo
(.)sh
102.218 43.8628 mo
(.)sh
104.238 43.8628 mo
(.)sh
.25 lw
71.2589 41.3408 mo
78.0089 41.3408 li
1 /0 /CSD get_res sepcs
.749 sep
@
81.0089 41.3408 mo
77.2589 42.8408 li
77.3889 43.1528 li
77.9289 42.0888 77.9289 40.8368 77.3889 39.7728 cv
77.2589 39.8408 li
81.0089 41.3408 li
cp
ef
.75 lw
119.259 45.8408 mo
147.759 45.8408 li
147.759 36.8408 li
119.259 36.8408 li
119.259 45.8408 li
@
.834195 .0135195 1 .00173953 cmyk
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
122.849 43.8628 mo
(a)sh
126.681 43.8628 mo
(b)sh
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
130.879 43.8628 mo
(c)sh
134.262 43.8628 mo
(d)sh
138.469 43.8628 mo
(.)sh
140.488 43.8628 mo
(.)sh
142.508 43.8628 mo
(.)sh
.25 lw
109.509 41.3408 mo
117.009 41.3408 li
1 /0 /CSD get_res sepcs
.749 sep
@
119.259 41.3408 mo
116.259 42.8408 li
116.129 43.1528 li
116.669 42.0888 116.669 40.8368 116.129 39.7728 cv
116.259 39.8408 li
119.259 41.3408 li
cp
ef
.75 lw
157.509 45.8408 mo
186.009 45.8408 li
186.009 37.5908 li
157.509 37.5908 li
157.509 45.8408 li
@
.834195 .0135195 1 .00173953 cmyk
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
161.119 44.1808 mo
(a)sh
164.951 44.1808 mo
(b)sh
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
169.149 44.1808 mo
(c)sh
172.532 44.1808 mo
(d)sh
176.739 44.1808 mo
(.)sh
178.758 44.1808 mo
(.)sh
180.778 44.1808 mo
(.)sh
.25 lw
147.759 42.0908 mo
154.509 42.0908 li
1 /0 /CSD get_res sepcs
.749 sep
@
157.509 42.0908 mo
153.759 43.5908 li
153.929 43.4708 li
154.459 42.4068 154.459 41.1548 153.929 40.0908 cv
153.759 39.8408 li
157.509 42.0908 li
cp
ef
.75 lw
195.759 45.8408 mo
224.259 45.8408 li
224.259 37.5908 li
195.759 37.5908 li
195.759 45.8408 li
@
.719081 .14258 0 0 cmyk
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATSHSF+CALIBRI gcheck setglobal} if
2 1906 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>ATSHSF+CALIBRI AddT42Char 
2 2228 296 <00010025fffa02860578003c0064b2161000b8ffe0b40b014d001bb8fff0
b30d014d1bb8fff0b40f10014c1bb8fff6b30c014d1bb8ffe8b30b014d1b
b801f9b2302a25b8ffd040121011014c250aed36471a26ed3048204c1048
003f3f3fed323fed012f2bc433f12b2b2b2bc42b33c4313001140e022322
2e0223220e02151533321e02151406232311140e0223222e023511232226
35343e02333335343e0233321e0402860405080607151e291b2534200ec9
080b0905120fc908132018182013087f101004080c087f23486d4a234224
0c0803050f13170e05090b091833513a6207111a132420fceb080b080404
080b0803152024131a11075d5e8756290d0f0c131b00>ATSHSF+CALIBRI AddT42Char 
ATSHSF+CALIBRI /CharStrings get begin
/e 286 def
/f 296 def
end
ATSHSF+CALIBRI /Encoding get
dup 101 /e put
dup 102 /f put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATSHSF+CALIBRI*1 
[46{/.notdef}rp /period 50{/.notdef}rp /a /b /c /d /e 
/f 153{/.notdef}rp]
ATSHSF+CALIBRI nf
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
200.189 44.1808 mo
(e)sh
204.169 44.1808 mo
(f)sh
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
206.609 44.1808 mo
(c)sh
209.992 44.1808 mo
(d)sh
214.199 44.1808 mo
(.)sh
216.218 44.1808 mo
(.)sh
218.238 44.1808 mo
(.)sh
.25 lw
186.009 42.0908 mo
192.759 42.0908 li
1 /0 /CSD get_res sepcs
.749 sep
@
195.759 42.0908 mo
192.009 43.5908 li
192.199 43.4708 li
192.729 42.4068 192.729 41.1548 192.199 40.0908 cv
192.009 39.8408 li
195.759 42.0908 li
cp
ef
.75 lw
234.759 45.8408 mo
263.259 45.8408 li
263.259 37.5908 li
234.759 37.5908 li
234.759 45.8408 li
@
.719081 .14258 0 0 cmyk
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
239.169 44.1808 mo
(e)sh
243.149 44.1808 mo
(f)sh
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
245.589 44.1808 mo
(c)sh
248.972 44.1808 mo
(d)sh
253.169 44.1808 mo
(.)sh
255.188 44.1808 mo
(.)sh
257.208 44.1808 mo
(.)sh
.25 lw
225.009 42.0908 mo
231.759 42.0908 li
1 /0 /CSD get_res sepcs
.749 sep
@
234.759 42.0908 mo
231.009 43.5908 li
231.169 43.4708 li
231.709 42.4068 231.709 41.1548 231.169 40.0908 cv
231.009 39.8408 li
234.759 42.0908 li
cp
ef
.75 lw
273.759 45.8408 mo
302.259 45.8408 li
302.259 36.8408 li
273.759 36.8408 li
273.759 45.8408 li
@
.13727 .696223 1 .0349432 cmyk
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal ATSHSF+CALIBRI gcheck setglobal} if
2 2490 373 <00010099fffa05d003ca005000ea401b12100b014d13180b014d26100b0c
014c27180b0c014c7052014613b8fff6b30c014d13b8ffe8b30b014d13b8
fff0b310014d13b8fff0b30f014d13b8ffeab30d014d13b801f8401e1e16
0d014d1e1e320a0a0c014d0a100d014d0a180b014d0a100f10014c0ab801
f9b7504011014d503e27b8fff6b30c014d27b8ffe8b30b014d27b8fff0b3
10014d27b8fff0b30f014d27b8fff0b30d014d27bb01f8003200100106b2
4b4a24b80106400d414a3e462d38492d4c194c054c003f3f3f3f1239393f
ed3fed012fe12b2b2b2b2b39d42be12b2b2b2b11392f2be12b2b2b2b2b39
31305d002b2b2b2b25140e0223222e023511342e022322060711140e0223
222e023511342e022322060711140e0223222e023511343e0233321e0215
15363633321e02173e0333321e021505d00812201819201308142c442e39
73450813201817211307162c432e397444081220191820130706121c1716
1d10074c8f4938594430102d514b47245776491f19080b080404080b0802
23395e44245855fd8b080b080404080b080223395e44245855fd8b080b08
0404080b080384080b090303090b0877554f1a2f412831442a133d66894c
>ATSHSF+CALIBRI AddT42Char 
2 2940 374 <00010099fffa03a003ca00320094400f12100b014d13100b014d3f34012a
13b8fff0b310014d13b8fff0b30f014d13b8fff0b30d014d13b8fff6b30c
014d13b8ffe8b30b014d13b801f8401b1e0b1010014d0b100d014d0b100f
014d0b0a0c014d0b180b014d0bb801f8b700400c014d001e10b80106400a
2d4a2a192449194c054c003f3f3f12393fed012f2f2be12b2b2b2b2b10e1
2b2b2b2b2b3931305d002b2b25140e0223222e023511342e022322060711
140e0223222e023511343e0233321e021515363633321e021503a0081220
1819201208182e49303e7c44081220191820130706121c17161d10074c97
4d5a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08040408
0b080384080b090303090b0877554f3d66896000>ATSHSF+CALIBRI AddT42Char 
ATSHSF+CALIBRI /CharStrings get begin
/m 373 def
/n 374 def
end
ATSHSF+CALIBRI /Encoding get
dup 109 /m put
dup 110 /n put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/ATSHSF+CALIBRI*1 
[46{/.notdef}rp /period 50{/.notdef}rp /a /b /c /d /e 
/f 6{/.notdef}rp /m /n 145{/.notdef}rp]
ATSHSF+CALIBRI nf
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
276.059 43.8628 mo
(m)sh
282.449 43.8628 mo
(n)sh
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
286.649 43.8628 mo
(c)sh
290.032 43.8628 mo
(d)sh
294.239 43.8628 mo
(.)sh
296.258 43.8628 mo
(.)sh
298.278 43.8628 mo
(.)sh
.25 lw
263.259 41.3408 mo
273.009 41.3408 li
1 /0 /CSD get_res sepcs
.749 sep
@
275.259 41.3408 mo
272.259 43.5908 li
272.029 43.2198 li
272.569 42.1598 272.579 40.9078 272.049 39.8398 cv
272.259 39.8408 li
275.259 41.3408 li
cp
ef
301.509 41.3408 mo
311.259 41.3408 li
@
313.509 41.3408 mo
310.509 42.8408 li
310.309 43.1528 li
310.839 42.0888 310.839 40.8368 310.309 39.7728 cv
310.509 39.8408 li
313.509 41.3408 li
cp
ef
.75 lw
132.759 88.5908 mo
147.009 88.5908 li
147.009 75.0908 li
132.759 75.0908 li
132.759 88.5908 li
@
gsave
132.759 81.8408 mo
147.009 81.8408 li
132.759 81.8408 li
cp
eclp
132.369 82.7878 mo
148.042 82.7878 li
148.042 81.2878 li
132.369 81.2878 li
cp
level3{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [389.2 53.803 389.2 55.303 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$jd4?$jd4?$jd4?$jd4?$OI+>$OI+>$O@"<$O@"<$4$n;$4$n;$4$n;$3pe9$3pe9#mU\8#mU\8#mU\8
#mU\8#R1J5#R1J5#R1J5#R1J5#R1J5#6b82#6b82#6b82#6b82"pG/1"pG/1"p>&/"p>&/"U"r."U"r.
"U"r."U"r."U"r."Tni,"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+!s/N(!s/N(!s/N(!s/N(!s/N(
!WiE'!W`<%!W`<%!W`<%!<E3$!<E3$!<<*"!<<*"zzzzzzz!!!!!~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
/0 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$O[=M$O[=M$O[=M$O[=M$OR4J$47+I$47+I$47+I$4."F#mgnE#mgnE#mgnE#mgnE#m^eB#RC\A#RC\A
#RC\A#RCY?#6tJ=#6tJ=#6tJ=#6tJ=#6tG;"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,#3"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i0!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)
!WiE)!<E3%!<E3%!<E3%!<E3%zzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
0 ]
>>
389.2 53.803 389.2 55.303 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
132.759 81.8408 mo
147.009 81.8408 li
132.759 81.8408 li
cp
@
147.009 88.5908 mo
161.259 88.5908 li
161.259 75.0908 li
147.009 75.0908 li
147.009 88.5908 li
@
gsave
147.009 81.8408 mo
161.259 81.8408 li
147.009 81.8408 li
cp
eclp
146.539 82.7878 mo
162.212 82.7878 li
162.212 81.2878 li
146.539 81.2878 li
cp
level3{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [403.37 53.803 403.37 55.303 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$jd4?$jd4?$jd4?$jd4?$OI+>$OI+>$O@"<$O@"<$4$n;$4$n;$4$n;$3pe9$3pe9#mU\8#mU\8#mU\8
#mU\8#R1J5#R1J5#R1J5#R1J5#R1J5#6b82#6b82#6b82#6b82"pG/1"pG/1"p>&/"p>&/"U"r."U"r.
"U"r."U"r."U"r."Tni,"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+!s/N(!s/N(!s/N(!s/N(!s/N(
!WiE'!W`<%!W`<%!W`<%!<E3$!<E3$!<<*"!<<*"zzzzzzz!!!!!~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
/1 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$O[=M$O[=M$O[=M$O[=M$OR4J$47+I$47+I$47+I$4."F#mgnE#mgnE#mgnE#mgnE#m^eB#RC\A#RC\A
#RC\A#RCY?#6tJ=#6tJ=#6tJ=#6tJ=#6tG;"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,#3"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i0!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)
!WiE)!<E3%!<E3%!<E3%!<E3%zzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
0 ]
>>
403.37 53.803 403.37 55.303 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
147.009 81.8408 mo
161.259 81.8408 li
147.009 81.8408 li
cp
@
161.259 88.5908 mo
175.509 88.5908 li
175.509 75.0908 li
161.259 75.0908 li
161.259 88.5908 li
@
gsave
161.259 81.8408 mo
175.509 81.8408 li
161.259 81.8408 li
cp
eclp
160.719 82.7878 mo
176.392 82.7878 li
176.392 81.2878 li
160.719 81.2878 li
cp
level3{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
<<
/PatternType 2
/Shading
/2 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [417.54 53.803 417.54 55.303 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$jd4?$jd4?$jd4?$jd4?$OI+>$OI+>$O@"<$O@"<$4$n;$4$n;$4$n;$3pe9$3pe9#mU\8#mU\8#mU\8
#mU\8#R1J5#R1J5#R1J5#R1J5#R1J5#6b82#6b82#6b82#6b82"pG/1"pG/1"p>&/"p>&/"U"r."U"r.
"U"r."U"r."U"r."Tni,"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+!s/N(!s/N(!s/N(!s/N(!s/N(
!WiE'!W`<%!W`<%!W`<%!<E3$!<E3$!<<*"!<<*"zzzzzzz!!!!!~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /2 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
/2 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$O[=M$O[=M$O[=M$O[=M$OR4J$47+I$47+I$47+I$4."F#mgnE#mgnE#mgnE#mgnE#m^eB#RC\A#RC\A
#RC\A#RCY?#6tJ=#6tJ=#6tJ=#6tJ=#6tG;"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,#3"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i0!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)
!WiE)!<E3%!<E3%!<E3%!<E3%zzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
0 ]
>>
417.54 53.803 417.54 55.303 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/2 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
161.259 81.8408 mo
175.509 81.8408 li
161.259 81.8408 li
cp
@
175.509 88.5908 mo
189.759 88.5908 li
189.759 75.0908 li
175.509 75.0908 li
175.509 88.5908 li
@
gsave
175.509 81.8408 mo
189.759 81.8408 li
175.509 81.8408 li
cp
eclp
174.889 82.7878 mo
190.562 82.7878 li
190.562 81.2878 li
174.889 81.2878 li
cp
level3{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
<<
/PatternType 2
/Shading
/3 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [431.72 53.803 431.72 55.303 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$jd4?$jd4?$jd4?$jd4?$OI+>$OI+>$O@"<$O@"<$4$n;$4$n;$4$n;$3pe9$3pe9#mU\8#mU\8#mU\8
#mU\8#R1J5#R1J5#R1J5#R1J5#R1J5#6b82#6b82#6b82#6b82"pG/1"pG/1"p>&/"p>&/"U"r."U"r.
"U"r."U"r."U"r."Tni,"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+!s/N(!s/N(!s/N(!s/N(!s/N(
!WiE'!W`<%!W`<%!W`<%!<E3$!<E3$!<<*"!<<*"zzzzzzz!!!!!~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /3 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
/3 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$O[=M$O[=M$O[=M$O[=M$OR4J$47+I$47+I$47+I$4."F#mgnE#mgnE#mgnE#mgnE#m^eB#RC\A#RC\A
#RC\A#RCY?#6tJ=#6tJ=#6tJ=#6tJ=#6tG;"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,#3"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i0!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)
!WiE)!<E3%!<E3%!<E3%!<E3%zzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
0 ]
>>
431.72 53.803 431.72 55.303 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/3 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
175.509 81.8408 mo
189.759 81.8408 li
175.509 81.8408 li
cp
@
189.759 88.5908 mo
204.009 88.5908 li
204.009 75.0908 li
189.759 75.0908 li
189.759 88.5908 li
@
gsave
189.759 81.8408 mo
204.009 81.8408 li
189.759 81.8408 li
cp
eclp
189.059 82.7878 mo
204.732 82.7878 li
204.732 81.2878 li
189.059 81.2878 li
cp
level3{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
<<
/PatternType 2
/Shading
/4 
<<
/ShadingType 2 
/ColorSpace /1 /CSA get_res
/Coords [445.89 53.803 445.89 55.303 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~$jd4?$jd4?$jd4?$jd4?$OI+>$OI+>$O@"<$O@"<$4$n;$4$n;$4$n;$3pe9$3pe9#mU\8#mU\8#mU\8
#mU\8#R1J5#R1J5#R1J5#R1J5#R1J5#6b82#6b82#6b82#6b82"pG/1"pG/1"p>&/"p>&/"U"r."U"r.
"U"r."U"r."U"r."Tni,"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+"9S`+!s/N(!s/N(!s/N(!s/N(!s/N(
!WiE'!W`<%!W`<%!W`<%!<E3$!<E3$!<<*"!<<*"zzzzzzz!!!!!~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
>> /Gradient add_res /4 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[1 0 0 -1 -248.991 136.591 ]ct
/4 {
/1 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~$O[=M$O[=M$O[=M$O[=M$OR4J$47+I$47+I$47+I$4."F#mgnE#mgnE#mgnE#mgnE#m^eB#RC\A#RC\A
#RC\A#RCY?#6tJ=#6tJ=#6tJ=#6tJ=#6tG;"pP89"pP89"pP89"pP57"U,&5"U,&5"U,&5"U,#3"9\i1
"9\i1"9\i1"9\i1"9\i1"9\i0!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)
!WiE)!<E3%!<E3%!<E3%!<E3%zzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
<~#RC\A#RC\A#RC\A#RC\A#RC\A#RC\A#R:S>#6tJ=#6tJ=#6tJ=#6tJ=#6kA:"pP89"pP89"pP89"pP89
"pP89"pP57"U,&5"U,&5"U,&5"U,&5"U,#3"9\i1"9\i1"9\i1"9\i1"9\i1"9\f/!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W,!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%
!<E3%!<E3%zzzzzzzzzzzzz!!!!!~>
0 ]
>>
445.89 53.803 445.89 55.303 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/4 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
grestore
189.759 81.8408 mo
204.009 81.8408 li
189.759 81.8408 li
cp
@
0 1 1 .00173953 cmyk
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
136.649 87.8568 mo
(a)sh
140.481 87.8568 mo
(a)sh
.834195 .0135195 1 .00173953 cmyk
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
150.649 88.0528 mo
(a)sh
154.481 88.0528 mo
(b)sh
.719081 .14258 0 0 cmyk
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
164.779 88.0528 mo
(e)sh
168.759 88.0528 mo
(f)sh
.13727 .696223 1 .0349432 cmyk
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
177.429 87.6828 mo
(m)sh
183.819 87.6828 mo
(n)sh
141.009 79.5908 mo
141.009 68.3408 li
58.5089 68.3408 li
58.5089 45.8408 li
1 /0 /CSD get_res sepcs
.749 sep
@
58.5688 47.5068 mo
57.6588 47.5068 56.9289 46.7718 56.9289 45.8648 cv
56.9289 44.9568 57.6588 44.2218 58.5688 44.2218 cv
58.5688 44.2218 li
59.4789 44.2218 60.2089 44.9568 60.2089 45.8648 cv
60.2089 46.7718 59.4789 47.5068 58.5688 47.5068 cv
cp
ef
155.259 79.5908 mo
155.259 60.8408 li
95.2589 60.8408 li
95.2589 45.8408 li
@
95.4189 47.5068 mo
94.5089 47.5068 93.7788 46.7718 93.7788 45.8648 cv
93.7788 44.9568 94.5089 44.2218 95.4189 44.2218 cv
95.4189 44.2218 li
96.3289 44.2218 97.0588 44.9568 97.0588 45.8648 cv
97.0588 46.7718 96.3289 47.5068 95.4189 47.5068 cv
cp
ef
168.759 79.5908 mo
168.759 58.5908 li
208.509 58.5908 li
208.509 45.8408 li
@
208.809 47.6808 mo
209.709 47.6808 210.449 46.9448 210.449 46.0378 cv
210.449 45.1308 209.709 44.3958 208.809 44.3958 cv
208.809 44.3958 li
207.899 44.3958 207.159 45.1308 207.159 46.0378 cv
207.159 46.9448 207.899 47.6808 208.809 47.6808 cv
cp
ef
183.009 79.5908 mo
183.009 63.8408 li
286.509 63.8408 li
286.509 45.8408 li
@
286.759 47.5068 mo
287.669 47.5068 288.399 46.7718 288.399 45.8648 cv
288.399 44.9568 287.669 44.2218 286.759 44.2218 cv
286.759 44.2218 li
285.849 44.2218 285.119 44.9568 285.119 45.8648 cv
285.119 46.7718 285.849 47.5068 286.759 47.5068 cv
cp
ef
197.259 78.8408 mo
197.259 69.8408 li
324.759 69.8408 li
324.759 47.3408 li
@
325.029 48.7588 mo
325.929 48.7588 326.669 48.0238 326.669 47.1168 cv
326.669 46.2098 325.929 45.4738 325.029 45.4738 cv
325.029 45.4738 li
324.119 45.4738 323.379 46.2088 323.379 47.1168 cv
323.379 48.0238 324.119 48.7588 325.029 48.7588 cv
cp
ef
1 /0 /CSD get_res sepcs
1 sep
ATSHSF+CALIBRI*1 [7.99992 0 0 -7.99992 0 0 ]msf
193.299 86.3698 mo
(.)sh
195.318 86.3698 mo
(.)sh
197.338 86.3698 mo
(.)sh
%ADOBeginSubsetFont: ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (ATSHSG+#cb#ce#cc#e5-GBK-EUC-H)
%%Title: (ATSHSG+#cb#ce#cc#e5-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /ATSHSG+#cb#ce#cc#e5-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -141 996 855} def
/FontInfo 4 dict dup begin
/FSType 0 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 22141 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
258 <001C60D8A8C9B5EE31020BCBF17B5FB9F9E732E3D94DA20D116BCCF8BCF
37206C23E3CE32C85907BC785362710976AE792A62B9AB6AB571EE757FE46DD4
0DE8B85CCB3CF6DACC0414F8114DDA54A12EF3BE8C3ED8029AFB12C302848002
583796DE6D0F2761CBBDFB2A099740A38EA88AB24E6114F7CC3876DF18CE9980
45F6701C7DB123740F38C5861ED1C86EC0A547FEB072DA5AD> |
13046 <001C60D8A8C9B5EE31029A7CD00006BE8F18CC9E4D20B2A8B806DBA4B
41E4ABFD51824512FF06292E05C88BC68CD1D0D4BEFDCFBB55C2DF01E510B0B9
F2C1C347693769171F3710AFEF599A25C352A29716BCEF5B0B7FDFC61089242B
27AC01D007EA7E11649CB211EA4AA4F3A4BECFDC091462B270781D5ADA4DA291
A81E2AFBDB5753EBD0EBAB3194DEF0B85E3645E310B385219C691CB30EB95631
CD6334AF5C835641A96D8160F97932C2C88383F2DD6330CE0DCAA586B30E87A9
EB394E1CB91AED1B05F1E477FDEF4F4D03D1EED2F93E256620DF8D404FF2395F
CCD004FFC1DF52CB9B356E35F9C94F0C35E03DF4DEF142E7E3096280696227B7
1005A7102DC54F2B6823F92A5015B8F808C94600628A43C8FBA87ABFB2F20632
B7B2FF1ECF4D95A6ADD7FABEDE468C58C10B386B13EADC7F73C846608202B6F9
210B8E3B8282B35E2E1E7F20F09EE5117C8CDB04130D1796B2E9DEAFDF63E1DE
C59A541C4427C4221054532B8D49A79C590FF02D130465E9F773E05C2DA679F9
8C53593121BC064683325F77F9D17E468EC0FF581A95CF50C5F5C1B52A37F1A9
7A3DBB386B73F910F172ACBB64F25> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H /Identity-H 0 [/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
316.419 44.2188 mo
(\001\002)sh
324.419 44.2188 mo
(\001\002)sh
155.659 101.213 mo
(2\366)sh
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
155.659 101.213 mo
(2\366) false chp
.0031746 lw
@
%ADOBeginSubsetFont: ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H 1 GetGlyphDirectory
5353 <001C60D8A8C9B5EE31032B4596DB64C5F9D1A8AF7EA4A229BD9A6524C3
287862B9BC573F7B7EAE44CD720153F3F26036B8D0067B00AEA72AEBF3BC7B87
EE5EF8B657F89495E4B43D849562418830A116973BB054202C0793E5D6B379B2
2F47019BAACB7B1B05DFCFD0096F91C7E6ECBECC8D9104784FEA7FB837127038
9948132BF643BC7A48998546C8AE66112B8AB3282018BD5E9FA375A90840C844
1C451722CB3C564594709677F32FE963137119791CBE9B0B9ED47AA66C75E628
F0089B87F7C23AE51A6CC7> |
!
end
end end
%ADOEndSubsetFont
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
163.69 101.213 mo
(\024\351)sh
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
163.69 101.213 mo
(\024\351) false chp
@
%ADOBeginSubsetFont: ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H 1 GetGlyphDirectory
15932 <001C60D8A8C9B5EE3102F66068B411C074D2C5C0D5F026854B7ACBEE4
11C4D15F2DC25A905F8AB0CDEC7B965EBC67BBD27ACFC58F23648DB0B7A632C2
6EB7C187E6C28394B0BE28C16F6EB2EE01D201E1A3DD9D61B8FF0BB9A301014D
589B49FC6E334D2388827864A87F89E8D487A385F48B3FAE1073D58404CD68F1
035983F2B65952B8362AFA7BB43AA22FFA6D776849BB894301C5976E99808A7C
023AEF95BFC02B93354F5DD7D57AC686F1E3BE64142B676A21562E0A97DFB416
B897C1045E8B27CCEA0F93860468A8A15264CB98D7FE89F25CFE245A4FEA3C0E
2C8799C53D812DA660A46E5788B921A54164A4589B792E64DF7E2C974> |
!
end
end end
%ADOEndSubsetFont
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
171.722 101.213 mo
(><)sh
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
171.722 101.213 mo
(><) false chp
@
.75 lw
47.2589 34.5908 mo
47.2589 34.5908 li
47.2289 34.3808 li
47.2289 32.9708 48.3788 31.8208 49.7888 31.8208 cv
49.7888 31.8208 li
49.5089 31.5908 li
56.2589 31.5908 li
56.0089 31.8208 li
57.4189 31.8208 58.5688 30.6808 58.5688 29.2608 cv
58.5688 29.2608 li
58.5688 30.6808 59.7089 31.8208 61.1288 31.8208 cv
61.1288 31.8208 li
60.7589 31.5908 li
67.5089 31.5908 li
67.3488 31.8208 li
68.7589 31.8208 69.9088 32.9708 69.9088 34.3808 cv
69.9088 34.3808 li
69.7589 34.5908 li
1 /0 /CSD get_res sepcs
.749 sep
@
0 1 1 .00173953 cmyk
ATSHSF+CALIBRI*1 [9 0 0 -9 0 0 ]msf
54.2589 26.1808 mo
(a)sh
58.5699 26.1808 mo
(a)sh
81.0089 34.5908 mo
81.0089 34.5908 li
81.2488 34.3808 li
81.2488 32.9708 82.3889 31.8208 83.8088 31.8208 cv
83.8088 31.8208 li
84.0089 31.5908 li
131.259 31.5908 li
131.129 31.8208 li
132.539 31.8208 133.689 30.6808 133.689 29.2608 cv
133.689 29.2608 li
133.689 30.6808 134.829 31.8208 136.249 31.8208 cv
136.249 31.8208 li
136.509 31.5908 li
183.759 31.5908 li
183.569 31.8208 li
184.979 31.8208 186.129 32.9708 186.129 34.3808 cv
186.129 34.3808 li
186.009 34.5908 li
1 /0 /CSD get_res sepcs
.749 sep
@
.834195 .0135195 1 .00173953 cmyk
ATSHSF+CALIBRI*1 [9 0 0 -9 0 0 ]msf
129.679 26.1808 mo
(a)sh
133.99 26.1808 mo
(b)sh
197.259 34.5908 mo
197.259 34.5908 li
197.469 34.3808 li
197.469 32.9708 198.609 31.8208 200.029 31.8208 cv
200.029 31.8208 li
200.259 31.5908 li
227.259 31.5908 li
227.509 31.8208 li
228.919 31.8208 230.069 30.6808 230.069 29.2608 cv
230.069 29.2608 li
230.069 30.6808 231.209 31.8208 232.619 31.8208 cv
232.619 31.8208 li
232.509 31.5908 li
260.259 31.5908 li
260.099 31.8208 li
261.519 31.8208 262.659 32.9708 262.659 34.3808 cv
262.659 34.3808 li
262.509 34.5908 li
1 /0 /CSD get_res sepcs
.749 sep
@
.719081 .14258 0 0 cmyk
ATSHSF+CALIBRI*1 [9 0 0 -9 0 0 ]msf
226.449 26.1808 mo
(e)sh
230.927 26.1808 mo
(f)sh
275.259 34.5908 mo
275.259 34.5908 li
275.419 34.3808 li
275.419 32.9708 276.569 31.8208 277.979 31.8208 cv
277.979 31.8208 li
278.259 31.5908 li
284.259 31.5908 li
284.549 31.8208 li
285.969 31.8208 287.109 30.6808 287.109 29.2608 cv
287.109 29.2608 li
287.109 30.6808 288.259 31.8208 289.669 31.8208 cv
289.669 31.8208 li
289.509 31.5908 li
296.259 31.5908 li
296.249 31.8208 li
297.659 31.8208 298.809 32.9708 298.809 34.3808 cv
298.809 34.3808 li
298.509 34.5908 li
1 /0 /CSD get_res sepcs
.749 sep
@
.13727 .696223 1 .0349432 cmyk
ATSHSF+CALIBRI*1 [9 0 0 -9 0 0 ]msf
281.779 26.1808 mo
(m)sh
288.968 26.1808 mo
(n)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210732def000000cc000000566376
7420f32cda8100000124000007c66670676dc3a61d01000008ec00000631
676c796660978a9e00006fd0000485d668656164cf5b1d8300000f200000
00366868656112ef12f600000f5800000024686d7478b14216ca00000f7c
00001a286c6f63611181f1ae000029a400001a2c6d6178700d0110ae0000
43d0000000206e616d650035b207000043f000001cc970726570e43894a4
000060bc00000f1367646972000000000000000000000000000103350190
00050000059a053300000125059a0533000003a000660212010502020603
05040502030400007a878000000000000008000000004d6f6e6f00400020
fffc058cfe460133072101bb400001ffffff00000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025000040425554403f3e3d3c3b3a393837363534333231302f2e2d2c2b
2a292827262524232221201f1e1d1c1b1a1918171614131211100f0e0d0c
0b0a090807060504030201002c4523466020b02660b004262348482d2c45
2346236120b02661b004262348482d2c45234660b0206120b04660b00426
2348482d2c4523462361b0206020b02661b02061b004262348482d2c4523
4660b0406120b06660b004262348482d2c4523462361b0406020b02661b0
4061b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a
51582320b08d44235920b0ed51582320b04d44235920b09051582320b00d
44235921212d2c20204518684420b001602045b04676688a4560442d2c01
b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01
b0172370b10217453ab10200080d2d2c45b01a234445b01923442d2c2045
b00325456164b050515845441b2121592d2cb00143632362b0002342b00f
2b2d2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b000
8b20b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112b
b0172344b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112b
b0172344b0177ae41b038a45186920b01723448a8a8720b0a05158b0112b
b0172344b0177ae41b21b0177ae45959182d2cb0022546608a46b040618c
482d2c4b53205c58b002855958b00185592d2c20b0032545b019234445b0
1a23444565234520b00325606a20b009234223688a6a606120b01a8ab000
527921b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb11400
8a5279b31940201945208a54582321b03f1b235961442d2cb11011432343
0b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d
2cb10e0f432343650b2d2cb11011432343650b2d2c4b525845441b212159
2d2c0120b003252349b04060b0206320b000525823b002253823b0022565
38008a63381b212121212159012d2c4bb06451584569b00943608a103a1b
212110592d2c01b005251023208af500b0016023edec2d2c01b005251023
208af500b0016123edec2d2c01b0062510f500edec2d2c20b00160011020
3c003c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b0
06430b2d2c3eb02a2a2d2c352d2c76b802b023701020b802b04520b00050
58b00161593a2f182d2c21210c6423648bb84000622d2c21b08051580c64
23648bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb8
1555621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb4
000100000015b00826b00826b00826b008260f10161345683ab001162d2c
b4000100000015b00826b00826b00826b008260f1016134568653ab00116
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c014b
53234b515ab00225b00425b006254923451869525a58b00225b00225b005
25462345696048592121212d2cb0134358031b02592d2cb0134358021b03
592d2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425
060c6423646164b807085158b00425b00425012046b01060482046b01060
48590a21211b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b8fff060482046b8fff06048590a2121
1b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b0
3b2b1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a03
4b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a
8a462320468a608a61b8ff8062232010238ab9035803588a70456020b000
5058b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b1230188
51b1400188535a58b910000020885458b202010243604259b12401885158
b920000040885458b2020202436042b12401885458b2022002436042004b
014b5258b2020802436042591bb940000080885458b202040243604259b9
4000008063b80100885458b202080243604259b94000010063b802008854
58b202100243604259b94000020063b80400885458b20240024360425959
5959592d2cb0024354584b53234b515a58381b2121591b21212121592d00
000000010000000300001baaf9b55f0f3cf50819080000000000a2e31dc2
00000000b9d5b528fb74fd8c1000080e0000000900010001000000000001
00000721fe4500571000fb74fe2610000001000000000000000000000000
0000068a0639011c00000000020000000200000002aa00e4034400850400
00250400006c06aa00480639004b0171005102aa005402aa002e04000091
048300250200006e02aa005302000091023900030400004a040000f00400
002c040000530400002004000062040000580400004c0400007c04000051
023900b00239008e048300250483002504830025038d005c075e006105c7
0010055600220556004a05c7002304e3002a0473002105c7004805c70023
02aa0033031d002a05c7002204e30029071d002205c7ffe505c700480473
002205c70048055600230473008004e3003e05c7000b05c70012078d001b
05c7000f05c7001304e3001a02aa00a80239000302aa004b03c100250400
ffef02aa0076038d00490400fffb038d004604000044038d004c02aa004f
0400003d0400000d0239003c0239ff63040000110239003d063900110400
000c040000450400fff90400004402aa000d031d00640239001404000002
0400001105c7000d0400001b0400000c038d002903d7011b019a00a103d7
00b10454001405c7000e05c7000e0556004a04e3002a05c7ffe505c70048
05c7000b038d0049038d0049038d0049038d0049038d0049038d0049038d
0046038d004c038d004c038d004c038d004c0239003c0239003c0239000d
023900020400000c04000045040000450400004504000045040000450400
00020400000204000002040000020400006503330062040000810400003d
0400009c02cd007003a0fff204000023061400450614004507d7001e02aa
00ec02aa003904640019071dffe805c7004905b400350464000804640018
0464001804000002049c008603f4004005b4002b0696002e0464003e0231
00000235fffa027b001d062500470556004904000027038d005902aa00e4
0483002404640053040000020464001e04e5001a04000040040000400800
00e605c7000e05c7000e05c70048071d004b05c700430400ffee0800ffed
038d0043038d004302aa00b902aa00c10464001703f4002f0400000c05c7
00130156feab0400ffe902aa007702aa007304730019047300170400008b
0200009102aa00c1038d00430800004105c7000e04e3002a05c7001004e3
002a04e3002a02aa003302aa003202aa003202aa003205c7004805c70048
05c7004805c7000b05c7000b05c7000b0239003c02aa003c02aa001602aa
001702aa003702aa00e902aa009602aa00bb02aa004e02aa009402aa003c
04e300160239001e0473007e031d006404e3001a038d0029019a00a105c7
00230400004405c700130400000c047300240400fff904830025048300a5
02660088026600140266002c06000086060000860600002a0400002105c7
00480400003d02aa003304730080031d00640556004a038d00460556004a
038d0046040000260400ffef02aa01ef05c70010038d004905c70010038d
004905c70023052c004405c7002304e3002a038d004c04e3002a038d004c
04e300290239003d04e300290340003c04e3002902c0003605c7ffe50400
000c05c7ffe50400000c05c70048040000450556002302aa000d05560023
02aa000d04730080031d006404e3003e0239001404e3003e036b001305c7
000b0400000205c7000b0400000204e3001a038d002904e3001a038d0029
04a0002505c7004c05d900470431005703c50046035c0047045000460337
000c049e00450400ffef049500e40285000207c0002c0800004f04000099
0800004f040000990800004f040000980400009807d5016a05c700c00483
002604cd00990483002604d5022204d5010505abffe905ab027e05ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f04150040040000250600005505ab002f046b003b04d5
000301c00089035500a206ab003403d5006404d5009202d6008302d60083
04d500b202d6007005c70010038d00490556004a038d00460556004a038d
004604e3002a038d004c04e3002a038d004c04e3002a038d004c05c70048
0400003d05c700480400003d05c700480400003d05c700230400000d05c7
00230400000d02aa00160239ffde02aa00170239ffdf02aa00330239fffe
02aa003302390039031d002a0239ff6305c70022040000110400001104e3
00290239003d05c7ffe50400000c059d002603f5000c05c7004804000045
05c70048040000450556002302aa000d04730080031d006404e3003b0239
001005c7000b0400000205c7000b0400000205c7000b0400000205c7000e
04000002078d001b05c7000d05c700130400000c0239001605c7000f038d
0049071dffe80556004905c7004904000027023900b2078d001b05c7000d
078d001b05c7000d078d001b05c7000d05c700130400000c02aa00b802aa
ffdb0400003d04cd005a060000860600002a060000310600002502aa00c3
02aa00bb02aa00ec02aaffea05c70010058dff5c0677ff5c034aff5c05c7
ffb60687ff5c05f2ffb30227ffb105c70010055600220525003204e3002a
04e3001a05c7002302aa003305c7002205cd001c071d002205c7ffe50525
004f05c7004805c700250473002204a8002004e3003e05c7001305c7000f
05e7001805f2003c02aa003205c7001304310057035c0047042f000b0227
002503f6fffa0412006e0389000003500046042f000b03d5005102270025
0408001503e10019044a0074039effd3039100460400004503fe0059032b
004603f6fffa038d00180502001c0544004b0227000003f6fffa04000045
03f6fffa0544004b04e3002a0604003704a000250548004b0473008002aa
003302aa0032031d002a06fa000d06fa002705ee00360556002505aa001a
05c7002505c70010049800240556002204a000250575001a04e3002a072b
00120402002b05c7002505c7002505560025056d0012071d002205c70023
05c7004805c70025047300220556004a04e3003e05aa001a0652004c05c7
000f05c700250533fffa081200390812003905a6003606fa002504980024
0548003a083900260556ffee038d00490412004e03c700300348001f0412
001a038d004c05870017032900180448002e0448002e03e3002e03fe000c
0510002e0448002e040000450448002e0400fff9038d0046037f000c0400
000c052f00570400001b0448002e0406001e0629002e0629002e0423000c
0560002d03a6002e036f001b05fa002d03aeffff038d004c03dd00110348
001f036f0046031d00640239003c023900020239ff6305d1000c05c9002d
0400000d03e3002e0400000c0448002e039a002502cf001f0800004107a2
0010040a000d02aa010102aa001c02aa003202aa001202aa010202aa008f
02aa008f02aa008f02aa009002aa010202aa001c02aa010202aa012102d9
005602aa008f025400e002be02af02beff6b023900b003da005f03a40033
02af0021035a004303c5004e023b0043024a004e03d0005803ce00430222
0043039e0043037600330374000f040f006403e2004e0232004302700021
03cd005f03a2004303a200430386005803dc004303ae003d03ca006903c0
004304e200430400002104750043045d00430444004301ac006b02f9006b
06360096023bff9d039e0043039e00430374ff5b0374ff5b03a2003304e2
004304e2004304e2004304e2004303da005f03da005f03da005f03a40033
02af0021035a004303c5004e023b00430279000c03ce004302220043039e
0043037600330374000f03e2004e0270002103cd005f03a2004303860058
03ae003d03ca006903c0004304e2004304000021023b004303a400330376
0033038600580404000f0000ffdc0000ff250000ffdc0000fe51028d00ab
028d00a002da0043034d007901a8ffba019c004601e50046019c0046019c
004601ad0048019c004601b10046015100460435017c0435012e043500b7
043500810435012c043500be043500af043500810435009a043500db0435
0085028d00c1043500b3060001000600010002420036060001000435009e
04350098043500cb060001000600010006000100060001000600010001b1
004606000100060001000600010006000100060001000600010006000100
06000100051bffba06000100060001000600010005b5003a05b5003a01f4
ffba01f4ffba060001000600010006000100060001000481003604350036
043dffba043dffba03e9004a03e9004a067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba051b003204b5002406000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
01cf003001b1004601b1004601b1004001b1004606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000400001b080000000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100028d007f028d005d0600010004ee0015034d007901a8000e01d6ffdc
01a8005601d60010037500320375003201a8002d01d60013051b003204b5
002401f4ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba
01f4ffba024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba02b3005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a
03e9004a0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e
06c5ffba06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7
ffba04a7ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a
039a00360435ffba0327ffba064f0027064f00270224ffba021affba04a7
004604a700460224ffba021affba04cf002d04cf002d0327ffba0327ffba
040d0047040d004701a8ffba01a8ffba02b4002302b400230327ffba0327
ffba043500450435004501f4ffba01f4ffba024200360300fff7039affba
0327ffba0375003203750032051b003204b50024051b003204b5002401f4
ffba01f4ffba045a004004ce0040045a002604ce0030045a005304ce0041
045a005304ce00410600010006000100019c0046019c0046060001000600
0100060001000151004601b10046060001000600010001ad004801e50046
06000100060001000600010001b1004601b1004601b1004601b1004601b1
004001cf003006000100019c0046019c0046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100028d00ca028d
00c7028d00c6060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000100ffba0800ffba1000ffba05c70048043b
00450635000b045600020000fdcc0000fc140000fd130000fe420000fce0
0000fdd40000fe620000fe2b0000fdb70000fc980000fd880000fc080000
fcfe0000feff0000ff030000fe9e041a00a206000088060000140000fe70
0000fdd40000fdf60000fd770000fe620000fdbb0000fbd80000fbd80000
fb740000fcfe0000fc8c0000fc460000fd270000fcb40000fca80000fcae
0000fc440000fe140000fe700000fd910000fc710000fdc30000fe470000
fe620000fcc30000fde10000fd870000fd4b0000fd970000fd4b0000fc8a
0000fc620000fc090000fbd70239003c05c70010038d004905c70010038d
004905c70010038d004905c70010038d004905c70010038d004905c70010
038d004905c70010038d004905c70010038d004905c70010038d004905c7
0010038d004905c70010038d004905c70010038d004904e3002a038d004c
04e3002a038d004c04e3002a038d004c04e3002a038d004c04e3002a038d
004c04e3002a038d004c04e3002a038d004c04e3002a038d004c02aa0033
0239003c02aa00330239003c05c700480400004505c700480400004505c7
00480400004505c700480400004505c700480400004505c7004804000045
05c700480400004505c70048043b004505c70048043b004505c70048043b
004505c70048043b004505c70048043b004505c7000b0400000205c7000b
040000020635000b045600020635000b045600020635000b045600020635
000b045600020635000b0456000205c700130400000c05c700130400000c
05c700130400000c05c70010038d004902aa00330239000605c700480400
004505c7000b0400000205c7000b0400000205c7000b0400000205c7000b
0400000205c7000b040000020000ff090000ff090000ff090000ff0904a0
00230348001f072b0012058700170556002503e3002e0556002503e3002e
05c700230448002e05c700130400000205c700130400000205c7000f0400
001b0533fffa0406001e053300250400000d05c7002b038d004c05c70048
0400004505b5003a01f4ffba0224ffba021affba04a7004601f4009e01f4
001001f4001b01f4001001f4006b01f4fff90227ffce01a8000f01a8fff5
02aa00a402aa00a401a8000e01a8005601a800560000ffcf01a8000f01d6
ffbf01a8fff501d6ffcd01a8001d01d6fff501a8009301d6001303750032
037500320375003203750032051b003204b5002405b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba0481003604350036043dffba043dffba02b3003202b3003202b3005f
02b3005f02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3
005f02b3005f02b3005f02b3005f02b3003802b3003802b3004902b30049
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
03e9004a0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e
06c5ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7
ffba045a002a039a00360435ffba0327ffba064f0027064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba064f0027064f00270224ffba021affba064f0027
064f00270224ffba021affba04a7004604a7004604a7004604a70046067f
0014077600140327ffba041effba067f0014077600140327ffba041effba
04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327
ffba04cf002d04cf002d0327ffba0327ffba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047
040d004701a8ffba01a8ffba043500450435004501f4ffba01f4ffba0435
0045043500450435004504350045043500450435004501f4ffba01f4ffba
04350045043500450481003604350036043dffba043dffba024200360300
fff7031a001a031a001a031a001a03750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
003203750032037500320375003203750032051bffba04b5ffba051b0032
04b5002401f4ffba01f4ffba0375003203750032051b003204b5002401f4
ffba01f4ffba051b003204b50024067f0045067f0045067f0045067f0045
01a800280000fe290000fea20000ff300000ff1d0000ff120000ff920000
fe7e08fc003208ad00320000ffb50000ffb60000feed0000ff640000fe7e
0000ff9f018d000002f6fffd0000fe820000ff1004cd00320000ff580000
ff580000ff640692003e0692003e043fffba043fffba08c9003e08c9003e
06c5ffba06c5ffba045a002a039a00360435ffba0327ffba034d007902b4
00230242003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b1
01f4006d067f001407760014022200430000fee702bc000004440043045a
fff504cefff5045a005304ce0041045a005304ce0041045a005304ce0041
045a005304ce0041045a005304ce0041045a005304ce0041043500710435
00ad045a000f04ce000f0000000000000076000000760000007600000076
0000013000000228000003f60000062e0000083a00000a6e00000af20000
0b7600000bf800000dd000000ea000000f3e00000f9800000ff000001062
0000119400001278000014480000162600001738000018c400001a3e0000
1b3400001d4800001ece00001f5e0000202c0000214a000021ec0000231c
0000248c0000276e000029f600002d1a00002e9400003006000031d80000
338800003582000037bc000038de00003a3200003da800003ebe0000411a
00004354000044700000466a000047f200004a9200004d8c00004ee20000
50ea0000536c0000574200005b3a00005da000005eea00005f9200006014
000060be000061a6000061e200006238000066320000687600006ad40000
6da6000071860000740a000078a200007bd200007e88000080ca00008534
0000871000008bda00008f42000091ae0000947a000096d4000099040000
9dc80000a01e0000a2c20000a5f00000aa520000aeec0000b1aa0000b3a6
0000b49a0000b5080000b5fa0000b6b80000b7080000b73a0000b7860000
b7bc0000b7f80000b82e0000b8780000b8ae0000b8ee0000b9360000b976
0000b9a40000b9da0000ba060000ba3a0000ba760000bab80000baee0000
bb280000bb580000bb900000bbc80000bc040000bc3c0000bc6e0000bcac
0000bce80000bd260000bd600000bd960000bddc0000be200000bf7c0000
c0540000c24a0000c4b40000c71c0000c7780000c8140000c9b00000ccc8
0000ceca0000d1360000d18e0000d2240000d3880000d5a40000d7480000
d89c0000d99e0000dada0000dc360000de6c0000dfee0000e1160000e1f0
0000e2da0000e4040000e4ea0000e6800000e76e0000e9020000ec6c0000
ee8e0000efea0000f0920000f0ea0000f1b00000f3320000f49a0000f548
0000f5e00000f67c0000f77e0000f7ba0000f7f80000f82e0000fa6e0000
fe020000fe3a0000fe720000ff780000ff9e0001004a000100ec000101d0
000102e20001032c0001035e000103ba0001052000010584000105e40001
084800010a7000010d0a00010d5a00010d7c00010e9000011168000111b0
000112040001124200011282000112b2000112e60001133a000113800001
13b2000113e60001141e0001145000011480000114c6000114f600011664
000116e0000117a2000117de0001185a000118b4000119ce00011aa40001
1b4200011bc600011c3000011da800011fae00011fec0001202a00012062
000120ac0001213000012276000124ba000124ea0001252c000126a80001
289c000128e200012a0400012abc00012bda00012d0000012efe0001308e
0001327c000134400001347a000134b6000134e60001352c000135800001
35bc000135fc000136380001366c000139100001394e000139b8000139f6
00013a3800013a6600013aae00013ae600013d9400013ebe00013eea0001
3f1c00013f5400013f9200013fc200013ff600014124000142c8000142fc
0001433000014366000143a4000143e600014422000144540001449a0001
44d0000145060001454400014578000145bc000145f8000147680001497a
000149be00014c0a00014c4c00014c7e00014cb600014ce800014d180001
4d4e00014d8e00014dce00014e7000015038000151c0000152d000015472
000155d6000156c0000157cc00015932000159a4000159d800015b240001
5e4600015ef200015fb600016064000161220001623e00016356000164b2
0001650e0001664a000167300001680e0001686c000168f0000169760001
69b8000169f400016a4400016a9400016ae400016b3600016b9600016bf6
00016c5800016cbe00016d4800016db000016e1600016e8c00016f020001
6f90000170060001707a000171060001717c000171f600017284000172fc
00017372000174000001748400017508000175c60001764e000176de0001
779800017826000178b00001796e000179fe00017a8a00017b4800017c22
00017d0200017e2400017e6800017ea400017ee200017f2600017f6a0001
839200018b260001925400019290000192ce000193140001935c000193a2
000193e8000194d00001955800019626000197d20001993400019b6c0001
9c5a00019d8400019e7e00019f960001a0340001a0b80001a1660001a234
0001a28e0001a33c0001a3be0001a42a0001a45e0001a5e80001a7420001
a7ba0001a8080001a8880001a8ec0001a9720001a9ae0001a9e00001aa16
0001aa540001aa960001aac40001ab080001ab360001ab700001ab9e0001
abd60001ac040001ac500001ac980001acd80001ad080001ad340001ad6a
0001ad9a0001add00001afbe0001b2720001b2a20001b2ec0001b31e0001
b3640001b3940001b3ce0001b3fa0001b4280001b4660001b6080001b63e
0001b66e0001b8900001b8b60001b9060001b9300001b9600001baaa0001
bc4e0001bc840001bcba0001bcee0001bd320001bd580001bd880001bdb8
0001bdea0001bf420001c12e0001c15e0001c1920001c1c40001c1f80001
c2280001c2580001c2860001c2b40001c2e40001c3180001c3480001c378
0001c4660001c4a60001c4e60001c5160001c5460001c5760001c5a60001
c5f00001c6200001c6500001c6800001c6b00001c6e40001c7180001c74e
0001c7880001c7fe0001c8380001ca100001cade0001cce80001cf680001
d1b60001d3bc0001d4360001d4d00001d4e00001d5f40001d6200001d7a2
0001d9080001d9ca0001da040001db780001dbb20001dbee0001dbfe0001
dc0e0001dd260001dd360001dd460001dd560001dd660001dd760001dee0
0001def00001df000001e0840001e0940001e19a0001e1aa0001e2b20001
e2c20001e2d20001e2e20001e4500001e60a0001e63e0001e6700001e6a0
0001e6d00001e7000001e72e0001e7640001e9000001e9f60001eb960001
ecbc0001edee0001eeec0001f09a0001f1dc0001f3420001f4480001f642
0001f6520001f7ac0001f8fa0001fa1a0001fb9e0001fd2a0001febc0001
fef40001ff2a0001ff620001ff920001ffc20001fff60002016800020198
000202be000202ce000202de000203120002032200020488000206640002
07f20002082200020a0200020b6000020b7000020c9200020ca200020d44
00020e7200020e820002112a000212c60002143e0002161e000217980002
188a0002189a000218aa000218ba000218ca000218da000218ea000218fa
00021a6400021c1200021c2200021d5600021ea60002208e0002229a0002
23d60002254e0002264600022680000227c2000227f2000228020002296e
00022b0a00022bf000022d6600022d760002303e0002319e0002337e0002
35d4000237e60002394a00023b9200023d3e00023d4e00023eb000023ec0
00023ed000023fda00023fea00024202000242120002439e000245160002
46f80002491000024a9200024c8a00024dcc00024e0600024fc00002516e
000251b4000253c4000253f2000255340002554400025554000255900002
55a00002577e0002599400025bdc00025c0c00025e7800026018000260b6
00026194000261da0002639800026522000265c000026728000267f00002
69140002696a00026a0400026af000026b2400026bca00026c2000026d1e
00026d7400026db400026df600026e3200026e6400026eae00026ef60002
6f7e0002716e0002724400027352000274280002754e000275e2000276b0
000277d20002795e000279f800027ab200027b6600027c9800027d7c0002
7eca00027f780002805200028142000282fa0002841000028536000286ee
000288b8000289f800028aa200028cc000028de200028efe000290240002
914a000291a4000292540002938c000293be000294040002945200029496
0002950600029684000296b2000296e00002970e0002973c0002976a0002
979800029a4000029a7800029ac600029b0400029b5000029bb000029cba
00029cee00029df000029e2800029e6200029ea800029eec00029f300002
9f5e0002a0f80002a2a00002a2e60002a33c0002a3740002a5fc0002a630
0002a65e0002a68c0002a6b80002a6ea0002a9340002a95e0002aa7a0002
ab2c0002abd80002ac5a0002ad160002ae2e0002af3c0002af700002aff6
0002b1520002b1d40002b21e0002b3280002b3700002b4740002b4f00002
b5480002b5ca0002b6b60002b7cc0002b8ba0002b9640002ba640002bb44
0002bc340002bd1c0002bdcc0002be4e0002c0ac0002c0d60002c1000002
c1b80002c1e20002c3240002c42a0002c5140002c53e0002c5680002c592
0002c5bc0002c5e60002c7660002c7900002c7ba0002c7e40002c80e0002
c8380002c8620002c88c0002c8b60002c8ea0002c9140002c93e0002c968
0002cae20002caf20002cc0c0002cc1c0002cc460002cc700002cc9a0002
ccc40002ce6c0002d07c0002d1aa0002d1ba0002d3360002d3460002d48c
0002d6580002d75e0002d8de0002da860002dcb20002de140002dffe0002
e1420002e2700002e29a0002e2c40002e2ee0002e3180002e3420002e36c
0002e3960002e3c00002e3ea0002e4140002e43e0002e4680002e4920002
e4bc0002e4e60002e5100002e74c0002e8c80002ea0c0002ebf40002ed3c
0002ed660002ed900002edba0002ede40002ee0e0002ee380002ee620002
ee8c0002eeb60002eee00002ef0a0002ef340002ef5e0002ef880002efb2
0002efdc0002f0060002f0300002f26c0002f5b20002f5dc0002f6060002
f6300002f65a0002f6840002f6ae0002f6d80002f7020002f72c0002f756
0002f7800002f7aa0002f7d40002f7fe0002f8280002f8520002f87c0002
f8a60002f8d00002f8fa0002f9240002f94e0002f9780002f9a20002f9cc
0002f9f60002fa200002fa4a0002fae40002fafa0002fb240002fe040002
fe140002ff2e000300500003018e000302d00003047600030486000305c8
000307180003090800030adc00030bf400030c0400030c8600030d140003
0e1400030e2400030ec400030ed400030fea0003113e0003126e0003127e
0003134c0003135c000314d2000314e2000315f6000316060003173a0003
18d00003198c0003199c00031a9a00031bf400031c8000031c9000031dba
00031f460003200200032012000320aa000320ba00032186000321960003
226e0003227e00032386000323960003255c0003256c000326c4000326d4
0003293e0003294e00032b4800032b5800032cc200032cd200032dc20003
2dd200032f6a00032f7a00033098000330a8000331e8000331f800033208
0003321800033390000333a0000333b0000333c000033512000336620003
3730000338140003399400033b1800033c1800033d2c00033e7000033e80
00033f6e00034048000341e4000341f40003431200034418000346100003
462000034630000346400003478a0003479a000348520003486200034970
0003498000034a6c00034a7c00034b9a00034baa00034c4800034c580003
4c6800034d5600034eca00034ff6000350f0000351000003511000035120
000352be000354780003554600035556000357b600035a0000035c860003
5eee00036174000363ea000365ba000367740003679e000367c8000367d8
000367e8000368120003683c000368660003687600036886000368b00003
68da000368ea000368fa000369240003694e000369780003698800036998
000369a8000369b8000369c8000369d800036a0200036a1200036a220003
6a4c00036a7600036aa000036aca00036af400036b1e00036b4800036b72
00036b9c00036bc600036bf000036c1a00036c4400036c6e00036c980003
6cc200036cec00036d1600036d4000036d6a00036d9400036dbe00036de8
00036e1200036e3c00036e6600036e9000036eba00036ee400036f0e0003
6f3800036f6200036f8c00036fb600036fe00003700a000370340003705e
00037088000370b2000370dc00037106000371300003715a000371840003
71ae000371d8000372020003722c0003725600037280000372aa000372d4
000372fe0003739e000373e20003745800037482000374ac000374d60003
75000003752a000375540003757e000375a8000375d2000375fc00037626
000376500003767a000376a4000376ce000376f8000377220003774c0003
7776000377a0000377ca000377f40003781e000378480003787c000378b0
000378e400037a9200037ca200037e92000380a0000381320003818c0003
81f600038290000383200003839000038464000385520003862600038716
000387b0000388840003891e000389cc00038a7200038ac400038c220003
8c7000038cbe00038d1600038d6e00038dc000038e1200038ece00038f8a
00039020000390b60003914c000391e80003928400039320000393320003
934400039356000393680003937a000393d400039434000394d0000394e2
000394f4000395040003951400039526000395380003954a0003955c0003
956e000395800003961c000396b20003974e000397e40003990000039926
0003994c000399720003999c000399d800039a4600039a8e00039b040003
9b4400039bb000039bec00039c5000039c8800039cec00039d2c00039d82
00039dc200039e2e00039e7800039ed000039f0800039f5a00039f920003
9fe60003a0140003a03a0003a0640003a09e0003a0ce0003a0fe0003a154
0003a1b60003a21a0003a2820003a2ea0003a34a0003a39c0003a3f40003
a44e0003a4a60003a4d60003a5140003a53a0003a56e0003a5980003a5be
0003a5e40003a60a0003a6460003a69e0003a6fa0003a75c0003a7ae0003
a80c0003a8440003a8940003a8d00003a9200003a9500003a9880003a9b8
0003a9ec0003aa120003aa380003aa680003aa980003aabe0003aae40003
ab0e0003ab3a0003ab600003ab9c0003abcc0003abfc0003ac2c0003ac5c
0003ac820003acbe0003acee0003ad2e0003ad580003ad840003adb60003
ade00003ae0c0003ae3a0003ae700003aeae0003aef60003af340003af64
0003afb40003afee0003b0300003b0600003b0b60003b0e00003b1ac0003
b1d60003b2960003b2c00003b3760003b3a00003b4640003b5580003b686
0003b7ee0003b91e0003b9fa0003bb1e0003bdda0003c0ce0003c27e0003
c4b00003c6d20003c9c20003cb6e0003cd6a0003cd7a0003cede0003d14c
0003d2d20003d6c60003d9dc0003db8a0003dd7e0003dee60003def60003
e05c0003e1d00003e2e00003e4520003e52c0003e5a20003e6580003e6fe
0003e86e0003e8a60003e9200003e9e20003ea9c0003eb040003ec0a0003
ed400003ee0e0003ef6c0003efe60003f0600003f1280003f1e20003f296
0003f2f20003f34c0003f3940003f4040003f4800003f4ca0003f5040003
f54a0003f58e0003f5e00003f6320003f6b40003f7360003f7780003f7b8
0003f7ee0003f8240003f8520003f8800003f8b40003f8e80003f92a0003
f96c0003f9a80003f9e40003fa1e0003fa580003fa8a0003fabc0003faee
0003fb200003fb5a0003fb940003fbd60003fc180003fc5a0003fc9c0003
fcea0003fd380003fd7a0003fdbc0003fdfc0003fe3c0003fe760003feb0
0003fefc0003ff480003ff860003ffc60004000c000400520004008e0004
00e4000401200004015c0004019c000401dc000402180004025400040294
000402d4000403180004035c000403b00004043e00040480000404c20004
052a00040592000405c4000405f60004062e00040666000406fc00040792
000407dc00040826000408620004089e000408f40004094a000409940004
09de00040a3600040a8e00040ace00040b0e00040b4600040b7e00040bc8
00040c1200040c5000040c8e00040cd000040d1200040d6600040dba0004
0e0000040e4600040e8c00040ed200040f2800040f7e00040fd40004102a
00041076000410c20004110e0004115a000411ce00041242000412b60004
132a00041368000413a6000413e400041422000414600004149e000414e2
0004152600041572000415be0004161e0004166a000416a8000416f60004
180600041856000418a6000418de000419160004196c000419c200041a36
00041a9a00041adc00041b1e00041b7400041bc200041c0e00041c5a0004
1c9a00041cda00041d2200041d6a00041dd600041e3000041e6800041ea0
00041ee000041f200004203a000421800004227000042380000423d60004
242c0004247e000424d2000425360004259a000425f000042646000426bc
0004273200042774000427b6000427f80004283a0004287c000428be0004
29140004296a000429bc00042a1000042a9800042b1a00042bba00042c5c
00042c9a00042cd800042d1600042d5200042d9000042dce00042e0c0004
2e4800042f2c000430180004312e0004324a00043314000433de000434d8
000435d2000436d0000437ce000438ec00043a0a00043b3000043c560004
3d5800043e5a00043eec00043f7e00043fbc00043ffa00044054000440ae
000440e60004411e0004422e0004423e00044286000442ce000443260004
437e000443b0000443e20004442400044466000444a0000444da0004451e
00044562000445da00044654000446e40004472800044768000447ea0004
486c000449c4000449d400044a2200044a7000044aac00044ae800044b2e
00044b7400044bc200044c1000044c6000044cb000044d0c00044d680004
4ede000450460004507e000450b80004510400045150000451a2000451f4
000452460004529c000452d8000453140004536a000453be000454f60004
5596000455e4000456240004565e000457f400045a5c00045b2000045cb6
00045e1400045ee200046088000462dc000465140004655a0004658c0004
66360004675a0004677e000468180004692400046a3400046b4400046c52
00046dd800046e0a00046eac00046ed400046f3600046f9800046ffa0004
705c0004709a000470d8000471120004714c00047178000471c4000471fe
0004723800047394000474e8000474f8000475b6000476ec0004774a0004
7862000479f000047a9600047bdc00047c1a00047c5800047c9000047ce8
00047d1400047d5600047dba00047e0200047e6400047ec400047f360004
7fb20004802e000480b00004813c000481c800048252000482d20004830c
00048348000484ac00048576000485a6000485d600010000068a00f2003c
0076000700020010002f0056000005ca0f130003000200000047035a0000
00030000000000fe00000000000300000001001e00fe0000000300000002
000e02080000000300000003007201d60000000300000004001e00fe0000
000300000005001802180000000300000006002202480000000300000007
00d800fe0000000300000008002602f600000003000000090086091e0000
00030000000a055609a4000000030000000b00720efa000000030000000c
00660f6c000000030000000d06b4026a000000030000000e005c0fd20001
000000000000007f102e0001000000000001000f10ad0001000000000002
000711320001000000000003003911190001000000000004000f10ad0001
000000000005000c113a0001000000000006001111520001000000000007
006c10ad0001000000000008001311a90001000000000009004314bd0001
00000000000a02ab1500000100000000000b003917ab000100000000000c
003317e4000100000000000d035a1163000100000000000e002e18170003
000104030002000c18450003000104050002001018550003000104060002
000c18650003000104070002001018710003000104080002001018810003
00010409000000fe00000003000104090001001e00fe0003000104090002
000e02080003000104090003007201d60003000104090004001e00fe0003
000104090005001802180003000104090006002202480003000104090007
00d800fe0003000104090008002602f600030001040900090086091e0003
00010409000a055609a4000300010409000b00720efa000300010409000c
00660f6c000300010409000d06b4026a000300010409000e005c0fd20003
0001040a0002000c184500030001040b00020010189100030001040c0002
000c184500030001040e0002000c18a10003000104100002000e18b10003
000104130002001218bf0003000104140002000c18450003000104150002
001018450003000104160002000c18450003000104190002000e18d10003
0001041b0002001018a100030001041d0002000c184500030001041f0002
000c18450003000104240002000e18df00030001042a0002000e18ed0003
0001042d0002000e18fb00030001080a0002000c18450003000108160002
000c1845000300010c0a0002000c1845000300010c0c0002000c18450003
00010f0000070066190900540079007000650066006100630065002000a9
00200054006800650020004d006f006e006f007400790070006500200043
006f00720070006f0072006100740069006f006e00200070006c0063002e
00200044006100740061002000a900200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e00200070006c0063002f005400790070006500200053006f006c
007500740069006f006e007300200049006e0063002e0020003100390039
0030002d0031003900390032002e00200041006c006c0020005200690067
00680074007300200052006500730065007200760065006400540069006d
006500730020004e0065007700200052006f006d0061006e00ae00200054
0072006100640065006d00610072006b0020006f00660020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e00200070006c006300200072006500670069
00730074006500720065006400200069006e002000740068006500200055
005300200050006100740020002600200054004d0020004f00660066002e
00200061006e006400200065006c0073006500770068006500720065002e
004d006f006e006f0074007900700065003a00540069006d006500730020
004e0065007700200052006f006d0061006e00200052006500670075006c
00610072003a00560065007200730069006f006e00200033002e00300030
00200028004d006900630072006f0073006f00660074002900540069006d
00650073004e006500770052006f006d0061006e00500053004d0054004e
004f00540049004600490043004100540049004f004e0020004f00460020
004c004900430045004e00530045002000410047005200450045004d0045
004e0054000d000a000d000a005400680069007300200074007900700065
00660061006300650020006900730020007400680065002000700072006f
007000650072007400790020006f00660020004d006f006e006f00740079
007000650020005400790070006f00670072006100700068007900200061
006e00640020006900740073002000750073006500200062007900200079
006f007500200069007300200063006f0076006500720065006400200075
006e00640065007200200074006800650020007400650072006d00730020
006f0066002000610020006c006900630065006e00730065002000610067
007200650065006d0065006e0074002e00200059006f0075002000680061
007600650020006f0062007400610069006e006500640020007400680069
007300200074007900700065006600610063006500200073006f00660074
007700610072006500200065006900740068006500720020006400690072
006500630074006c0079002000660072006f006d0020004d006f006e006f
00740079007000650020006f007200200074006f00670065007400680065
00720020007700690074006800200073006f006600740077006100720065
002000640069007300740072006900620075007400650064002000620079
0020006f006e00650020006f00660020004d006f006e006f007400790070
0065002700730020006c006900630065006e0073006500650073002e000d
000a000d000a005400680069007300200073006f00660074007700610072
006500200069007300200061002000760061006c007500610062006c0065
0020006100730073006500740020006f00660020004d006f006e006f0074
007900700065002e00200055006e006c00650073007300200079006f0075
0020006800610076006500200065006e0074006500720065006400200069
006e0074006f002000610020007300700065006300690066006900630020
006c006900630065006e00730065002000610067007200650065006d0065
006e00740020006700720061006e00740069006e006700200079006f0075
0020006100640064006900740069006f006e0061006c0020007200690067
006800740073002c00200079006f0075007200200075007300650020006f
00660020007400680069007300200073006f006600740077006100720065
0020006900730020006c0069006d006900740065006400200074006f0020
0079006f0075007200200077006f0072006b00730074006100740069006f
006e00200066006f007200200079006f007500720020006f0077006e0020
007000750062006c0069007300680069006e00670020007500730065002e
00200059006f00750020006d006100790020006e006f007400200063006f
007000790020006f00720020006400690073007400720069006200750074
00650020007400680069007300200073006f006600740077006100720065
002e000d000a000d000a0049006600200079006f00750020006800610076
006500200061006e00790020007100750065007300740069006f006e0020
0063006f006e006300650072006e0069006e006700200079006f00750072
002000720069006700680074007300200079006f0075002000730068006f
0075006c0064002000720065007600690065007700200074006800650020
006c006900630065006e00730065002000610067007200650065006d0065
006e007400200079006f0075002000720065006300650069007600650064
00200077006900740068002000740068006500200073006f006600740077
0061007200650020006f007200200063006f006e00740061006300740020
004d006f006e006f007400790070006500200066006f0072002000610020
0063006f007000790020006f006600200074006800650020006c00690063
0065006e00730065002000610067007200650065006d0065006e0074002e
000d000a000d000a004d006f006e006f0074007900700065002000630061
006e00200062006500200063006f006e0074006100630074006500640020
00610074003a000d000a000d000a0055005300410020002d002000280038
0034003700290020003700310038002d0030003400300030000900090055
004b0020002d002000300031003100340034002000300031003700330037
0020003700360035003900350039000d000a0068007400740070003a002f
002f007700770077002e006d006f006e006f0074007900700065002e0063
006f006d004d006f006e006f007400790070006500200054007900700065
002000440072006100770069006e00670020004f00660066006900630065
0020002d0020005300740061006e006c006500790020004d006f00720069
0073006f006e002c00200056006900630074006f00720020004c00610072
00640065006e007400200031003900330032005400680069007300200072
0065006d00610072006b00610062006c0065002000740079007000650066
006100630065002000660069007200730074002000610070007000650061
00720065006400200069006e0020003100390033003200200069006e0020
005400680065002000540069006d006500730020006f00660020004c006f
006e0064006f006e0020006e00650077007300700061007000650072002c
00200066006f007200200077006800690063006800200069007400200077
00610073002000640065007300690067006e00650064002e002000200049
00740020006800610073002000730075006200730065007100750065006e
0074006c00790020006200650063006f006d00650020006f006e00650020
006f0066002000740068006500200077006f0072006c006400730020006d
006f007300740020007300750063006300650073007300660075006c0020
00740079007000650020006300720065006100740069006f006e0073002e
002000200054006800650020006f0072006900670069006e0061006c0020
00640072006100770069006e00670073002000770065007200650020006d
00610064006500200075006e0064006500720020005300740061006e006c
006500790020004d006f007200690073006f006e00270073002000640069
00720065006300740069006f006e00200062007900200056006900630074
006f00720020004c0061007200640065006e007400200061007400200054
00680065002000540069006d00650073002e002000200049007400200074
00680065006e002000770065006e00740020007400680072006f00750067
006800200061006e00200065007800740065006e00730069007600650020
006900740065007200610074006900760065002000700072006f00630065
0073007300200069006e0076006f006c00760069006e0067002000660075
0072007400680065007200200077006f0072006b00200069006e0020004d
006f006e006f007400790070006500270073002000540079007000650020
00440072006100770069006e00670020004f00660066006900630065002e
00200020004200610073006500640020006f006e00200065007800700065
00720069006d0065006e007400730020004d006f007200690073006f006e
002000680061006400200063006f006e0064007500630074006500640020
007500730069006e00670020005000650072007000650074007500610020
0061006e006400200050006c0061006e00740069006e002c002000690074
00200068006100730020006d0061006e00790020006f006c006400200073
00740079006c006500200063006800610072006100630074006500720069
007300740069006300730020006200750074002000770061007300200061
00640061007000740065006400200074006f002000670069007600650020
0065007800630065006c006c0065006e00740020006c0065006700690062
0069006c00690074007900200063006f00750070006c0065006400200077
00690074006800200067006f006f0064002000650063006f006e006f006d
0079002e002000200057006900640065006c007900200075007300650064
00200069006e00200062006f006f006b007300200061006e00640020006d
006100670061007a0069006e00650073002c00200066006f007200200072
00650070006f007200740073002c0020006f006600660069006300650020
0064006f00630075006d0065006e0074007300200061006e006400200061
006c0073006f00200066006f007200200064006900730070006c00610079
00200061006e00640020006100640076006500720074006900730069006e
0067002e0068007400740070003a002f002f007700770077002e006d006f
006e006f0074007900700065002e0063006f006d002f00680074006d006c
002f006d0074006e0061006d0065002f006d0073005f00740069006d0065
0073006e006500770072006f006d0061006e002e00680074006d006c0068
007400740070003a002f002f007700770077002e006d006f006e006f0074
007900700065002e0063006f006d002f00680074006d006c002f006d0074
006e0061006d0065002f006d0073005f00770065006c0063006f006d0065
002e00680074006d006c0068007400740070003a002f002f007700770077
002e006d006f006e006f0074007900700065002e0063006f006d002f0068
0074006d006c002f0074007900700065002f006c006900630065006e0073
0065002e00680074006d006c547970656661636520a920546865204d6f6e
6f7479706520436f72706f726174696f6e20706c632e204461746120a920
546865204d6f6e6f7479706520436f72706f726174696f6e20706c632f54
79706520536f6c7574696f6e7320496e632e20313939302d313939322e20
416c6c2052696768747320526573657276656454696d6573204e65772052
6f6d616ea82054726164656d61726b206f6620546865204d6f6e6f747970
6520436f72706f726174696f6e20706c6320726567697374657265642069
6e2074686520555320506174202620544d204f66662e20616e6420656c73
6577686572652e4d6f6e6f747970653a54696d6573204e657720526f6d61
6e20526567756c61723a56657273696f6e20332e303020284d6963726f73
6f66742954696d65734e6577526f6d616e50534d544e4f54494649434154
494f4e204f46204c4943454e53452041475245454d454e540d0a0d0a5468
6973207479706566616365206973207468652070726f7065727479206f66
204d6f6e6f74797065205479706f67726170687920616e64206974732075
736520627920796f7520697320636f766572656420756e64657220746865
207465726d73206f662061206c6963656e73652061677265656d656e742e
20596f752068617665206f627461696e6564207468697320747970656661
636520736f66747761726520656974686572206469726563746c79206672
6f6d204d6f6e6f74797065206f7220746f67657468657220776974682073
6f667477617265206469737472696275746564206279206f6e65206f6620
4d6f6e6f747970652773206c6963656e736565732e0d0a0d0a5468697320
736f66747761726520697320612076616c7561626c65206173736574206f
66204d6f6e6f747970652e20556e6c65737320796f75206861766520656e
746572656420696e746f2061207370656369666963206c6963656e736520
61677265656d656e74206772616e74696e6720796f75206164646974696f
6e616c207269676874732c20796f757220757365206f6620746869732073
6f667477617265206973206c696d6974656420746f20796f757220776f72
6b73746174696f6e20666f7220796f7572206f776e207075626c69736869
6e67207573652e20596f75206d6179206e6f7420636f7079206f72206469
7374726962757465207468697320736f6674776172652e0d0a0d0a496620
796f75206861766520616e79207175657374696f6e20636f6e6365726e69
6e6720796f75722072696768747320796f752073686f756c642072657669
657720746865206c6963656e73652061677265656d656e7420796f752072
6563656976656420776974682074686520736f667477617265206f722063
6f6e74616374204d6f6e6f7479706520666f72206120636f7079206f6620
746865206c6963656e73652061677265656d656e742e0d0a0d0a4d6f6e6f
747970652063616e20626520636f6e7461637465642061743a0d0a0d0a55
5341202d202838343729203731382d303430300909554b202d2030313134
34203031373337203736353935390d0a687474703a2f2f7777772e6d6f6e
6f747970652e636f6d4d6f6e6f7479706520547970652044726177696e67
204f6666696365202d205374616e6c6579204d6f7269736f6e2c20566963
746f72204c617264656e742031393332546869732072656d61726b61626c
6520747970656661636520666972737420617070656172656420696e2031
39333220696e205468652054696d6573206f66204c6f6e646f6e206e6577
7370617065722c20666f7220776869636820697420776173206465736967
6e65642e20204974206861732073756273657175656e746c79206265636f
6d65206f6e65206f662074686520776f726c6473206d6f73742073756363
65737366756c2074797065206372656174696f6e732e2020546865206f72
6967696e616c2064726177696e67732077657265206d61646520756e6465
72205374616e6c6579204d6f7269736f6e277320646972656374696f6e20
627920566963746f72204c617264656e74206174205468652054696d6573
2e20204974207468656e2077656e74207468726f75676820616e20657874
656e73697665206974657261746976652070726f6365737320696e766f6c
76696e67206675727468657220776f726b20696e204d6f6e6f7479706527
7320547970652044726177696e67204f66666963652e2020426173656420
6f6e206578706572696d656e7473204d6f7269736f6e2068616420636f6e
647563746564207573696e6720506572706574756120616e6420506c616e
74696e2c20697420686173206d616e79206f6c64207374796c6520636861
726163746572697374696373206275742077617320616461707465642074
6f206769766520657863656c6c656e74206c65676962696c69747920636f
75706c6564207769746820676f6f642065636f6e6f6d792e202057696465
6c79207573656420696e20626f6f6b7320616e64206d6167617a696e6573
2c20666f72207265706f7274732c206f666669636520646f63756d656e74
7320616e6420616c736f20666f7220646973706c617920616e6420616476
6572746973696e672e687474703a2f2f7777772e6d6f6e6f747970652e63
6f6d2f68746d6c2f6d746e616d652f6d735f74696d65736e6577726f6d61
6e2e68746d6c687474703a2f2f7777772e6d6f6e6f747970652e636f6d2f
68746d6c2f6d746e616d652f6d735f77656c636f6d652e68746d6c687474
703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f74797065
2f6c6963656e73652e68746d6c004e006f0072006d0061006c006e007900
6f00620079010d0065006a006e00e9006e006f0072006d0061006c005300
740061006e0064006100720064039a03b103bd03bf03bd03b903ba03ac00
4e006f0072006d00610061006c0069004e006f0072006d00e1006c006e00
65004e006f0072006d0061006c0065005300740061006e00640061006100
720064041e0431044b0447043d044b0439004e0061007600610064006e00
6f0074006801b001a10300006e00670041007200720075006e0074006100
490061006e005000200053007500730061006e004c002000470057006100
6400650020004d0069006b00650044007500200047007200650067004800
200045006c0069004b002000500050006100740068006500200026002000
52006f0062004e006f002e000000ba0054ffc003e1b345453240b803e1b3
2b2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001fff
c003dfb2161b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003de
b32a2d32df410a03de00ef03de000203de03df0028001fffc003dfb3282e
32f0410d03df0001037e000f0101001f00a003dd00b003dd0002004003da
b32426329fbf03cc000103ca03c90064001fffc003c9b20d1132410a03c7
03b70012001f03b603b50064001fffc003b5b30e1132004173038d000100
c0038d00d0038d00e0038d00f0038d0004006f03a7007f03a7008f03a700
af03a70004000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef03
a50001000f03a5002f03a5006f03a5008f03a50004005403aa0001006b03
aa000103a8036a0022001f038c03940015001f038b03930015001f03a403
93001a001f03a20394001e001f03a10393001e001f039f0394001e001f03
9b0394001a001f039a0393001e001f039903940016001f03980394001600
1f03970393001b001f03960394001b001f03950393001b001f0376037500
1a001f03740375001a001f03a00373b21e1f10411e039300200393003003
93000300200394003003940040039400030000039400010383036c001e00
1f03b1036c0032001f036d036c0032001fffc0037db2212332b9ffc0037d
b3171932a0410a037d00b0037d00c0037d00d0037d0004ffc0037cb22123
32b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0037c000400
300373004003730002000003730010037300200373000300e0037300f003
73000200b0037300c0037300d003730003008403730090037300a0037300
030377036a0029001f0389036ab2281f40b80367b33940323fbb03660001
00400366b3191d328fbb0366000100400366b3090a3240b80366b3090e32
40b80366b3090f323fbb0365000100400365b3090c3240b80365b31a1d32
40b80365b3090e326b410e0363007b036300020014036300240363003403
630044036300040363b2242f1fba034e006d0800400e1f7f027f037f047f
050430440112bf033200500800001f0012032d003c080040291f5f3c0137
6009700980090310092009300940095009056f037f038f03031f032f033f
034f035f0305b8ffc0b2073a33b8ffc04047063a33900ba00bb00bc00bd0
0b05b006c006d006e006f0060520063006400650066006700680069006a0
06099006900702600b700b800b03100b200b300b400b500b051f0701a041
850362000100000362001003620070036200900362000400f0035f000100
20035e0020035f0030035f0040035e00040000035e0000035f0010035f00
d0035e00e0035f00050010030f0020030f0030030f00d0030f00e0030f00
050000030f0010030f0050030f0060030f0070030f00d0030f0006000003
0f0010030f0020030f0030030f00e0030f00f0030f0006030f0027000003
0e0030030e000200e0030e00f0030e0002030e004a00e0030d00f0030d00
02030d002700d002fc0001001002fc002002fc005002fc000300d002fc00
e002fc0002000002fc001002fc002002fc003002fc005002fc006002fc00
0600e002fc00f002fc0002002002fc003002fc004002fc000302fc406127
c02901b02901a02901902901403c3f413240223f41321212125f235f255f
285fa5046f236f256f286fa5044f234f254f284fa5043f233f253f283fa5
042f232f252f282fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f4c
6f4c7f4c0337b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a32
370f413b02af0001005f02af009f02af00df02af0003001f02af002f02af
003f02af006f02af000402af02af001f02ad002f02ad003f02ad004f02ad
005f02ad000500df02ad0001000f02ad001f02ad003f02ad005f02ad009f
02ad0005005f02ad00df02ad0002000f02ad001f02ad003f02ad00030040
02acb23a334f414a02ac005f02ac009f02ac0003002f02ac003f02ac0002
000f02ac003f02ac00af02ac000300b002ac00e002ac0002004f02ac005f
02ac00a002ac0003001f02ac002f02ac003f02ac0003000f035a0001000f
035a001f035a003f035a005f035a0070035a000500cf035700df03570002
000f0357001f03570070035700af03570004035a035a0357035702ad02ad
02ac02ac032c400d31151f001616000000121108104110020c004a000d01
a8004a000d0198004a000d0189004a000d013f004a000d0124400e4a0df6
4a0dbe4a0d864a0d274a0dbe02280041000d01940041000d0121400b410d
b4410d4f410d29410d411002170021000d02150021000d02060021000d01
eb0021000d014e0021000d012c4014210df9210df3210df1210d9d210d71
210d3d210d4110021c001f000d0214001f000d020b001f000d0196001f00
0d014a001f000d0126400b1f0dc61f0d571f0d371f0d410d019e0141000d
00420141000d001e0141000d001b0141000d01f2b40f440f0009bb01f200
44000d0201b23c291fb80200b23c291fb801ffb23c411fb801feb23c471f
b801fdb23c9e1fb801fab23c931fbc01f9010f0101001f01f6b224e41f41
1501f401490401001f01f301490401001f01f1014900ab001f01f0014900
67001f01a6003c0125001f01a4b23c811f411501a3010f019a001f01a200
220801001f01a100500401001f019f0149019a001f019d01490067001f01
9cb22c621fb8019bb22c791fbc019a002c0101001f0197b22ce41fb80193
b22c891fb80192b22c6c1fb8018fb2259e1fb8016ab23c2a1f4111016700
240201001f0163002502ab001f014c010f019a001f01480149006c001f01
47b22c891fb80145b22c9e1fb80144b22c791fb80143b223311fb80127b2
3c811fbc012300500101001f011fb223e41f4115011d0023019a001f011c
00230801001f011b00250801001f010e010f0401001f010d00220401001f
0108b223811fb80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc01
490156001f00e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb
1fc524b80156b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b90149
0201b61faf2c671fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a
1f9925b80201b21f812cbc0401001f006d010f0156400b1f592c3e1f4c3c
ab1f4625b80101b21f403cb80125400a1f3a23721f393cab1f38b80149b3
ab1f3124b80401b21f3025b802abb61f2a24e41f2623b80156b21f5537ba
023500070175402c0774076207560751073b0733072d0720071d071c0714
08120810080e080c080a080808060804080208000814b8ffe0402b000001
001406100000010006040000010004100000010010020000010002000000
01000002010802004a00b013034b024b534201b0124b004b5442b0372b4b
b807ff52b0382b4bb008505b58b101018e59b0382bb00288b801005458b8
01ffb101018e851bb0124358b90001012f858d1bb90001017c858d595901
4bb0c063004b6220b0f65323b8010a515ab0052342180016763f183f123e
113946443e113946443e113946443e113946443e11394660443e11394660
442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db096
4b5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b90271026f4544
b90270026f45445958b9017a0271455258b90271017a4459594bb0475320
5c58b9002202704544b9003c027045445958b901b30022455258b9002201
b34459594bb04c53205c58b9014900224544b1222245445958b901c20149
455258b9014901c24459594bb06753205c58b9002402714544b900500271
45445958b9021e0024455258b90024021e4459594bb8020153205c58b901
0f00224544b1222245445958b90c00010f455258b9010f0c004459594bb0
1c53205c58b125254544b12c2545445958b13725455258b125374459594b
b0ab53205c58b125254544b1232545445958b901590025455258b9002501
594459594bb8010153205c58b125254544b1282545445958b90208002545
5258b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560234560
b08b766818b080622020b164dc4565234520b003266062636820b0032661
65b0dc236544b064234420b161634565234520b003266062636820b00326
6165b063236544b0612344b10063455458b163406544b261406145236144
59b3a67f434b456523456023456560234560b089766818b080622020b143
7f4565234520b003266062636820b003266165b07f236544b043234420b1
a64b4565234520b003266062636820b003266165b04b236544b0a62344b1
004b455458b14b406544b2a640a645236144594b5242014b5058b1080042
59435c58b108004259b3020b0a124358601b2159421610703eb0124358b9
3b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d
411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba
01a80400000b2b59b0102342b0112342002b001845694445694445694445
6944737373747373737475752b7373747475184569447373742b4bb02153
4bb046515a58b03cb03c45b040604459012b2b2b2b757575757575757543
584010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf22
025f226f227f228f229f22af2206757559435c58b6403c9f22ef22037559
2b2b01747474744544737374747575454473454473744544737475737373
737300757575737575752b2b757575752b752b435841220063032d000100
03032d0013032d0023032d0033032d0053032d000500c3032d00d3032d00
e3032d00f3032d00040083032d0093032d00a3032d00b3032d0004032d03
2d4518694474747575592b4358b900180332b330353238b80332b3616632
38b80332b3535a3238b80332b3454e3238b80332b33c413218b80332b23f
330a410f0332000100ba033200ca033200da033200ea033200fa03320005
033203324518694474752b2b2b2b2b2b597300732b012b7575002b2b2b74
002b2b2b732b74012b002b2b017373737474732b2b00732b2b002b2b2b01
7374732b012b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b0001737500737300
4569440073730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b
2b2b2b0000>
[15785 11565 15133 15893 15661 16181 16337 16077 15205 16177 15877 16065 15621
15813 16129 13457 16337 16293 16819 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 13698 43 <000100230000059d054c00450177b10202435458b747400d0d02550025b8
fff6b5131302552534b8fffc401213130255341a0d0d0255340c0f0f0255
3413b8fff64013131302551301220c13130255220c0d0d025522b8ffe840
0c10100255220c0f0f0255221a411003e2001d03e2002c03e2002f03e200
2e000c03e2000903e2003f03e2003c03e2400b3d0024242e3d022e1c0a02
003f2f2f3f12392fcd10ededecec10ededecec012f2b2b2b2bc0cd2b2f2b
2b2bdd2bc031302b1b40717047a047d047e0470413479e1c40365047e047
02121f1b0b2122221f1b1c2122341f1b2e2122451f1b3e2122021f1b0a21
23131f1b1b2123251f1b2d2123351f1b3d21230100232324241b3e3d3d0b
0b0a022e2d2d1c1c1b0812132202402201df2201202230227022a022d022
e0220622b80220401a10476047c047032047014745252235503460340234
9e4661dc182b4d10f4723c4dfd3c107172f45d71723cfd3c003f3c103c10
3c3f3c103c103c12392f3cfd3c2b2b2b2b2b2b2b2b3130015d2b015d5901
211134272627262323352115232207060615111417161716333315213533
323736351121111417161716333315213533323736351134272627262323
35211523220706061501a502760d0a202b3030024430302b20170d0a1f2c
3030fdbc30532619fd8a0d0a202b3031fdbb305426180d0a1f2c30300245
31302b1f1802d701846821191218252517104164fc956721191218252531
207a019dfe636721191218252531207a036b682119121825251710416400
>TimesNewRomanPSMT AddT42Char 
2 9360 68 <00020049ffed038903af0032003d0349b1020243545840203f400d0d0255
3f4013130255151b072e25080b0b0255250c0d0d025525000c33b8fff040
0b1212025533161313025533b8ffdeb41010025533b8fff440150f0f0255
330c0d0d02553339070c0d0d0255072d2eb8ffc04020091202552e33001e
04292c30340c40090b02550c401d1d02550c40111202550cb8ffd4401e09
1202550c0c047f180118401112025518401d1d02551810251e073c2c0400
2fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd012f2bcd2f
2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a330212533601
12201f39803fa809b60a03122b127d007d3386008b0b8b35061d12163a10
3f803f04091c4c054c06452045224c3a403f891d080a0e0720002249014b
0a490b49354b37433a493d570b670b8509840a840b0f54168316021f3f5f
3f0260083300343c2e292d34bb011b000c000cffc0b609390c280b390cb8
ffc0401a3a35100c500c02400c500c600c03200c500c600c760c040c3c18
b8ffd840290b394f185f186f18032f187f1802187e1f100110251e07303c
403c023c2c04702d802d022d35292c30b803464011040b2ec02d012d6025
00330d0c0c343433b8fffcb41010065533bb016700240025ffc0401a0e39
00251f2580259025044025f0250280250125101010065525bb0243000700
15ffc0b21f3915b80167401e1b2f393107400e3920075007800703100701
f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b10fd2b5d
71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed713fed72fd
5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed11123911
123939313043794047353b1c23051337383638020609080a080206212220
220206350b392000111d131c0012130f1f0d1c0122233b05391c00380834
200135340b121c101c010e22101c013a063c1c002b2b2b3c103c2b012b10
3c2b103c2b2b2a2a2a818181017201710071017172005d4358b23f12015d
59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b60e393720
0e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391cb8fff040
1a0b390a280b3937280b390a280a3937280a390a28093937280939002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59005d5925060706232226353437363637
353426232207061517140623222635343633321716171615111416163332
3736371506232226271106070606151416333202478d24363d5f7b1e29cb
ec57533f2526022f26252fb09f7a4e3b1c120a170f100c153c7066313a01
972c4f4456384c846d1119826a433144785624896622222c3a2e32342d56
90291f422b85fec9833b14070d3c38964493015d3c192c6039485f00>TimesNewRomanPSMT AddT42Char 
3 3534 75 <0001000d000003f3058e0036028fb10202435458401d384012120255100a
110a080d0d02550a182412120255181a0d0d025518b8fff8b40f0f025518
b8ffe0400c10100255180e131302551826b8ffea401f1010025526213435
272d0121040c0c025521080d0d0255212d18121202552db8fffab40c0c02
552db8fff6b40d0d02552db8fff4b40f0f02552db8ffec400f101002552d
0e131302552d0120040f410a03e2001203e2002503e2002803e200270034
03e2400f3540090d025535360027111d2c0407003fed2f2f3fdd2bed10ed
edecec123939012f2b2b2b2b2b2bdd2b2bc010c4c63210c42b2f2b2b2b2b
2bcd2bc410c431302b1bb106024354584058341210100655351210100655
01200427343536001d2c040711270a02101006550a060f0f06550a0c0d0d
06550a18021010065518060f0f0655180c0d0d0655181838370121021010
065521060f0f0655210c0d0d0655212db8fff0b4101006552db8fff2b40f
0f06552db8fffcb70d0d06552d2d38371112392f2b2b2bdd2b2b2bc01112
392f2b2b2bcd2b2b2b002f2f3fed3fddcd111239393130012b2b1b402f38
402a350a38600d5d360f250f268038903804b038c038d038032b06015038
60387038903804403801200818291e11b8030f4011222d291e274a220a29
1e104a2321291e26b8030e402e2335272e41341e35440120273600001d2c
04072726261111100a19182409900a01b00a010f0a700a9f0acf0a040ab8
02bd40252d0021242e1f2d502d602d702d04802d902d02b02d01002d102d
c02dd02d042d6037a67f182b10f65d5d71723cfd3c10fd5d71723cfd3c00
3f3c103c103c3fed3f3c113939f5edfc01f52b2b2b2b3130437940141a1c
050806251b261c05191c0107081a071d1c012b01103c2b2b2b8181017172
005d015d712b2b5959011136363332161716151114171616331521353332
363736351134262623220607111416163315213532373636351134262623
22072725014d6f82414e701b130e0a3040fe3e1540320a031f4430316a4a
153946fe3a3d2314180f1f1a152f0e0112058efd627a45565c40aafebc57
20181c24242726104e0144965e2f344ffe1c5e2e1f2424130a3856033d9d
481a10237000>TimesNewRomanPSMT AddT42Char 
3 11824 86 <00010064ffe402d503af00310434b1020243545840273340131302553340
0b0b02550201181010025501180f0f0255010f1b1a08270c0b0b02552721
0fb8ffe0b4101002550fb8fff440320f0f02550f310708270f2104122b05
017905016c050105252f0101012a0719771e01631e011e25201a01601a70
1a021a120b003fc45d5ded5d5d2f3fc45ded5d5d5d1217393f012f2b2bcd
2f2bcdd4cd10d42b2bcd31302b2b1bb106024354584032210f2708042a16
1e122e05022a3107601a701a021a19124b05016b057b050205252a07441e
01641e741e021e25120b01210fb8fff2401a0d0d06550f0f33321a080e0d
0d06550827120d0d0655272733321112392f2bcd2bc41112392f2bcdc400
3fed5d5d3fed5d5d10c4c45d3f10c4123911123912173931301b4029092c
192c0212122e400b392c280b391814590c5a269b109424050a070a280a29
603370338033060f33b8012040870d5d36cb0dcb0ec424c425d723d624d9
2ce604e623e624e92c0b123f2c5d2c6e2d7d2c8f018f028f038015801a80
1b801c892d8f2e0d0f010f020a03090c061c0a2cc822c923081c03161412
1c161d19291b2c9909990a9b20932393240b122b0d282c4a2c4f335f3378
29782c860ea823af33e803e61c0c2908311e00bd021e011f012f010201b8
012bb200bd2eb8011a40112a181e19bd1b1e1a1f1a01101a201a021ab801
2bb219bd16b8011a4022121224230d0b040f2724230d0b04051e01c7002e
2f2a31000005252a071a7e191918b803464014162f1e25120b02cc120101
12cf21df21ef210321b80314400b700f01600f700f900f030fb801364019
271a192e1f0801082c9f270160277027802703202730270227ba01200032
0120b14b182b4e10f45d71724ded72f43c10fd5d71fd5d4358b2ff21015d
59392f435c58b2ff01015d59ed003fede4f43c10ed3fed3c103c10e410ed
1112173901111217394358400a242323240d0b140d0d0b870e2e2b0e7d10
c459180010ecf4ed5d720110edf4ed0010ecf4ed5d0110edf4edb1060243
5458b42e20090d34002b5931304379401c28291f20101106071f11211c01
0629081c0020101e1c000728051c01002b2b012b2b81818181015d435840
09fb07f610f611fb28045d5901720071005d435840199f019f029f039f0b
9a0d9015901a901b901c992297239f2d0c5d595d2b017100722b2b435840
0b2f232f248b2c9b249b2c055d59435c584011282019390928193901400a
3902400a391bb8ffc0b20a391ab8ffc040190a392e400a392c400a392c40
09390c101e123f0e201e123f0eb8fff0b21b390eb8fff0b2193924b8ffe8
b2133923b8ffe8b213390cb8ffe8b613392c1813391bb8ffc0b212391ab8
ffc0400f123901401239024012392c20123924b8fff0400f0f392c180f39
03100d392e400d3923b8fff040120d390c100d392c200d392c1811392c18
1139002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b59005d59590111232626232206151417161717161514062322
272623220723113316163332363534262427263534363332171633323637
02902126775c4656201f5f92cbbd75546c2115170d21211c9e62455761fe
de2d2d9b7b364d331110120c03affec8936a4a2d3828292e4763a27d991e
0a1a01478c8e5139455e903a39577198170f0e18>TimesNewRomanPSMT AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>TimesNewRomanPSMT AddT42Char 
TimesNewRomanPSMT /CharStrings get begin
/H 43 def
/a 68 def
/h 75 def
/s 86 def
end
TimesNewRomanPSMT /Encoding get
dup 72 /H put
dup 97 /a put
dup 104 /h put
dup 115 /s put
pop
end
%ADOEndSubsetFont
/ATSHSH+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/ATSHSH+TimesNewRomanPSMT*1 
[72{/.notdef}rp /H 24{/.notdef}rp /a 6{/.notdef}rp /h 10{/.notdef}rp /s 
140{/.notdef}rp]
ATSHSH+TimesNewRomanPSMT nf
ATSHSH+TimesNewRomanPSMT*1 [7.99992 0 0 -7.99992 0 0 ]msf
7.62885 9.63076 mo
(H)sh
13.4063 9.63076 mo
(a)sh
16.957 9.63076 mo
(s)sh
20.0703 9.63076 mo
(h)sh
/ATSHSH+TimesNewRomanPSMT*1 uf
/ATSHSH+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H-Identity-H uf
/ATSHSG+#cb#ce#cc#e5-GBK-EUC-H /CIDFont ur
/ATSHSF+CALIBRI*1 uf
/ATSHSF+CALIBRI uf
/PBAAAA+CALIBRI uf
%ADOBeginSubsetFont: ATSHSI+#cb#ce#cc#e5-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (ATSHSI+#cb#ce#cc#e5-GBK-EUC-H)
%%Title: (ATSHSI+#cb#ce#cc#e5-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /ATSHSI+#cb#ce#cc#e5-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -141 996 855} def
/FontInfo 4 dict dup begin
/FSType 0 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 22141 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
15932 <001C60D8A8C9B5EE3102F66068B411C074D2C5C0D5F026854B7ACBEE4
11C4D15F2DC25A905F8AB0CDEC7B965EBC67BBD27ACFC58F23648DB0B7A632C2
6EB7C187E6C28394B0BE28C16F6EB2EE01D201E1A3DD9D61B8FF0BB9A301014D
589B49FC6E334D2388827864A87F89E8D487A385F48B3FAE1073D58404CD68F1
035983F2B65952B8362AFA7BB43AA22FFA6D776849BB894301C5976E99808A7C
023AEF95BFC02B93354F5DD7D57AC686F1E3BE64142B676A21562E0A97DFB416
B897C1045E8B27CCEA0F93860468A8A15264CB98D7FE89F25CFE245A4FEA3C0E
2C8799C53D812DA660A46E5788B921A54164A4589B792E64DF7E2C974> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /ATSHSI+#cb#ce#cc#e5-GBK-EUC-H-Identity-H /Identity-H 0 [/ATSHSI+#cb#ce#cc#e5-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/ATSHSI+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
24.0688 9.63076 mo
(><)sh
/ATSHSI+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [7.99992 0 0 -7.99992 0 0 ]msf
24.0688 9.63076 mo
(><) false chp
.0031746 lw
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 ]]
] del_res
/ATSHSI+#cb#ce#cc#e5-GBK-EUC-H-Identity-H uf
/ATSHSI+#cb#ce#cc#e5-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
