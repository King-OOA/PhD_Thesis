%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AC.pdf
%%Creator: Adobe Acrobat 11.0.4
%%For: pz
%%CreationDate: 2017-7-8, 12:33:30
%%BoundingBox: -1 0 450 265
%%HiResBoundingBox: 0 0 449.2759 264.4495
%%CropBox: 0 0 449.2759 264.4495
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 949 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreateDate="2017-07-08T12:33:07+08:00"
   xmp:CreatorTool="Microsoft® Visio® 2010"
   xmp:ModifyDate="2017-07-08T12:33:07+08:00"
   pdf:Keywords=""
   pdf:Producer="Microsoft® Visio® 2010">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>peng zhan</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -264.449 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 264.449 li
449.276 264.449 li
449.276 0 li
cp
clp
gsave
-.64502 264.734 mo
449.355 264.734 li
449.355 -.265586 li
-.64502 -.265586 li
-.64502 264.734 li
clp
73.0949 95.5744 mo
72.3449 95.5744 li
72.3444 91.2571 70.535 87.3541 67.5944 84.5169 cv
64.6532 81.6814 60.5883 79.9247 56.085 79.9245 cv
51.5869 79.9247 47.5218 81.6814 44.5792 84.5169 cv
41.6373 87.3544 39.8255 91.2574 39.825 95.5744 cv
39.8255 99.8915 41.6373 103.795 44.5792 106.632 cv
47.5218 109.468 51.5869 111.224 56.085 111.224 cv
60.5883 111.224 64.6532 109.468 67.5944 106.632 cv
70.535 103.795 72.3444 99.8919 72.3449 95.5744 cv
73.0949 95.5744 li
73.845 95.5744 li
73.8456 100.317 71.85 104.614 68.6356 107.712 cv
65.4217 110.811 60.9818 112.725 56.085 112.724 cv
51.193 112.725 46.7533 110.811 43.5382 107.712 cv
40.3227 104.614 38.3244 100.317 38.3249 95.5744 cv
38.3244 90.8315 40.3227 86.5346 43.5382 83.437 cv
46.7533 80.3376 51.193 78.4244 56.085 78.4245 cv
60.9816 78.4244 65.4217 80.3376 68.6356 83.4371 cv
71.85 86.5349 73.8456 90.8318 73.845 95.5744 cv
73.0949 95.5744 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI Initial
ct_T42Dict begin
-0.5 -0.305 1.238 0.961
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+CALIBRI
Type42DictBegin
[<00010000000c000c000c000c4f532f32f9e4b978000000cc000000606376
7420b09bc4d20000012c0000051c6670676df6f64d0c000006480000091a
676c7966f1c4c2130000868400001c5068656164e625fe3d00000f640000
0036686865610dad073800000f9c00000024686d74785e570a8e00000fc0
000026326c6f6361beacb932000035f400001e466d617870213124e40000
543c000000206e616d65267651f40000545c00000e16707265706baf02fe
0000627400002410676469720000000000000000000000000003042b0190
00050008059905330000011e05990533000003d0008602000800020f0502
020204030204e10002ff4000acff00000009000000004d53202000400000
00a00600fe0001c4079e02262000019f0000000003b7050e000000200003
0000079e0000fe930000000000000000000000000050006a007300800080
0086008d009300bf00db006200830093009900a000a600a900b000c100c9
00d700000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000fe79056d000c03b700060013
0000fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e0013
0420000600130000fffaffedff10ffee050e00130420000600130000fffa
ffeefe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f
0006000dff36fffafff302870006000f0000fffafff1079efeaffea70000
0000000000000000000000500051005a005b005c005d0060006100620064
00680069006a006b006c006d006e00680069006e00600067006e00660068
005f00610063006400660068006a006b006c006d006e006f0070006f0072
0074007500760076007000720073007400750076006f0070007100720073
00750077007700780079007a007b007c007d007b007c007d00770079007a
007c0078007a007c007d0078007d007e007f008000810082007e007f0081
0082007e007f008000810082008300840085008600870088008900830084
008500860087008800890083008400850086008700880089008900860087
00880089008a008b008c008d008e008f008a008b008c008d008e008f008a
008b008c008d008e008f008d008a008b008c008d008e008f009000900091
0092009300940095009600980099009b009c009000910092009300940095
0096009700980099009a009e009f00a60090009100950098009f00900091
0096009700bc00c600b500ae00af00b6006800690063006a006f00700071
006f0070007100720066006c006d00700079007c007f0083008600870088
0089008a0074007500760077007a007b007c007d007e008200850086008a
0088008900830078007b00820083008600870088008900760079007a007c
007d007e0083008500880089008a0073007400750077007a007d00880089
008a008b008c008d008e00900094008b008c008d00910092009300940095
008c008d00910095008f009000910092009300940095008b008c008d008e
008f009000910092009300940095008b008c008d008e008f009000910092
00930096009700980099009c0096009700980099009a009b009c00960099
009a009c0096009700980099009a009b009c009700980099009a009b009c
009700980099009a009b009c0096009d00a000a1009d009e009f00a000a1
00a2009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e
00a000a1009d009e00a000a2009d00a300a400a500a600a700a300a400a6
00a700a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac
00a800a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae
00ad00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b0
00b100b200b300b400b500b600b700b800b300ae00af00b000b200b500b6
00b700b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc
00bd00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c4
00b900ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce
00c500c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d0
05e4000e0041000005ba009c009c005e005e4047645f5e5d5c5b5a595855
54535251504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a393837
36352f2e2d2c2826252423221f181411100f0d0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b0042651582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1
0200080d2d2c2045b00325456164b050515845441b2121592d2c2045b000
4360442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8c
b8100062602b0c642364615c58b00361592d2c8a03458a8a87b0112bb029
2344b0297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121
592d2c01b005251023208af500b0016023edec2d2c01b005251023208af5
00b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c003c
2d2c20b001610110203c003c2d2c00b00743b006430b2d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2c4523456023456023456023766818b08062
202d2cb00426b00426b00425b0042545234520b003266062636820b00326
61658a2344442d2c2045b0005458b040442045b04061441b2121592d2c45
b1302f4523456160b0016069442d2c4b5158b02f2370b01423421b212159
2d2c4b515820b0032545695358441b2121591b2121592d2c45b01443b000
6063b0016069442d2cb02f45442d2c452320458a60442d2c45234560442d
2c4b235158b90033ffe0b134201bb3330034005944442d2cb0164358b003
26458a586466b01f601b64b020606620581b21b04059b001615923586559
b02923442310b029e01b2121212121592d2cb0164358b004254564b02060
6620581b21b04059b0016123586559b0292344b00425b00725082058021b
0359b0052510b004252046b0042523423cb0072510b006252046b00425b0
016023423c2058011b0059b0052510b00425b029e0b0072510b00625b029
e0b00425b00725082058021b0359b00425b003254348b00625b00325b001
6043481b2159212121212121212d2cb0164358b004254564b02060662058
1b21b04059b0016123581b6559b0292344b00525b00825082058021b0359
b0042510b005252046b0042523423cb00425b0072508b0072510b0062520
46b00425b0016023423c2058011b0059b0042510b00525b029e0b0292045
6544b0072510b00625b029e0b00525b00825082058021b0359b00525b003
254348b00425b0072508b00625b00325b0016043481b2159212121212121
212d2c02b00425202046b004252342b0052508b003254548212121212d2c
02b0032520b0042508b0022543482121212d2c452320451820b000502058
23652359236820b040505821b04059235865598a60442d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2cb000214b5458381b2121592d2cb002435458b046
2b1b21212121592d2cb002435458b0472b1b212121592d2cb002435458b0
482b1b21212121592d2cb002435458b0492b1b212121592d2c208a08234b
538a4b515a5823381b2121592d2c0020b200400325b0062649618b381234
2d2c014623466023466123201020468a61b8ff80628ab140408a70456068
3a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d2cb01200
4b014b54422d2cb1020042b123018851b1400188535a58b9100000208854
58b202010243604259b12401885158b920000040885458b2020202436042
b12401885458b2022002436042004b014b5258b2020802436042591bb940
000080885458b202040243604259b94000008063b80100885458b2020802
43604259b94000010063b80200885458b202100243604259b94000020063
b80400885458b202400243604259595959592d2c451868234b5158232045
2064b04050587c59688a6059442d2cb00016b00225b0022501b001233e00
b002233eb10102060cb00a236542b00b234201b001233f00b002233fb101
02060cb006236542b0072342b00116012d2c20b82000628a6023622d2cb0
072558001b0159b0042510b00325b0022520b8ffff545821cd1bed5921b0
06255cb006255a58b0092b5920b005254ab0042547b004254760b0062547
b0806361b00225b0005558b00325b00725496359b0082558001b0159b004
25b0062549b009255cb009255a58b0092b59b0072546b0806361b0032520
b0005558631b2159612320b0005558b080631b21b08059b0592bb006255c
586959b00425202010b00048233ab0062658001b0159b0052658b003252f
598a12233221212d2cb00625b00a2587b00625b009254ab0005358b00625
b00a251bb00925b0072559b00225b00225070cb005256323b00625636020
b94000040063535821b00426b00426b00a1bb94000040063655158b00426
65b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092eb007
25b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b00525
87b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed59b0
0525b0052507b00825b00b254923b00625b0062587b00a2510b00b25c159
20b00051b800522378b00161b00225b00725b0072507b00a25b00d254961
b08062b00525b005250bb00a252338b00625b0062587b00825b008250bb0
0a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa72379
2121212121212121212121212d2c23b0005458b9400000001bb900004000
598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458b940
0000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b940000000
1bb90000400059b05b2b2d2cb00426b00426080db00426b00426080db05b
2b2d2c204569442d00000001000000059eb8cda5f1745f0f3cf500190800
00000000bbeb7ccc00000000c522987afbfafd8b09ec07b6000000090002
000000000000000100000600fe0001c40aa0fbfafaa009ec000100000000
0000000000000000000003f7040e0000000000000000000001cf00000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000006d700ac000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0434006000000000000000000000000003fb005d00000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000004340099000000000000000001d6
008500000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000002ca00990000000000000000000000000321005100000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000029b010a000000000000
000000000000000000000000000000000000000000000000000000000000
0000000001ff002a00000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000284005602840075000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000335
008b00000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000040e006b00000000
040e00520000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000040e0048040e00ae040e0072040e0067040e0030040e
0065040e006b040e0063040e0052040e0052000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
00a100a100a100a100a100a100a100a100a100a100a100a100a100a100a1
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e014e014e014e014e014e014e014e014e014e014e014e
014e014e014e014e01e501e501e501e50286028602860286028602860286
028602860286028602860286028602860286028602860286028602860286
028602860286028602860286028602860286028602860286028602860286
028602860286028602860286028602860286028602860286028602860286
02860286028602860286028602860286030a030a030a0383038303830383
038303830383038303830383038303830383038303830383038303830383
038303830383038303830383038303830383038303830383038303830383
038303830383038303830383038303830383038303830383038303fc03fc
03fc03fc04c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c204c204c204c204c204c204c2
04c204c204c204c204c204c204c204c204c2050705070507050705070507
050705070507050705070538053805380538053805380538053805380538
053805380538053805380538053805380538053805380538053805380538
053805380538053805380538053805380538053805380538053805380538
0538053805380538053805b2062e062e062e062e062e062e062e062e062e
062e062e062e062e062e062e062e062e062e062e062e0674067406740674
067406740674067406740674067406740674067406740674067406740674
067406740674067406740674067406740674067406740674067406740674
067406740674067406740674067406740674067406740674067406740674
067406740722072208480848084808480848084808480848084808480848
084808480848084808480848084808480848084808480848084808480848
08480848084808480848084808fb09b20a520b460c0b0cc00cc80d670d6f
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280e280e280e280e28
0e280e280e280e280e280e280e280e280e280e280e280000000100000f22
005900050049000300020010002f0065000011902410000100010000002d
02220000000300000000006400000000000300000001000e006400000003
00000002000e03040000000300000003003003120000000300000004000e
00640000000300000005001803420000000300000006000e006400000003
0000000700fa035a0000000300000008002a03d000000003000000090020
0454000000030000000a02a00064000000030000000b0056047400000003
0000000c002a04ca000000030000000d029804f4000000030000000e006c
078c0001000000000000003207f800010000000000010007082a00010000
000000020007097a00010000000000030018098100010000000000040007
082a0001000000000005000c099900010000000000060007082a00010000
00000007007d09a50001000000000008001509e000010000000000090010
0a22000100000000000a0150082a000100000000000b002b0a3200010000
0000000c00150a5d000100000000000d014c0a72000100000000000e0036
0bbe0003000104090000006400000003000104090001000e006400030001
04090002000e03040003000104090003003003120003000104090004000e
00640003000104090005001803420003000104090006000e006400030001
0409000700fa035a0003000104090008002a03d000030001040900090020
0454000300010409000a02a00064000300010409000b0056047400030001
0409000c002a04ca000300010409000d029804f4000300010409000e006c
078c00a9002000320030003000380020004d006900630072006f0073006f
0066007400200043006f00720070006f0072006100740069006f006e002e
00200041006c006c00200052006900670068007400730020005200650073
00650072007600650064002e00430061006c006900620072006900200069
0073002000610020006d006f006400650072006e002000730061006e0073
002000730065007200690066002000660061006d0069006c007900200077
00690074006800200073007500620074006c006500200072006f0075006e
00640069006e006700730020006f006e0020007300740065006d00730020
0061006e006400200063006f0072006e006500720073002e002000490074
0020006600650061007400750072006500730020007200650061006c0020
006900740061006c006900630073002c00200073006d0061006c006c0020
0063006100700073002c00200061006e00640020006d0075006c00740069
0070006c00650020006e0075006d006500720061006c0020007300650074
0073002e0020004900740073002000700072006f0070006f007200740069
006f006e007300200061006c006c006f0077002000680069006700680020
0069006d007000610063007400200069006e002000740069006700680074
006c007900200073006500740020006c0069006e006500730020006f0066
002000620069006700200061006e006400200073006d0061006c006c0020
007400650078007400200061006c0069006b0065002e002000430061006c
0069006200720069002700730020006d0061006e00790020006300750072
00760065007300200061006e006400200074006800650020006e00650077
002000720061007300740065007200690073006500720020007400650061
006d00200075007000200069006e00200062006900670067006500720020
00730069007a0065007300200074006f002000720065007600650061006c
002000610020007700610072006d00200061006e006400200073006f0066
00740020006300680061007200610063007400650072002e005200650067
0075006c00610072004d006900630072006f0073006f00660074003a0020
00430061006c0069006200720069003a0020003200300030003500560065
007200730069006f006e00200035002e0036003200430061006c00690062
007200690020006900730020006500690074006800650072002000610020
007200650067006900730074006500720065006400200074007200610064
0065006d00610072006b0020006f00720020006100200074007200610064
0065006d00610072006b0020006f00660020004d006900630072006f0073
006f0066007400200043006f00720070006f0072006100740069006f006e
00200069006e002000740068006500200055006e00690074006500640020
00530074006100740065007300200061006e0064002f006f00720020006f
007400680065007200200063006f0075006e00740072006900650073002e
004c007500630028006100730029002000640065002000470072006f006f
00740068007400740070003a002f002f007700770077002e006d00690063
0072006f0073006f00660074002e0063006f006d002f007400790070006f
006700720061007000680079002f006300740066006f006e007400730068
007400740070003a002f002f0066006f006e007400660061006200720069
006b002e0063006f006d0059006f00750020006d00610079002000750073
00650020007400680069007300200066006f006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
0065002000450055004c004100200066006f007200200074006800650020
00700072006f006400750063007400200069006e00200077006800690063
00680020007400680069007300200066006f006e00740020006900730020
0069006e0063006c007500640065006400200074006f0020006400690073
0070006c0061007900200061006e00640020007000720069006e00740020
0063006f006e00740065006e0074002e00200059006f00750020006d0061
00790020006f006e006c0079002000280069002900200065006d00620065
00640020007400680069007300200066006f006e007400200069006e0020
0063006f006e00740065006e00740020006100730020007000650072006d
00690074007400650064002000620079002000740068006500200065006d
00620065006400640069006e006700200072006500730074007200690063
00740069006f006e007300200069006e0063006c00750064006500640020
0069006e0020007400680069007300200066006f006e0074003b00200061
006e006400200028006900690029002000740065006d0070006f00720061
00720069006c007900200064006f0077006e006c006f0061006400200074
00680069007300200066006f006e007400200074006f0020006100200070
00720069006e0074006500720020006f00720020006f0074006800650072
0020006f0075007400700075007400200064006500760069006300650020
0074006f002000680065006c00700020007000720069006e007400200063
006f006e00740065006e0074002e0068007400740070003a002f002f0077
00770077002e006d006900630072006f0073006f00660074002e0063006f
006d002f007400790070006f006700720061007000680079002f0066006f
006e00740073002f00640065006600610075006c0074002e006100730070
0078a92032303038204d6963726f736f667420436f72706f726174696f6e
2e20416c6c205269676874732052657365727665642e43616c6962726920
69732061206d6f6465726e2073616e732073657269662066616d696c7920
7769746820737562746c6520726f756e64696e6773206f6e207374656d73
20616e6420636f726e6572732e204974206665617475726573207265616c
206974616c6963732c20736d616c6c20636170732c20616e64206d756c74
69706c65206e756d6572616c20736574732e204974732070726f706f7274
696f6e7320616c6c6f77206869676820696d7061637420696e2074696768
746c7920736574206c696e6573206f662062696720616e6420736d616c6c
207465787420616c696b652e2043616c696272692773206d616e79206375
7276657320616e6420746865206e65772072617374657269736572207465
616d20757020696e206269676765722073697a657320746f207265766561
6c2061207761726d20616e6420736f6674206368617261637465722e5265
67756c61724d6963726f736f66743a2043616c696272693a203230303556
657273696f6e20352e363243616c69627269206973206569746865722061
20726567697374657265642074726164656d61726b206f72206120747261
64656d61726b206f66204d6963726f736f667420436f72706f726174696f
6e20696e2074686520556e697465642053746174657320616e642f6f7220
6f7468657220636f756e74726965732e4c7563286173292064652047726f
6f74687474703a2f2f7777772e6d6963726f736f66742e636f6d2f747970
6f6772617068792f6374666f6e7473687474703a2f2f666f6e7466616272
696b2e636f6d596f75206d617920757365207468697320666f6e74206173
207065726d6974746564206279207468652045554c4120666f7220746865
2070726f6475637420696e207768696368207468697320666f6e74206973
20696e636c7564656420746f20646973706c617920616e64207072696e74
20636f6e74656e742e20596f75206d6179206f6e6c792028692920656d62
6564207468697320666f6e7420696e20636f6e74656e7420617320706572
6d69747465642062792074686520656d62656464696e6720726573747269
6374696f6e7320696e636c7564656420696e207468697320666f6e743b20
616e6420286969292074656d706f726172696c7920646f776e6c6f616420
7468697320666f6e7420746f2061207072696e746572206f72206f746865
72206f75747075742064657669636520746f2068656c70207072696e7420
636f6e74656e742e687474703a2f2f7777772e6d6963726f736f66742e63
6f6d2f7479706f6772617068792f666f6e74732f64656661756c742e6173
7078000000>
<b2090320b80284b40918014a20b80283b40918014a20b80282b40918014a
20b80281b40918014a20b80280b40918014a20b8027fb40918014a20b802
7eb40918014a20b8027db40918014a20b8027cb40918014a20b8027bb409
18014a20b8027ab40918014a20b80279b40918014a20b80278b40918014a
20b80277b40918014a20b80276b40918014a20b80275b40918014a20b802
74b40918014a20b80273b40918014a20b80271b40918014a20b80270b409
18014a20b8026fb40918014a20b8026eb40918014a20b8026db40918014a
20b8026cb40918014a20b8026bb40918014a20b8026ab40918014a20b802
69b40918014a20b80268b40918014a20b80267b40918014a20b80266b409
18014a20b80265b40918014a20b80264b40918014a20b80263b40918014a
20b80262b40918014a20b80261b40918014a20b80260b40918014a20b802
5fb40918014a20b8025eb40918014a20b8025db40918014a20b8025cb409
18014a20b8025bb40918014a20b8025ab40918014a20b80259b40918014a
20b80258b40918014a20b80257b40918014a20b80256b40918014a20b802
55b40918014a20b80254b40918014a20b80253b40918014a20b80252b409
18014a20b80251b40918014a20b80250b40918014a20b8024fb40918014a
20b8024eb40918014a20b8024db40918014a20b8024cb40918014a20b802
4bb40918014a20b8024ab40918014a20b80249b40918014a20b80248b409
18014a20b80247b40918014a20b80246b40918014a20b80245b40918014a
20b80244b40918014a20b80243b40918014a20b80242b40918014a20b802
41b40918014a20b80240b40918014a20b8023fb40918014a20b8023eb409
18014a20b8023db40918014a20b8023cb40918014a20b8023bb40918014a
20b8023ab40918014a20b80239b40918014a20b80238b40918014a20b802
37b40918014a20b80236b40918014a20b80235b40918014a20b80234b409
18014a20b80233b40918014a20b80232b40918014a20b80231b40918014a
20b80230b40918014a20b8022fb40918014a20b8022eb40918014a20b802
2db40918014a20b8022cb40918014a20b8022bb40918014a20b8022ab409
18014a20b80229b40918014a20b80228b40918014a20b80227b40918014a
20b80226b40918014a20b80225b40918014a20b80224b40918014a20b802
23b40918014a20b80222b40918014a20b80221b40918014a20b80220b409
18014a20b8021fb40918014a20b8021eb40918014a20b8021db40918014a
20b8021cb40918014a20b8021bb40918014a20b8021ab40918014a20b802
19b40918014a20b80218b40918014a20b80217b40918014a20b80216b409
18014a20b80215b40918014a20b80214b40918014a20b80213b40918014a
20b80212b40918014a20b80211b40918014a20b80210b40918014a20b802
0fb40918014a20b8020eb40918014a20b8020db40918014a20b8020cb409
18014a20b8020bb40918014a20b8020ab40918014a20b80209b40918014a
20b80208b40918014a20b80207b40918014a20b80206b40918014a20b802
05b40918014a20b80204b40918014a20b80203b40918014a20b80202b409
18014a20b80201b40918014a20b80200b40918014a20b801ffb40918014a
20b801feb40918014a20b801fdb40918014a20b801fcb40918014a20b801
fbb40918014a20b801fab40918014a20b801f9b40918014a20b801f8b409
18014a20b801f7b40918014a20b801f6b40918014a20b801f5b40918014a
20b801f4b40918014a20b801f3b40918014a20b801f2b40918014a20b801
f1b40918014a20b801f0b40918014a20b801efb40918014a20b801eeb409
18014a20b801edb40918014a20b801ecb40918014a20b801ebb40918014a
20b801eab40918014a20b801e9b40918014a20b801e8b40918014a20b801
e7b40918014a20b801e6b40918014a20b801e5b40918014a20b801e4b409
18014a20b801e3b40918014a20b801e2b40918014a20b801e1b40918014a
20b801e0b40918014a20b801dfb40918014a20b801deb40918014a20b801
ddb40918014a20b801dcb40918014a20b801dbb40918014a20b801dab409
18014a20b801d9b40918014a20b801d8b40918014a20b801d7b40918014a
20b801d6b40918014a20b801d5b40918014a20b801d4b40918014a20b801
d3b40918014a20b801d2b40918014a20b801d1b40918014a20b801d0b409
18014a20b801cfb40918014a20b801ceb40918014a20b801cdb40918014a
20b801ccb40918014a20b801cbb40918014a20b801cab40918014a20b801
c9b40918014a20b801c8b40918014a20b801c7b40918014a20b801c6b409
18014a20b801c5b40918014a20b801c4b40918014a20b801c3b40918014a
20b801c2b40918014a20b801c1b40918014a20b801c0b40918014a20b801
bfb40918014a20b801beb40918014a20b801bdb40918014a20b801bcb409
18014a20b801bbb40918014a20b801bab40918014a20b801b9b40918014a
20b801b8b40918014a20b801b7b40918014a20b801b6b40918014a20b801
b5b40918014a20b801b4b40918014a20b801b3b40918014a20b801b2b409
18014a20b801b1b40918014a20b801b0b40918014a20b801afb40918014a
20b801aeb40918014a20b801adb40918014a20b801acb40918014a20b801
abb40918014a20b801aab40918014a20b801a9b40918014a20b801a8b409
18014a20b801a7b40918014a20b801a6b40918014a20b801a5b40918014a
20b801a4b40918014a20b801a3b40918014a20b801a2b40918014a20b801
a1b40918014a20b801a0b40918014a20b8019fb40918014a20b8019eb409
18014a20b8019db40918014a20b8019cb40918014a20b8019bb40918014a
20b8019ab40918014a20b80199b40918014a20b80198b40918014a20b801
97b40918014a20b80196b40918014a20b80195b40918014a20b80194b409
18014a20b80193b40918014a20b80192b40918014a20b80191b40918014a
20b80190b40918014a20b8018fb40918014a20b8018eb40918014a20b801
8db40918014a20b8018cb40918014a20b8018bb40918014a20b8018ab409
18014a20b80189b40918014a20b80188b40918014a20b80187b40918014a
20b80186b40918014a20b80185b40918014a20b80184b40918014a20b801
83b40918014a20b80182b40918014a20b80181b40918014a20b80180b409
18014a20b8017fb40918014a20b8017eb40918014a20b8017db40918014a
20b8017cb40918014a20b8017bb40918014a20b8017ab40918014a20b801
79b40918014a20b80178b40918014a20b80177b40918014a20b80176b409
18014a20b80175b40918014a20b80174b40918014a20b80173b40918014a
20b80172b40918014a20b80171b40918014a20b80170b40918014a20b801
6fb40918014a20b8016eb40918014a20b8016db40918014a20b8016cb409
18014a20b8016bb40918014a20b8016ab40918014a20b80169b40918014a
20b80168b40918014a20b80167b40918014a20b80166b40918014a20b801
65b40918014a20b80164b40918014a20b80163b40918014a20b80162b409
18014a20b80161b40918014a20b80160b40918014a20b8015fb40918014a
20b8015eb40918014a20b8015db40918014a20b8015cb40918014a20b801
5bb40918014a20b8015ab40918014a20b80159b40918014a20b80158b409
18014a20b80157b40918014a20b80156b40918014a20b80155b40918014a
20b80154b40918014a20b80153b40918014a20b80152b40918014a20b801
50b40918014a20b8014fb40918014a20b8014eb40918014a20b8014cb409
18014a20b8014bb40918014a20b8014ab40918014a20b80149b40918014a
20b80148b40918014a20b80147b40918014a20b80146b40918014a20b801
45b40918014a20b80144b40918014a20b80143b30918014ab80284b21e3e
1fb80283b21e151fb80282b21e3e1fb80281b21e3a1fb80280b21e3e1fb8
027fb21e3e1fb8027eb21e0c1fb8027db21e3e1fb8027cb21e3e1fb8027b
b21e3e1fb8027ab21e3e1fb80279b21d411fb80278b21d431fb80277b21d
431fb80276b21d431fb80275b21d411fb80274b21d431fb80273b21d431f
b80272b21d411fb80271b21d421fb80270b21d421fb8026fb21d421fb802
6eb21d431fb8026db21d431fb8026cb21d431fb8026bb21c451fb8026ab2
1c451fb80269b21c451fb80268b21c451fb80267b21c451fb80266b21c44
1fb80265b21c451fb80264b21c451fb80263b21c451fb80262b21c451fb8
0261b21c451fb80260b21c451fb8025fb21c451fb8025eb21c441fb8025d
b21c451fb8025cb21c451fb8025bb21c451fb8025ab21c451fb80259b21c
451fb80258b21c451fb80257b21c451fb80256b21c451fb80255b21c451f
b80254b21c451fb80253b21c451fb80252b21c451fb80251b21c451fb802
50b21c451fb8024fb21c451fb8024eb21c451fb8024db21c451fb8024cb2
1c451fb8024bb21c451fb8024ab21b491fb80249b21b491fb80248b21b4a
1fb80247b21b4a1fb80246b21b4b1fb80245b21b4c1fb80244b21b4c1fb8
0243b21b4c1fb80242b21b4b1fb80241b21b491fb80240b21b491fb8023f
b21b4a1fb8023eb21b4a1fb8023db21b4a1fb8023cb21b4b1fb8023bb21b
4b1fb8023ab21b4c1fb80239b21b4c1fb80238b21b4c1fb80237b21b4c1f
b80236b21b4c1fb80235b21b491fb80234b21b491fb80233b21b4a1fb802
32b21b4a1fb80231b21b4a1fb80230b21b4b1fb8022fb21b4b1fb8022eb2
1b4c1fb8022db21b4c1fb8022cb21b4c1fb8022bb21b4c1fb8022ab21b4c
1fb80229b21b4c1fb80228b21b4c1fb80227b21b491fb80226b21b491fb8
0225b21b4a1fb80224b21b4a1fb80223b21b4a1fb80222b21b4b1fb80221
b21b4b1fb80220b21b4c1fb8021fb21b4c1fb8021eb21b4c1fb8021db21b
4c1fb8021cb21b4c1fb8021bb21b4c1fb8021ab21a4e1fb80219b21a4e1f
b80218b21a4f1fb80217b21a4f1fb80216b21a4e1fb80215b21a4e1fb802
14b21a4f1fb80213b21a4f1fb80212b21a4f1fb80211b21a4e1fb80210b2
1a4e1fb8020fb21a4f1fb8020eb21a4f1fb8020db21a4f1fb8020cb21a4e
1fb8020bb21a4e1fb8020ab21a4e1fb80209b21a4f1fb80208b21a4f1fb8
0207b21a4f1fb80206b219501fb80205b219511fb80204b219511fb80203
b219501fb80202b219511fb80201b219511fb80200b219511fb801ffb219
511fb801feb219501fb801fdb219511fb801fcb219511fb801fbb219511f
b801fab219501fb801f9b219511fb801f8b219511fb801f7b219511fb801
f6b219511fb801f5b218541fb801f4b218531fb801f3b218541fb801f2b2
18541fb801f1b218541fb801f0b218531fb801efb218541fb801eeb21854
1fb801edb218541fb801ecb218531fb801ebb218531fb801eab218541fb8
01e9b218541fb801e8b218541fb801e7b218541fb801e6b218531fb801e5
b218541fb801e4b218531fb801e3b218541fb801e2b218541fb801e1b218
541fb801e0b218531fb801dfb218531fb801deb218541fb801ddb218541f
b801dcb218541fb801dbb218541fb801dab218531fb801d9b218541fb801
d8b218541fb801d7b217571fb801d6b217561fb801d5b217561fb801d4b2
17571fb801d3b217571fb801d2b217571fb801d1b217571fb801d0b21756
1fb801cfb217561fb801ceb217571fb801cdb217571fb801ccb217571fb8
01cbb217571fb801cab217561fb801c9b217561fb801c8b217571fb801c7
b217571fb801c6b217571fb801c5b217571fb801c4b217571fb801c3b217
561fb801c2b217571fb801c1b217571fb801c0b217571fb801bfb217561f
b801beb217561fb801bdb217571fb801bcb217571fb801bbb217571fb801
bab217571fb801b9b217571fb801b8b217561fb801b7b217571fb801b6b2
17571fb801b5b217571fb801b4b217571fb801b3b2163f1fb801b2b2165b
1fb801b1b2165b1fb801b0b2165b1fb801afb2165b1fb801aeb2165b1fb8
01adb2165b1fb801acb2165b1fb801abb2165b1fb801aab2163e1fb801a9
b2163f1fb801a8b2163f1fb801a7b2165b1fb801a6b2165b1fb801a5b216
5b1fb801a4b2165b1fb801a3b2165b1fb801a2b2165b1fb801a1b2165b1f
b801a0b2165b1fb8019fb2163e1fb8019eb2163f1fb8019db2163f1fb801
9cb2165b1fb8019bb2165b1fb8019ab2165b1fb80199b2165b1fb80198b2
163e1fb80197b2165b1fb80196b2165b1fb80195b2165b1fb80194b2163e
1fb80193b2163f1fb80192b2163f1fb80191b2165b1fb80190b2165b1fb8
018fb2165b1fb8018eb2165b1fb8018db2165b1fb8018cb2163f1fb8018b
b2165b1fb8018ab2165b1fb80189b2165b1fb80188b2165b1fb80187b216
5b1fb80186b215611fb80185b215621fb80184b215621fb80183b215661f
b80182b215661fb80181b215551fb80180b215451fb8017fb215361fb801
7eb215361fb8017db215611fb8017cb215621fb8017bb215621fb8017ab2
15641fb80179b215661fb80178b215661fb80177b215661fb80176b21566
1fb80175b215661fb80174b215661fb80173b215451fb80172b215621fb8
0171b215621fb80170b215631fb8016fb215641fb8016eb215661fb8016d
b215661fb8016cb215661fb8016bb215661fb8016ab215661fb80169b215
621fb80168b215621fb80167b215611fb80166b215641fb80165b215641f
b80164b215661fb80163b215661fb80162b215661fb80161b215661fb801
60b215661fb8015fb215661fb8015eb215551fb8015db215451fb8015cb2
15451fb8015bb215361fb8015ab215611fb80159b215621fb80158b21562
1fb80157b215631fb80156b215641fb80155b215661fb80154b215661fb8
0153b215661fb80152b215661fb80151b214401fb80150b214551fb8014f
b214561fb8014eb214831fb8014db2142d1fb8014cb214401fb8014bb214
401fb8014ab214411fb80149b214401fb80148b214401fb80147b214411f
b80146b2147e1fb80145b214871fb80144b2147f1fb80143b214801fb801
42b212461fb80141b212461fb80140b212461fb8013fb212461fb8013eb2
12441fb8013db212461fb8013cb211591fb8013bb211591fb8013ab2115b
1fb80139b2115b1fb80138b211471fb80137b211581fb80136b2115a1fb8
0135b2115b1fb80134b2115b1fb80133b2112c1fb80132b211471fb80131
b211551fb80130b211571fb8012fb211571fb8012eb211581fb8012db211
591fb8012cb211591fb8012bb2115a1fb8012ab2115a1fb80129b2115b1f
b80128b2115b1fb80127b2115b1fb80126b2115b1fb80125b211561fb801
24b211561fb80123b211571fb80122b211581fb80121b211591fb80120b2
115a1fb8011fb2115a1fb8011eb2115b1fb8011db2115b1fb8011cb2115b
1fb8011bb2115b1fb8011ab2115b1fb80119b2105d1fb80118b2105e1fb8
0117b2105f1fb80116b2105f1fb80115b2105f1fb80114b2105f1fb80113
b2105f1fb80112b2105d1fb80111b2105e1fb80110b2105f1fb8010fb210
5f1fb8010eb2105f1fb8010db2105f1fb8010cb2105d1fb8010bb2105e1f
b8010ab2105f1fb80109b2105f1fb80108b2105f1fb80107b2105f1fb801
06b2105d1fb80105b2105e1fb80104b2105f1fb80103b2105f1fb80102b2
105f1fb80101b2105f1fb8010040ff0f621fff0f621ffe0f631ffd0f641f
fc0f621ffb0f621ffa0f621ff90f631ff80f641ff70f641ff60f641ff50f
641ff40f621ff30f621ff20f631ff10f641ff00f641fef0f641fee0f641f
ed0f621fec0f621feb0f631fea0f641fe90f641fe80f641fe70f641fe60e
671fe50e681fe40e681fe30e681fe20e681fe10e671fe00e681fdf0e681f
de0e681fdd0e671fdc0e681fdb0e681fda0e681fd90e681fd80d6b1fd70d
311fd60d6b1fd50d6c1fd40d261fd30d261fd20d6c1fd10d2b1fd00d2b1f
cf0d2b1fce0d6b1fcd0d6c1fcc0d6d1fcb0d6b1fca0d6c1fc90d6d1fc80d
6a1fc70d691fc60d681fc50d671fc40d261fc30d311fc20d311fc10d311f
40ffc00d311fbf0d311fbe0d311fbd0c711fbc0c721fbb0c731fba0c741f
b90c741fb80c741fb70c711fb60c711fb50c721fb40c731fb30c741fb20c
741fb10c741fb00c741faf0b791fae0b7a1fad0b7c1fac0b7d1fab0b7e1f
aa0b7e1fa90b7e1fa80b7e1fa70b7e1fa60b7e1fa50b2d1fa40b7e1fa30b
7e1fa20b791fa10b7e1fa00b6b1f9f0b791f9e0b7e1f9d0b7e1f9c0b791f
9b0b7a1f9a0b7c1f990b7d1f980b7e1f970b7e1f960b7e1f950b7e1f940b
7e1f930b7e1f920b6b1f910b2d1f900a4e1f8f0a4f1f8e0a671f8d0aa51f
8c0aa71f8503251f8403381f8301381f8255805581ab80557f557d557eab
7d550b7d010b7d1b7d4b7d7b7dab7ddb7d4012060a7c557a557bab7a5579
55775578ab7755ba028600660285403c5576ab755504751475747503f475
01ab750144750130750102007510752075030c7455725573ab7255007250
728072b072043bb072e072020072010ab8ffc0b3721b1e46b8ffc0407c72
0d104671556f5570ab6f556e666d556a03251f6938675568ab6755663864
5565ab645563386255613860555f385d555eab5d555c385a555bab5a5559
3858555703251f5638545555ab54555338515552ab51554f384e554e0325
1f4d384b554cab4b554a38485549ab4855473846554503381f001c101c20
1c0310b8ffc0404e1c1b1e46001b0142301b401be01bf01b04001bb01bc0
1b03120f1a1f1a02290f1901434f19016f197f198f19030f18cf18024018
292c460f17cf17df17ef1704134017292e460016101620160315b8ffc0b3
164d5446b8ffc0b3163f4446b8ffc0b316313546b8ffc0404d162326460f
15010f151f1502451f15010011e011f0110315bf10cf10020f0f010f0fff
0f02400f3135460f0e1f0e020f0e1f0eff0e03400e3137460f0d1f0d020f
0d1f0dff0d0316400d313746b8ffc040270c5054460f0b1f0b02553f0b4f
0b02400b3f4346400b2d30460003012001010001100120010308b8ffc0b3
01151f46b80100b316010501b80190b154532b2b4bb80800524bb008505b
b00188b02553b00188b040515ab00688b000555a5b58b101018e59b10102
4354b0144b515a58b101018e59858d8d00421d4bb01d5358b0a01d594bb0
805358b0401d594bb0ff5358b0001db1160042592b5e7375732b2b745e73
2b2b5e73742b73742b7374745e7301755e73742b2b2b2b5e732b5e732b73
74755e735e735e73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b5e73755e732b2b5e735f7373737374
2b2b2b2b2b2b5e73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2bb1000243545841ff02840064028300640282
00640281006402800064027f0064027e0064027d0064027c0064027b0064
027a00640279006402780064027700640276006402750064027400640273
00640271006402700064026f0064026e0064026d0064026c0064026b0064
026a00640269006402680064026700640266006402650064026400640263
0064026200640261006402600064025f0064025e0064025d0064025c0064
025b0064025a006402590064025800640257006402560064025500640254
006402530064025200640251006402500064024f0064024e0064024d0064
024c0064024b0064024a0064024900640248006402470064024600640245
00640244006402430064024200640241006402400064023f0064023e0064
023d0064023c0064023b0064023a00640239006402380064023700640236
0064023500640234006402330064023200640231006402300064022f0064
022e0064022d0064022c0064022b0064022a006402290064022800640227
006402260064022500640224006402230064022200640221006402200064
021f0064021e0064021d0064021c0064021b0064021a0064021900640218
006402170064021600640215006402140064021300640212006402110064
02100064020f0064020e0064020d0064020c0064020b0064020a00640209
006402080064020700640206006402050064020441ff0064020300640202
0064020100640200006401ff006401fe006401fd006401fc006401fb0064
01fa006401f9006401f8006401f7006401f6006401f5006401f4006401f3
006401f2006401f1006401f0006401ef006401ee006401ed006401ec0064
01eb006401ea006401e9006401e8006401e7006401e6006401e5006401e4
006401e3006401e2006401e1006401e0006401df006401de006401dd0064
01dc006401db006401da006401d9006401d8006401d7006401d6006401d5
006401d4006401d3006401d2006401d1006401d0006401cf006401ce0064
01cd006401cc006401cb006401ca006401c9006401c8006401c7006401c6
006401c5006401c4006401c3006401c2006401c1006401c0006401bf0064
01be006401bd006401bc006401bb006401ba006401b9006401b8006401b7
006401b6006401b5006401b4006401b3006401b2006401b1006401b00064
01af006401ae006401ad006401ac006401ab006401aa006401a9006401a8
006401a7006401a6006401a5006401a4006401a3006401a2006401a10064
01a00064019f0064019e0064019d0064019c0064019b0064019a00640199
006401980064019700640196006401950064019400640193006401920064
0191006401900064018f0064018e0064018d0064018c0064018b0064018a
006401890064018800640187006401860064018500644180018400640183
0064018200640181006401800064017f0064017e0064017d0064017c0064
017b0064017a006401790064017800640177006401760064017500640174
006401730064017200640171006401700064016f0064016e0064016d0064
016c0064016b0064016a0064016900640168006401670064016600640165
00640164006401630064016200640161006401600064015f0064015e0064
015d0064015c0064015b0064015a00640159006401580064015700640156
00640155006401540064015300640152006401500064014f0064014e0064
014c0064014b0064014a0064014900640148006401470064014600640145
006401440064014300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b59
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b185f5e00>
[7249 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 4240 1004 <00020048ffed03c705210013002b00ea4019281201291101260d01260c01
2608012507012a03012902012db8ffc040250f024d602d01141810014d14
100f014d14160d014d140a0c014d14200b014d14180c014d14bb022d0000
0020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8fff6b30c
014d20b8ffe8b60c014d24200120b8022d40090a200030004000030ab8ff
f040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00b8ffc040
0a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003fed3fed11
120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b2b2b3130
5d2b5d5d5d5d5d5d5d5d01140e0223222e0235343e0233321e0207342e04
23220e0215141e0233323e0403c72f6db0817aa7662b306cb0807ba7662b
b00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b16157a9f7
a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e7285>PBAAAA+CALIBRI AddT42Char 
2 0 0 <00050000fe7303d2050e000300070039004d004e005bbc000d0152001600
3a01b5b5154444082d07be0143000200200154000800010143400f04020d
b71a1a3f23b735068d031149b8012db43f078d0202003ffddefdce2ffdde
ed12392fed012fdde1dee110f1ce11392f33e1d4e1313001112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d>PBAAAA+CALIBRI AddT42Char 
PBAAAA+CALIBRI /CharStrings get begin
/zero 1004 def
end
PBAAAA+CALIBRI /Encoding get
dup 48 /zero put
pop
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI /PBAAAA+CALIBRI findfont ct_VMDictPut
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
51.525 100.974 mo
(0)sh
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
73.355 96.9845 mo
122.855 96.9845 li
1 /0 /CSD get_res sepcs
.749 sep
@
122.105 94.7345 mo
129.605 96.9845 li
122.105 99.2345 li
122.105 94.7345 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 1292 346 <00010099fffa03a0057100320079b43f34012a13b8ffe8b30b014d13b8ff
f0b40f10014c13b8fff6b30c014d13b8fff0b30d014d13b801f840171e0b
0a0c014d0b100d014d0b180b014d0b100f10014c0bb801f8400a00400c01
4d001e2a1910b80106b72d4a2446194c054c003f3f3f3fed1239012f2f2b
e12b2b2b2b10e12b2b2b2b3931305d25140e0223222e023511342e022322
060711140e0223222e023511343e0233321e021511363633321e021503a0
0812201819201208182e49303e7c44081220191820130707132018192012
084790495a7b4c2119080b080404080b08020f4d5e44245855fd8b080b08
0404080b080538080c080404080c08fde54b493d66896100>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/h 346 def
end
XZAJVP+CALIBRI /Encoding get
dup 104 /h put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero 55{/.notdef}rp /h 151{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
92.715 94.0945 mo
(h)sh
163.805 96.0545 mo
163.055 96.0545 li
163.054 91.7428 161.243 87.8393 158.301 85.0007 cv
155.358 82.1637 151.293 80.4047 146.795 80.4045 cv
142.297 80.4047 138.232 82.1637 135.289 85.0007 cv
132.347 87.8393 130.536 91.7427 130.535 96.0545 cv
130.536 100.371 132.347 104.275 135.289 107.112 cv
138.232 109.948 142.297 111.704 146.795 111.704 cv
151.293 111.704 155.358 109.948 158.301 107.112 cv
161.243 104.275 163.054 100.371 163.055 96.0545 cv
163.805 96.0545 li
164.555 96.0545 li
164.556 100.798 162.557 105.094 159.342 108.192 cv
156.127 111.291 151.687 113.205 146.795 113.204 cv
141.903 113.205 137.463 111.291 134.248 108.192 cv
131.033 105.094 129.034 100.798 129.035 96.0545 cv
129.034 91.3162 131.033 87.0197 134.248 83.9208 cv
137.463 80.8203 141.903 78.9044 146.795 78.9045 cv
151.687 78.9044 156.127 80.8203 159.342 83.9208 cv
162.557 87.0197 164.556 91.3162 164.555 96.0545 cv
163.805 96.0545 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 4598 1005 <000100ae0000039f0517002e00e54024241e01241d01241c01231b01241a
01241901261801261701291201291101122010014d30b8ffc0400d0f024d
60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29b8fff0b3
0d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e18200b01
4d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8ffc0b310
014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b014da01101
111312b8013fb323522910b80107b10654003fed323ffdcd012f5d2b2b2b
2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d5d5d5d5d
5d5d5d25140e022321222e0235343e02332111070606262635343e023725
3e0333321e02151133321e02039f060a0d07fd5c070c0b0606090d08010e
fa13170e0503060b09012a040c12181218201206ea080e090544131a1007
07101a13121a110903d8950a040d1e171118100c06bf0304040104070b06
fb8f09111a00>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/one 1005 def
end
XZAJVP+CALIBRI /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one 54{/.notdef}rp /h 151{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
142.235 101.454 mo
(1)sh
164.105 96.9845 mo
213.605 96.9845 li
1 /0 /CSD get_res sepcs
.749 sep
@
212.855 94.7345 mo
220.355 96.9845 li
212.855 99.9845 li
212.855 94.7345 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 970 286 <0002005dffed039903ca002b003400ae402a2f363f366f360313200d014d
13200f014d1313212c100c014d2c180b014d2c100d014d2c100f10014c2c
b801f9b5442ba42b022bb8fff0b50f014d2b3404b8ffe0b30d014d04b8ff
eeb30c014d04b8ffe0b30b014d04b8ffe8b40f10014c04b8020a4021212c
c78004900402c00401d0040104041c2fdc264a18ea600e700e020e09ea1c
4d003ffdd45ded3fed12392f5d7172ed012fe12b2b2b2b32dd2b5de12b2b
2b2b12392f2b2b31305d0114062321141e0233323e0233321e0215140e06
23222e0235343e0233321e021527362623220e020703992719fdb21e4670
514064492f0c070b06030203070b365671406fa7723a3c71a0636a95602d
a60379773d5c3e2202020227214b78562e151a15070e19120d130f0c0b19
18133e7ab87a74b9814544739b581382942e4c653700>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/e 286 def
end
XZAJVP+CALIBRI /Encoding get
dup 101 /e put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one 51{/.notdef}rp /e 2{/.notdef}rp /h 151{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
183.625 94.5845 mo
(e)sh
254.515 96.0545 mo
254.515 87.0044 246.895 79.6545 237.505 79.6545 cv
228.115 79.6545 220.495 87.0044 220.495 96.0545 cv
220.495 105.115 228.115 112.455 237.505 112.455 cv
246.895 112.455 254.515 105.115 254.515 96.0545 cv
/1 
[/DeviceCMYK] /CSA add_res
.485023 0 .949828 0 cmyk
ef
254.515 96.0545 mo
253.765 96.0545 li
253.764 91.7428 251.953 87.8393 249.011 85.0007 cv
246.068 82.1637 242.003 80.4047 237.505 80.4045 cv
233.007 80.4047 228.942 82.1637 225.999 85.0007 cv
223.057 87.8393 221.245 91.7427 221.245 96.0545 cv
221.246 100.371 223.057 104.275 225.999 107.112 cv
228.942 109.948 233.007 111.704 237.505 111.704 cv
242.003 111.704 246.068 109.948 249.011 107.112 cv
251.953 104.275 253.764 100.371 253.765 96.0545 cv
254.515 96.0545 li
255.265 96.0545 li
255.266 100.798 253.267 105.094 250.052 108.192 cv
246.837 111.291 242.397 113.205 237.505 113.204 cv
232.613 113.205 228.173 111.291 224.958 108.192 cv
221.743 105.094 219.744 100.798 219.745 96.0545 cv
219.744 91.3162 221.743 87.0197 224.958 83.9208 cv
228.173 80.8203 232.613 78.9044 237.505 78.9045 cv
242.397 78.9044 246.837 80.8203 250.052 83.9208 cv
253.267 87.0197 255.265 91.3162 255.265 96.0545 cv
254.515 96.0545 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 4964 1006 <000100720000039c0521003e0094400d2936012b1e01291d01261e0140b8
ffc040170f024d604001161810014d16100c0d014c16200b014d16b8022d
b633253325330039b8ffe8b310014d39ba027f000bffc0b30c014d0bb8ff
e0400b0f014d0b1138392020391bb8012eb63316062e531039b80128b106
54003fed323f123939ed11392f123939012f2b2be12bcd39392f2f10e12b
2b2b31305d2b005d015d5d5d25140e022321222e0235343e0237133e0335
342e0223220e0223222e0235343e0633321e0215140e02070721321e0203
9c05090f09fd350e150f07030a0f0cfb576939121c3550343d6149310c07
0b0704020508183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c13
0907101e16141e17170d010a5c9278622b2b4d3a2222282208121e150f16
100e15242318355c7a453e7b8faf72d609121b00>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/two 1006 def
end
XZAJVP+CALIBRI /Encoding get
dup 50 /two put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 50{/.notdef}rp /e 2{/.notdef}rp /h 
151{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
232.945 101.454 mo
(2)sh
254.105 96.4845 mo
304.355 96.4845 li
304.631 96.4845 304.855 96.7083 304.855 96.9845 cv
304.855 97.2606 304.631 97.4844 304.355 97.4844 cv
254.105 97.4844 li
253.829 97.4844 253.605 97.2606 253.605 96.9845 cv
253.605 96.7083 253.829 96.4845 254.105 96.4845 cv
1 /0 /CSD get_res sepcs
.749 sep
f
303.605 94.7345 mo
311.105 96.9845 li
303.605 99.9845 li
303.605 94.7345 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 1798 396 <00010099fffa02a703ca00330063b4703501260fb8fff6b30c014d0fb8ff
e8b30b014d0fb8fff0b40f10014c0fb8fff0b30d014d0fb801f840120040
13014d004011014d00200d014d001a0ab8012540092b4a260f152049154c
003f3f1239393fed012fc42b2b2be12b2b2b2b3931305d01140e0223222e
0223220e020711140e0223222e023511343e0233321e0215153e0333321e
0602a70206090808171d24151930353a23081220191820130706121c1716
1d100725413a391d0d21241d0c0403010362161e1109090908142e4c37fd
b0080b080404080b080384080b090303090b08833644270f03080a0a090e
1b00>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/r 396 def
end
XZAJVP+CALIBRI /Encoding get
dup 114 /r put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 50{/.notdef}rp /e 2{/.notdef}rp /h 
9{/.notdef}rp /r 141{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
272.705 95.2445 mo
(r)sh
345.225 95.5744 mo
344.475 95.5744 li
344.474 91.2574 342.663 87.3544 339.721 84.5169 cv
336.778 81.6814 332.713 79.9247 328.215 79.9245 cv
323.717 79.9247 319.652 81.6814 316.709 84.5169 cv
313.767 87.3544 311.956 91.2574 311.955 95.5744 cv
311.956 99.8915 313.767 103.795 316.709 106.632 cv
319.652 109.468 323.717 111.224 328.215 111.224 cv
332.713 111.224 336.778 109.468 339.721 106.632 cv
342.663 103.795 344.474 99.8915 344.475 95.5744 cv
345.225 95.5744 li
345.975 95.5744 li
345.975 100.317 343.977 104.614 340.762 107.712 cv
337.547 110.811 333.107 112.725 328.215 112.724 cv
323.323 112.725 318.883 110.811 315.668 107.712 cv
312.453 104.614 310.454 100.317 310.455 95.5744 cv
310.454 90.8315 312.453 86.5346 315.668 83.437 cv
318.883 80.3376 323.323 78.4244 328.215 78.4245 cv
333.107 78.4244 337.547 80.3376 340.762 83.437 cv
343.977 86.5346 345.975 90.8315 345.975 95.5744 cv
345.225 95.5744 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 3652 972 <00030052ffed03ba05210027003700470182b90036fff0b40f11014c36b8
fff0b40c0d014c35b8fff0b40f11014c35b8fff0b40c0d014c34b8fff0b4
0f11014c34b8fff0b40c0d014c33b8fff0b311014d33b8fff0b30f014d49
b8ffc0b60f024d60490130b8fff0b40c0d014c30b8fff0b40f10014c30b8
fff0b40c0d014c30b8ffe0b30b014d30b8021940191428100c0d014c2810
0f10014c28100c0d014c28200b014d28b80218401a1e0f231e1e180f014d
14180f014d141e141e0a38100c0d014c38b8ffd040151d014d38100f1001
4c38100c0d014c38200b014d38ba02430000ffd4b30f024d00b8ffe0b30f
014d00b8ffc0b314014d00b8ffc0b310014d00b8ffc0b30d014d00b8ffc0
b40b014d0042b8fff0400a0c0d014c42301d014d42b8fff0b40f10014c42
b8fff0b40c0d014c42b8ffe0b30b014d42b8024340110a400b014d0a353d
052dfd195945fd055f003fed3fed123939012f2be12b2b2b2b2bd42b2b2b
2b2b2be12b2b2b2b2b1239392f2f2b2b12393910e12b2b2b2b10e12b2b2b
2b31305d2b002b2b2b2b2b2b2b2b01140e0223222e0235343e02372e0335
343e0233321e0215140e02071e0303342e0223220615141e021736361334
2e02270e0315141633323603ba3c71a66b649e6e3a284b6e453c5c402131
639966628f5d2c21405d3c476f4b27d81d3853356c6f1b39573c656c2a22
4567443f5f3d1f85848083014c54835a2e2a52784d3d66564b221f45515c
36447758332f516e3f335e544920234a555f025f2a443019625527433c39
1f347efda22e4b413d211f3e42492c616a6b>XZAJVP+CALIBRI AddT42Char 
2 6862 1012 <ffff0052ffed03ba0521020603cc0000>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/eight 1012 def
end
XZAJVP+CALIBRI /Encoding get
dup 56 /eight put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 5{/.notdef}rp /eight 44{/.notdef}rp /e 
2{/.notdef}rp /h 9{/.notdef}rp /r 141{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
323.655 100.974 mo
(8)sh
344.855 96.9845 mo
395.105 96.9845 li
1 /0 /CSD get_res sepcs
.749 sep
@
394.355 94.7345 mo
401.855 96.9845 li
394.355 99.2345 li
394.355 94.7345 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 2040 400 <00010051ffed02ce03ca004900ce400c2f4b3f4b4f4b7f4baf4b0541b8ff
f0b30d014d41b8fff6b30c014d41b8fff0b30f014d41b8ffc0b313014d41
b8fff0b310014d41b8fff0b30b014d41b801dc401f243224320c1b100d01
4d1b0a0c014d1b1010014d1b100b014d1b100f014d1bba01f60000ffc040
0a0f014d000c400b014d0cb8ffc0402613014d3f0caf0c020c2edd370aeb
115011601170110337113711163cdb411b05294a16e8054d003fed3f1239
39ed1139392f2f5d10ed10ed012f5d2b2bd42be12b2b2b2b2b1239392f2f
e12b2b2b2b2b2b31305d01140e0223222e0435343e0233321e0233323e02
35342e0635343e0233321e0615140e0223222e0223220e0215141e0602ce
335e824e30574530160a04060b070b2b3f56382a44321b27405055514027
29527b5224483a291507030303070a06092236492f2a4029152840525553
4027010e456c4a260f171914241f131a10071b201b122336252634281f22
2b3e563c3561492c0c1215100c0f1610111910071619161323301c273528
20222a3c5400>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/s 400 def
end
XZAJVP+CALIBRI /Encoding get
dup 115 /s put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 5{/.notdef}rp /eight 44{/.notdef}rp /e 
2{/.notdef}rp /h 9{/.notdef}rp /r /s 140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
365.785 93.1645 mo
(s)sh
435.925 95.5745 mo
435.925 86.5145 428.315 79.1745 418.925 79.1745 cv
409.525 79.1745 401.915 86.5145 401.915 95.5745 cv
401.915 104.634 409.525 111.974 418.925 111.974 cv
428.315 111.974 435.925 104.634 435.925 95.5745 cv
cp
.485023 0 .949828 0 cmyk
ef
435.925 95.5744 mo
435.175 95.5744 li
435.174 91.2571 433.365 87.354 430.426 84.5168 cv
427.485 81.6813 423.423 79.9247 418.925 79.9245 cv
414.422 79.9247 410.357 81.6814 407.416 84.5169 cv
404.475 87.3541 402.666 91.2571 402.665 95.5744 cv
402.666 99.8917 404.475 103.795 407.416 106.632 cv
410.357 109.468 414.422 111.224 418.925 111.224 cv
423.423 111.224 427.485 109.468 430.426 106.632 cv
433.365 103.795 435.174 99.8919 435.175 95.5744 cv
435.925 95.5744 li
436.675 95.5744 li
436.675 100.317 434.68 104.614 431.467 107.712 cv
428.254 110.811 423.817 112.725 418.925 112.724 cv
414.028 112.725 409.588 110.811 406.374 107.712 cv
403.16 104.614 401.164 100.317 401.165 95.5744 cv
401.164 90.8318 403.16 86.5349 406.374 83.4371 cv
409.588 80.3376 414.028 78.4244 418.925 78.4245 cv
423.817 78.4244 428.254 80.3377 431.467 83.4371 cv
434.68 86.535 436.675 90.8318 436.675 95.5744 cv
435.925 95.5744 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 6878 1013 <00020052ffed03a605210030004200bd4013292e012a0501290401290301
2a2601260a0144b8ffc040200f024d60440131080d014d31100c0d014c1d
7a3101393149316931032b310131b8022c4009000e0e200070000200b8ff
e0b30f024d00b8ffe0b40f014d003bb8fff8b30d014d3bb8fff040120c0d
014c753b01363b463b663b03243b013bb8022b400e2f25012540f2202007
36f42a5318b80108b10756003fed3fed12392fed012f5de15d5d5d2b2bc4
2b2b5d392f10e15d5d5d322b2b31305d2b005d5d015d5d5d5d01140e0423
222e0435343e0233321e0233323e0237060623222e0235343e0233321e04
07342e0223220e0215141e0233323603a61430517ba9702b51412c140903
060b080b283d5233618b582c023594606c935927326aa472517d5c402711
af2242603f415c3b1c19385a424b8c02ba54ac9f8b683b0b1012121f1a16
1a0e050f120f4b7ea65c1f303b668c53569b7646294d6d8aa14680af6c30
2f4f64353b6244252d00>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/nine 1013 def
end
XZAJVP+CALIBRI /Encoding get
dup 57 /nine put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 5{/.notdef}rp /eight /nine 43{/.notdef}rp 
/e 2{/.notdef}rp /h 9{/.notdef}rp /r /s 140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
414.365 100.974 mo
(9)sh
145.605 79.7345 mo
145.605 38.4845 li
145.605 38.3528 145.658 38.224 145.751 38.1309 cv
145.844 38.0378 145.973 37.9845 146.105 37.9845 cv
212.105 37.9845 li
212.381 37.9845 212.605 38.2083 212.605 38.4845 cv
212.605 38.7606 212.381 38.9844 212.105 38.9844 cv
146.605 38.9844 li
146.605 79.7345 li
146.605 80.0106 146.381 80.2344 146.105 80.2344 cv
145.829 80.2344 145.605 80.0106 145.605 79.7345 cv
1 /0 /CSD get_res sepcs
.749 sep
f
212.105 35.4845 mo
218.855 38.4845 li
212.105 40.7345 li
212.105 35.4845 li
cp
ef
254.515 38.5145 mo
253.765 38.5145 li
253.764 34.1974 251.953 30.2944 249.011 27.4569 cv
246.068 24.6215 242.003 22.8647 237.505 22.8644 cv
233.007 22.8647 228.942 24.6215 225.999 27.4569 cv
223.057 30.2944 221.246 34.1974 221.245 38.5145 cv
221.246 42.8315 223.057 46.7346 225.999 49.572 cv
228.942 52.4076 233.007 54.1644 237.505 54.1645 cv
242.003 54.1644 246.068 52.4076 249.011 49.572 cv
251.953 46.7346 253.764 42.8315 253.765 38.5145 cv
254.515 38.5145 li
255.265 38.5145 li
255.266 43.2575 253.267 47.5543 250.052 50.652 cv
246.837 53.7513 242.397 55.6645 237.505 55.6644 cv
232.613 55.6645 228.173 53.7513 224.958 50.652 cv
221.743 47.5543 219.744 43.2575 219.745 38.5145 cv
219.744 33.7715 221.743 29.4746 224.958 26.377 cv
228.173 23.2776 232.613 21.3644 237.505 21.3645 cv
242.397 21.3644 246.837 23.2776 250.052 26.377 cv
253.267 29.4746 255.266 33.7715 255.265 38.5145 cv
254.515 38.5145 li
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 3304 970 <0002006bffed03bd0520003400480099b9004affc040170f024d604a012b
753f01663f01433f01343f01243f013fb8024340140c1c1c0c7a35016a35
014b35013a35012b350135b80243b670000120000100b8ffe0b30f014d00
b8ffe8b70f024d00300c010cb8fffa400a0f024d0c3aff30300526b80100
b2135944b80115b1055f003fed3fed12392fed012f2b5dd42b2b5d5de15d
5d5d5d5d12392f10e15d5d5d5d5d3231305d2b01140e0223222e0435343e
0433321e0615140e0223222e0223220e02073e0333321e0207342e022322
0e0207141e0233323e0203bd346ca671517c5c3d2510122e4f77a66e254c
402c0e07040201070b090b26364d335d865529031a414d563169905926ae
17365a42254a453f1a213f5e3f405e3e1d01a3559f7949284a6c8aa45e53
aa9e8b673c090f120b0d0f130e121a10080e110e4c80a95c0f1e180f3965
89603a5f42240d171f1281ae692d30516500>XZAJVP+CALIBRI AddT42Char 
2 6528 1010 <ffff006bffed03bd0520020603ca0000>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/six 1010 def
end
XZAJVP+CALIBRI /Encoding get
dup 54 /six put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /.notdef /eight 
/nine 43{/.notdef}rp /e 2{/.notdef}rp /h 9{/.notdef}rp /r /s 
140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
232.945 43.9145 mo
(6)sh
254.105 39.9845 mo
304.355 39.9845 li
1 /0 /CSD get_res sepcs
.749 sep
@
303.605 37.7345 mo
311.105 39.9845 li
303.605 42.2345 li
303.605 37.7345 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
275.075 33.9645 mo
(s)sh
345.225 38.0245 mo
345.225 28.9745 337.605 21.6245 328.215 21.6245 cv
318.825 21.6245 311.205 28.9745 311.205 38.0245 cv
311.205 47.0845 318.825 54.4245 328.215 54.4245 cv
337.605 54.4245 345.225 47.0845 345.225 38.0245 cv
.485023 0 .949828 0 cmyk
ef
345.225 38.0245 mo
344.475 38.0245 li
344.474 33.7127 342.663 29.8093 339.721 26.9706 cv
336.778 24.1337 332.713 22.3746 328.215 22.3745 cv
323.717 22.3746 319.652 24.1337 316.709 26.9706 cv
313.767 29.8093 311.956 33.7127 311.955 38.0245 cv
311.956 42.3414 313.767 46.2446 316.709 49.0819 cv
319.652 51.9175 323.717 53.6743 328.215 53.6745 cv
332.713 53.6743 336.778 51.9175 339.721 49.0819 cv
342.663 46.2446 344.474 42.3416 344.475 38.0245 cv
345.225 38.0245 li
345.975 38.0245 li
345.975 42.7675 343.977 47.0644 340.762 50.162 cv
337.547 53.2614 333.107 55.1746 328.215 55.1745 cv
323.323 55.1746 318.883 53.2614 315.668 50.162 cv
312.453 47.0644 310.454 42.7675 310.455 38.0245 cv
310.454 33.2862 312.453 28.9896 315.668 25.8909 cv
318.883 22.7903 323.323 20.8745 328.215 20.8745 cv
333.107 20.8743 337.547 22.7903 340.762 25.8909 cv
343.977 28.9896 345.975 33.2862 345.975 38.0245 cv
345.225 38.0245 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 6544 1011 <00010063fffa03af050e001f00d7b90011ffe8400a1121014c111010014d
11b8ffe8b30f014d11b8fff0b30d014d11b8ffe8b30c014d11b8fff8400a
0b014d74110126110110b8ffe8400a1121014c101010014d10b8ffe8b30f
014d10b8fff0b30d014d10b8ffe8400b0b0c014c75100126100106b8fff0
b30b014d21b8ffc0b60f024d60210100b8ffc0b310014d00b8ffd8b40b01
4d0015b8ffc0b30c014d15b8ffe8b30b014d15b8ffe8b30f014d15b8ffe0
b50f024d150511b8012db31a510b55003f3fed32012f2b2b2b2bcd2b2b31
305d2b2b5d5d2b2b2b2b2b5d5d2b2b2b2b2b2b01140e0207010e03232226
2636370121222635343e023321321e0203af03050906fe2e050f17241a22
2611020601eafd931313050a0e0902f20e150b0604c4121d1b190efbce0c
0f0903060d130d044a2824131c130906121c>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/seven 1011 def
end
XZAJVP+CALIBRI /Encoding get
dup 55 /seven put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 43{/.notdef}rp /e 2{/.notdef}rp /h 9{/.notdef}rp /r /s 
140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
323.655 43.4245 mo
(7)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 1556 349 <00020085fffa0151052f00150021008cb73f234f236f230316b8ffe8b30d
014d16b8fff6b30c014d16b8ffe8b313014d16b8ffe0b310014d16b8fff0
b30f014d16b8ffe8b30b014d16bb0271001c0015fff0b30d014d15b8fff6
b30c014d15b8ffe8b30b014d15b8fff0b40f10014c15b801f8b60a1f400f
014d1fb8013eb4191049054c003f3fd6ed2b012fe12b2b2b2bd4e12b2b2b
2b2b2b31305d25140e0223222e023511343e0233321e0215131406232226
353436333216013e08122019182013070713201819201208132c3b3a2b2c
3b3a2b19080b080404080b080384070c080404080c0701303a2a29393a2a
2900>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/i 349 def
end
XZAJVP+CALIBRI /Encoding get
dup 105 /i put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six /seven /eight 
/nine 43{/.notdef}rp /e 2{/.notdef}rp /h /i 8{/.notdef}rp /r 
/s 140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
176.375 32.8845 mo
(i)sh
163.805 181.304 mo
163.055 181.304 li
163.054 176.987 161.243 173.084 158.301 170.247 cv
155.358 167.411 151.293 165.655 146.795 165.654 cv
142.297 165.655 138.232 167.411 135.289 170.247 cv
132.347 173.084 130.536 176.987 130.535 181.304 cv
130.536 185.616 132.347 189.52 135.289 192.358 cv
138.232 195.195 142.297 196.954 146.795 196.954 cv
151.293 196.954 155.358 195.195 158.301 192.358 cv
161.243 189.52 163.054 185.616 163.055 181.304 cv
163.805 181.304 li
164.555 181.304 li
164.556 186.043 162.557 190.339 159.342 193.438 cv
156.127 196.539 151.687 198.455 146.795 198.454 cv
141.903 198.455 137.463 196.539 134.248 193.438 cv
131.033 190.339 129.034 186.043 129.035 181.304 cv
129.034 176.561 131.033 172.265 134.248 169.167 cv
137.463 166.068 141.903 164.154 146.795 164.154 cv
151.687 164.154 156.127 166.068 159.342 169.167 cv
162.557 172.265 164.556 176.561 164.555 181.304 cv
163.805 181.304 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 5284 1007 <00010067ffed0392052100580105b9005affc0401c0f024d605a01310810
014d31100f014d31100c0d014c31200b014d31b80235400a4e53264e4e18
13014d40b8ffe840260f014d26200f014d40264e4e2640030e1b0810014d
1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8022db500
080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b30f014d0e
b8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ffc0b30f01
4d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf320200549
5316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b5d2b2b01
2f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910e12b2b2b
2b31305d2b01140e0223222e0635343633321e0233323e0235342e022323
222e0235343e023333323e0235342e0223220e0223222e0235343e063332
1e0215140e0207151e0303923e74aa6b4171583a0f0806030e0d0935536f
44426444222b53794d7b080f0b07060b0e0971426949271a3451353a614c
320a070b0703020608133a556f405a885b2d203e5a3b436f502d0172598f
6637151d1f0e0e141d15241c202520223e55323758402207101a1513190f
07224059372849361f232823050f1b160f17110e132423182e5475473d69
51390b020735506b>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/three 1007 def
end
XZAJVP+CALIBRI /Encoding get
dup 51 /three put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two /three 2{/.notdef}rp /six /seven 
/eight /nine 43{/.notdef}rp /e 2{/.notdef}rp /h /i 8{/.notdef}rp 
/r /s 140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
142.235 186.704 mo
(3)sh
164.105 182.484 mo
213.605 182.484 li
1 /0 /CSD get_res sepcs
.749 sep
@
212.855 180.234 mo
220.355 182.484 li
212.855 184.734 li
212.855 180.234 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
186.255 179.624 mo
(h)sh
254.515 181.304 mo
253.765 181.304 li
253.764 176.987 251.953 173.084 249.011 170.247 cv
246.068 167.411 242.003 165.655 237.505 165.654 cv
233.007 165.655 228.942 167.411 225.999 170.247 cv
223.057 173.084 221.246 176.987 221.245 181.304 cv
221.245 185.616 223.057 189.52 225.999 192.358 cv
228.942 195.195 233.007 196.954 237.505 196.954 cv
242.003 196.954 246.068 195.195 249.011 192.358 cv
251.953 189.52 253.764 185.616 253.765 181.304 cv
254.515 181.304 li
255.265 181.304 li
255.265 186.043 253.267 190.339 250.052 193.438 cv
246.837 196.539 242.397 198.455 237.505 198.454 cv
232.613 198.455 228.173 196.539 224.958 193.438 cv
221.743 190.339 219.744 186.043 219.745 181.304 cv
219.744 176.561 221.743 172.265 224.958 169.167 cv
228.173 166.068 232.613 164.154 237.505 164.154 cv
242.397 164.154 246.837 166.068 250.052 169.167 cv
253.267 172.265 255.266 176.561 255.265 181.304 cv
254.515 181.304 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 5772 1008 <00020030fffa03d30514002a002e00fb403a252e01262d01272c01242701
242601251c01261b01231a01241901251801251701261601261501261401
261001260f012405012404012b1b0130b8ffc040120f024d6030012d1618
0f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c2e2e10b8
fffc401d0f024d101810014d10100f014d10100d014d100a0c014d10100b
014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8ffe0400a
0b014d0404302f271b2eb8010b400a042b2110100a21520a55003f3f1239
2f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133cd2b2b2b
2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d011406
232311140e0223222e02351121222e0235343e0237013e0333321e021511
3332160123012103d31412920814201918201307fdea0c100d0502060a07
01d205131e2c1e21311e10921115fea102fe5b01a701702126fef0080b08
0404080b08011006101e18131e19170d0312080c080305080d09fcc62302
e9fd3a00>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/four 1008 def
end
XZAJVP+CALIBRI /Encoding get
dup 52 /four put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/seven /eight /nine 43{/.notdef}rp /e 2{/.notdef}rp /h /i 
8{/.notdef}rp /r /s 140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
232.945 186.704 mo
(4)sh
254.105 182.484 mo
304.355 182.484 li
1 /0 /CSD get_res sepcs
.749 sep
@
303.605 180.234 mo
311.105 182.484 li
303.605 184.734 li
303.605 180.234 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
274.325 178.204 mo
(e)sh
345.225 180.814 mo
345.225 171.755 337.605 164.415 328.215 164.415 cv
318.825 164.415 311.205 171.755 311.205 180.814 cv
311.205 189.875 318.825 197.215 328.215 197.215 cv
337.605 197.215 345.225 189.875 345.225 180.814 cv
.485023 0 .949828 0 cmyk
ef
345.225 180.814 mo
344.475 180.814 li
344.474 176.497 342.663 172.594 339.721 169.757 cv
336.778 166.921 332.713 165.165 328.215 165.164 cv
323.717 165.165 319.652 166.921 316.709 169.757 cv
313.767 172.594 311.956 176.497 311.955 180.814 cv
311.956 185.131 313.767 189.035 316.709 191.872 cv
319.652 194.708 323.717 196.464 328.215 196.464 cv
332.713 196.464 336.778 194.708 339.721 191.872 cv
342.663 189.035 344.474 185.131 344.475 180.814 cv
345.225 180.814 li
345.975 180.814 li
345.975 185.557 343.977 189.854 340.762 192.952 cv
337.547 196.051 333.107 197.965 328.215 197.964 cv
323.323 197.965 318.883 196.051 315.668 192.952 cv
312.453 189.854 310.454 185.557 310.455 180.814 cv
310.454 176.072 312.453 171.775 315.668 168.677 cv
318.883 165.578 323.323 163.664 328.215 163.664 cv
333.107 163.664 337.547 165.578 340.762 168.677 cv
343.977 171.775 345.975 176.072 345.975 180.814 cv
345.225 180.814 li
1 /0 /CSD get_res sepcs
.749 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if
2 6166 1009 <00010065ffed0396050e003e00c1400d27370127360126080126030140b8
ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c37ba0211
0028ffc0402810014d28400f014d280e4f326f327f3203321d1810014d1d
100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f024d00b8ff
c0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c3af42022
012222052c5118b8010bb10556003fed3f12392f5ded10ed11392f2b0110
d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d5d01140e
0223222e0635343e0233321e0233323e0235342e02232206232226351134
363321321e02151406232111363633321e0203964680b16c3c6c54360f06
050203080b070a2a4769484370512e27517c563d58261c181f1d023d080f
0a051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b11
08191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe95050235
618a>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/five 1009 def
end
XZAJVP+CALIBRI /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 43{/.notdef}rp /e 2{/.notdef}rp /h /i 
8{/.notdef}rp /r /s 140{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [18 0 0 -18 0 0 ]msf
323.655 186.214 mo
(5)sh
56.105 181.984 mo
122.105 181.984 li
122.381 181.984 122.605 182.208 122.605 182.484 cv
122.605 182.761 122.381 182.984 122.105 182.984 cv
56.105 182.984 li
55.8289 182.984 55.6049 182.761 55.6049 182.484 cv
55.6049 182.208 55.8289 181.984 56.105 181.984 cv
1 /0 /CSD get_res sepcs
.749 sep
f
121.355 180.234 mo
128.855 182.484 li
121.355 185.484 li
121.355 180.234 li
cp
ef
57.6049 184.484 mo
57.3288 184.484 57.105 184.261 57.105 183.984 cv
57.105 182.984 li
58.105 182.984 li
58.105 183.984 li
58.105 184.261 57.8811 184.484 57.6049 184.484 cv
58.105 181.984 mo
57.105 181.984 li
57.105 113.484 li
57.105 113.208 57.3288 112.984 57.6049 112.984 cv
57.8811 112.984 58.105 113.208 58.105 113.484 cv
58.105 181.984 li
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
.0976547 sep
f
58.105 182.984 mo
57.105 182.984 li
57.105 181.984 li
58.105 181.984 li
58.105 182.984 li
1 /1 /CSD get_res sepcs
.47451 sep
f
56.105 182.484 mo
56.105 111.984 li
1 /0 /CSD get_res sepcs
.749 sep
@
1 /0 /CSD get_res sepcs
1 sep
XZAJVP+CALIBRI*1 [13.9997 0 0 -13.9997 0 0 ]msf
85.325 180.284 mo
(s)sh
83.105 104.098 mo
83.105 103.348 li
87.5987 103.28 li
87.6006 103.28 87.6026 103.28 87.6046 103.28 cv
87.809 103.28 87.9762 103.444 87.9793 103.649 cv
87.9825 103.856 87.8171 104.027 87.6101 104.03 cv
83.105 104.098 li
91.3539 103.973 mo
91.1494 103.973 90.982 103.809 90.979 103.604 cv
90.9759 103.397 91.1412 103.226 91.3482 103.223 cv
96.5977 103.144 li
96.5996 103.144 96.6015 103.144 96.6034 103.144 cv
96.8079 103.144 96.9751 103.308 96.9783 103.513 cv
96.9814 103.72 96.8161 103.89 96.6091 103.894 cv
91.3596 103.973 li
91.3577 103.973 91.3558 103.973 91.3539 103.973 cv
100.353 103.837 mo
100.148 103.837 99.981 103.673 99.978 103.467 cv
99.9748 103.26 100.14 103.09 100.347 103.087 cv
105.597 103.007 li
105.599 103.007 105.601 103.007 105.603 103.007 cv
105.807 103.007 105.974 103.172 105.977 103.377 cv
105.98 103.584 105.815 103.754 105.608 103.757 cv
100.359 103.837 li
100.357 103.837 100.355 103.837 100.353 103.837 cv
109.352 103.7 mo
109.147 103.7 108.98 103.536 108.977 103.331 cv
108.974 103.124 109.139 102.954 109.346 102.95 cv
114.596 102.871 li
114.598 102.871 114.6 102.871 114.601 102.871 cv
114.806 102.871 114.973 103.035 114.976 103.24 cv
114.979 103.447 114.814 103.618 114.607 103.621 cv
109.357 103.7 li
109.356 103.7 109.354 103.7 109.352 103.7 cv
118.351 103.564 mo
118.146 103.564 117.979 103.4 117.976 103.195 cv
117.973 102.988 118.138 102.817 118.345 102.814 cv
123.595 102.735 li
123.596 102.735 123.598 102.735 123.6 102.735 cv
123.805 102.735 123.972 102.899 123.975 103.104 cv
123.978 103.311 123.813 103.481 123.606 103.485 cv
118.356 103.564 li
118.355 103.564 118.353 103.564 118.351 103.564 cv
127.35 103.428 mo
127.145 103.428 126.978 103.263 126.975 103.058 cv
126.972 102.851 127.137 102.681 127.344 102.678 cv
130.388 102.632 li
130.496 102.883 130.611 103.131 130.731 103.377 cv
127.355 103.428 li
127.354 103.428 127.352 103.428 127.35 103.428 cv
132.229 103.017 mo
132.169 102.901 132.11 102.784 132.053 102.666 cv
132.158 102.731 132.228 102.846 132.23 102.979 cv
132.23 102.992 132.23 103.004 132.229 103.017 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
130.731 103.377 mo
130.611 103.131 130.496 102.883 130.388 102.632 cv
131.849 102.609 li
131.851 102.609 131.853 102.609 131.855 102.609 cv
131.927 102.609 131.995 102.63 132.053 102.666 cv
132.11 102.784 132.169 102.901 132.229 103.017 cv
132.212 103.206 132.055 103.356 131.861 103.359 cv
130.731 103.377 li
1 /1 /CSD get_res sepcs
.47451 sep
f
83.105 106.734 mo
73.355 103.734 li
83.105 99.9844 li
83.105 103.348 li
82.3494 103.359 li
82.1422 103.363 81.9769 103.533 81.98 103.74 cv
81.9831 103.945 82.1503 104.109 82.3547 104.109 cv
82.3566 104.109 82.3586 104.109 82.3606 104.109 cv
83.105 104.098 li
83.105 106.734 li
1 /1 /CSD get_res sepcs
.0976547 sep
f
82.3547 104.109 mo
82.1503 104.109 81.9831 103.945 81.98 103.74 cv
81.9769 103.533 82.1422 103.363 82.3494 103.359 cv
83.105 103.348 li
83.105 104.098 li
82.3606 104.109 li
82.3586 104.109 82.3566 104.109 82.3547 104.109 cv
1 /1 /CSD get_res sepcs
.146867 sep
f
.75 lw
[5.25 3.75 ] 0 dsh
80.855 102.234 mo
130.355 101.484 li
1 /0 /CSD get_res sepcs
.749 sep
@
82.355 105.234 mo
71.855 102.234 li
81.605 98.4845 li
82.355 105.234 li
cp
ef
142.262 119.575 mo
141.772 119.575 141.281 119.574 140.791 119.572 cv
140.584 119.571 140.417 119.402 140.418 119.195 cv
140.419 118.989 140.586 118.822 140.793 118.822 cv
140.793 118.822 140.794 118.822 140.794 118.822 cv
141.283 118.824 141.773 118.825 142.262 118.825 cv
143.521 118.825 144.781 118.818 146.04 118.805 cv
146.041 118.805 146.043 118.805 146.044 118.805 cv
146.249 118.805 146.417 118.971 146.419 119.176 cv
146.421 119.383 146.255 119.553 146.048 119.555 cv
144.786 119.568 143.524 119.575 142.262 119.575 cv
137.042 119.537 mo
137.04 119.537 137.039 119.537 137.037 119.537 cv
137.037 119.537 li
135.282 119.512 133.529 119.475 131.781 119.424 cv
131.574 119.418 131.411 119.245 131.417 119.038 cv
131.423 118.835 131.589 118.674 131.792 118.674 cv
131.795 118.674 131.799 118.674 131.803 118.674 cv
133.547 118.725 135.296 118.762 137.047 118.787 cv
137.255 118.79 137.42 118.961 137.417 119.168 cv
137.414 119.373 137.247 119.537 137.042 119.537 cv
149.793 119.497 mo
149.59 119.497 149.423 119.334 149.419 119.13 cv
149.414 118.923 149.579 118.752 149.786 118.747 cv
151.535 118.712 153.284 118.663 155.029 118.603 cv
155.033 118.602 155.038 118.602 155.042 118.602 cv
155.243 118.602 155.41 118.762 155.417 118.964 cv
155.424 119.171 155.262 119.345 155.055 119.352 cv
153.306 119.413 151.554 119.461 149.801 119.497 cv
149.799 119.497 149.796 119.497 149.793 119.497 cv
128.043 119.296 mo
128.038 119.296 128.033 119.296 128.028 119.296 cv
126.271 119.227 124.52 119.144 122.775 119.049 cv
122.569 119.038 122.41 118.861 122.421 118.654 cv
122.432 118.454 122.598 118.3 122.796 118.3 cv
122.802 118.3 122.809 118.3 122.816 118.3 cv
124.557 118.395 126.305 118.477 128.057 118.547 cv
128.264 118.555 128.425 118.729 128.417 118.936 cv
128.409 119.138 128.243 119.296 128.043 119.296 cv
158.787 119.203 mo
158.588 119.203 158.422 119.046 158.413 118.845 cv
158.403 118.638 158.564 118.462 158.77 118.453 cv
160.521 118.374 162.267 118.282 164.008 118.178 cv
164.015 118.178 164.023 118.178 164.03 118.178 cv
164.227 118.178 164.392 118.331 164.404 118.53 cv
164.417 118.737 164.259 118.915 164.052 118.927 cv
162.308 119.031 160.558 119.123 158.804 119.202 cv
158.799 119.203 158.793 119.203 158.787 119.203 cv
119.051 118.825 mo
119.043 118.825 119.034 118.824 119.026 118.824 cv
117.269 118.708 115.52 118.58 113.781 118.438 cv
113.574 118.421 113.421 118.24 113.438 118.033 cv
113.454 117.837 113.618 117.689 113.811 117.689 cv
113.821 117.689 113.832 117.689 113.842 117.69 cv
115.577 117.832 117.322 117.96 119.075 118.075 cv
119.282 118.089 119.439 118.268 119.425 118.474 cv
119.412 118.673 119.247 118.825 119.051 118.825 cv
167.768 118.684 mo
167.573 118.684 167.409 118.533 167.395 118.336 cv
167.38 118.129 167.536 117.95 167.742 117.935 cv
169.493 117.812 171.236 117.676 172.97 117.527 cv
172.981 117.526 172.992 117.526 173.003 117.526 cv
173.195 117.526 173.359 117.673 173.376 117.869 cv
173.394 118.075 173.241 118.257 173.034 118.274 cv
171.296 118.423 169.549 118.56 167.795 118.683 cv
167.786 118.684 167.777 118.684 167.768 118.684 cv
110.074 118.111 mo
110.062 118.111 110.051 118.11 110.039 118.109 cv
108.284 117.945 106.54 117.767 104.809 117.574 cv
104.603 117.551 104.455 117.366 104.478 117.16 cv
104.499 116.968 104.661 116.827 104.85 116.827 cv
104.864 116.827 104.878 116.827 104.892 116.829 cv
106.618 117.021 108.358 117.199 110.109 117.363 cv
110.315 117.382 110.466 117.565 110.447 117.771 cv
110.429 117.965 110.265 118.111 110.074 118.111 cv
176.731 117.935 mo
176.54 117.935 176.377 117.79 176.358 117.596 cv
176.338 117.39 176.489 117.207 176.695 117.187 cv
178.445 117.017 180.184 116.835 181.911 116.639 cv
181.926 116.637 181.94 116.637 181.954 116.637 cv
182.142 116.637 182.305 116.778 182.326 116.969 cv
182.35 117.175 182.202 117.361 181.996 117.384 cv
180.264 117.58 178.521 117.763 176.768 117.933 cv
176.755 117.935 176.743 117.935 176.731 117.935 cv
101.126 117.138 mo
101.111 117.138 101.095 117.138 101.08 117.136 cv
99.3271 116.918 97.5894 116.686 95.8686 116.438 cv
95.6635 116.409 95.5211 116.219 95.5506 116.014 cv
95.5775 115.827 95.7379 115.692 95.9215 115.692 cv
95.9392 115.692 95.9571 115.693 95.9752 115.696 cv
97.6912 115.942 99.4242 116.174 101.172 116.391 cv
101.378 116.417 101.524 116.604 101.498 116.81 cv
101.474 117 101.313 117.138 101.126 117.138 cv
185.677 116.942 mo
185.491 116.942 185.33 116.803 185.306 116.614 cv
185.28 116.408 185.426 116.221 185.631 116.195 cv
187.378 115.976 189.111 115.743 190.829 115.497 cv
190.847 115.494 190.865 115.493 190.882 115.493 cv
191.066 115.493 191.226 115.628 191.253 115.815 cv
191.282 116.02 191.14 116.21 190.935 116.239 cv
189.213 116.486 187.475 116.719 185.724 116.939 cv
185.709 116.941 185.693 116.942 185.677 116.942 cv
92.2139 115.882 mo
92.1944 115.882 92.1747 115.881 92.1548 115.878 cv
90.4067 115.601 88.6779 115.308 86.9703 115 cv
86.7664 114.963 86.631 114.768 86.6678 114.564 cv
86.7006 114.383 86.8585 114.256 87.0364 114.256 cv
87.0586 114.256 87.081 114.258 87.1035 114.262 cv
88.8057 114.569 90.5292 114.861 92.2722 115.137 cv
92.4767 115.169 92.6163 115.362 92.5839 115.566 cv
92.5546 115.751 92.3952 115.882 92.2139 115.882 cv
194.59 115.687 mo
194.409 115.687 194.249 115.555 194.22 115.37 cv
194.188 115.165 194.328 114.974 194.533 114.941 cv
196.275 114.668 198 114.381 199.705 114.079 cv
199.727 114.075 199.749 114.073 199.771 114.073 cv
199.949 114.073 200.107 114.201 200.139 114.383 cv
200.175 114.587 200.039 114.782 199.835 114.818 cv
198.125 115.12 196.396 115.408 194.649 115.682 cv
194.629 115.685 194.61 115.687 194.59 115.687 cv
83.3523 114.309 mo
83.3281 114.309 83.3037 114.307 83.2791 114.302 cv
81.5383 113.957 79.8219 113.596 78.1324 113.217 cv
77.9303 113.172 77.8032 112.971 77.8484 112.769 cv
77.8875 112.595 78.0424 112.476 78.2141 112.476 cv
78.2413 112.476 78.2688 112.479 78.2964 112.485 cv
79.9796 112.863 81.6897 113.223 83.4247 113.566 cv
83.6279 113.606 83.7599 113.803 83.7197 114.007 cv
83.6844 114.185 83.5277 114.309 83.3523 114.309 cv
203.458 114.143 mo
203.282 114.143 203.125 114.018 203.09 113.839 cv
203.051 113.636 203.184 113.439 203.388 113.4 cv
205.123 113.066 206.836 112.717 208.524 112.354 cv
208.551 112.348 208.578 112.345 208.604 112.345 cv
208.777 112.345 208.932 112.465 208.97 112.641 cv
209.014 112.844 208.885 113.043 208.682 113.087 cv
206.989 113.452 205.27 113.802 203.529 114.136 cv
203.505 114.141 203.481 114.143 203.458 114.143 cv
212.263 112.274 mo
212.092 112.274 211.938 112.157 211.898 111.984 cv
211.851 111.782 211.976 111.58 212.178 111.533 cv
213.903 111.13 215.599 110.71 217.265 110.275 cv
217.297 110.266 217.328 110.262 217.36 110.262 cv
217.526 110.262 217.678 110.374 217.723 110.542 cv
217.775 110.743 217.655 110.948 217.455 111 cv
215.783 111.438 214.08 111.859 212.348 112.264 cv
212.32 112.27 212.291 112.274 212.263 112.274 cv
220.978 110.025 mo
220.814 110.025 220.664 109.918 220.617 109.753 cv
220.561 109.553 220.676 109.346 220.876 109.289 cv
222.229 108.905 223.559 108.509 224.865 108.101 cv
224.896 108.132 224.927 108.162 224.958 108.192 cv
225.134 108.361 225.313 108.527 225.496 108.689 cv
224.054 109.144 222.581 109.584 221.081 110.011 cv
221.046 110.021 221.012 110.025 220.978 110.025 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
225.496 108.689 mo
225.313 108.527 225.134 108.361 224.958 108.192 cv
224.927 108.162 224.896 108.132 224.865 108.101 cv
225.209 107.994 225.551 107.886 225.891 107.777 cv
225.929 107.765 225.967 107.759 226.005 107.759 cv
226.164 107.759 226.311 107.861 226.362 108.02 cv
226.425 108.217 226.316 108.429 226.119 108.492 cv
225.912 108.558 225.704 108.624 225.496 108.689 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
76.355 115.734 mo
67.355 110.485 li
77.855 109.734 li
77.4919 111.187 li
77.2797 111.14 77.0678 111.093 76.8564 111.045 cv
76.8288 111.039 76.8012 111.036 76.7741 111.036 cv
76.6024 111.036 76.4475 111.155 76.4084 111.329 cv
76.3631 111.531 76.4902 111.732 76.6923 111.777 cv
76.8979 111.823 77.1036 111.869 77.31 111.915 cv
76.355 115.734 li
1 /1 /CSD get_res sepcs
.0976547 sep
f
224.679 107.052 mo
223.038 107.576 221.358 108.083 219.641 108.571 cv
219.441 108.628 219.234 108.512 219.177 108.313 cv
219.121 108.114 219.236 107.906 219.435 107.849 cv
221.145 107.364 222.818 106.859 224.451 106.337 cv
224.648 106.274 224.859 106.383 224.922 106.58 cv
224.985 106.778 224.876 106.988 224.679 107.052 cv
224.679 107.052 li
216.015 109.56 mo
214.343 109.998 212.64 110.419 210.908 110.824 cv
210.707 110.871 210.505 110.746 210.458 110.544 cv
210.411 110.342 210.536 110.14 210.738 110.093 cv
212.463 109.69 214.16 109.271 215.825 108.834 cv
216.025 108.782 216.23 108.902 216.282 109.102 cv
216.335 109.303 216.215 109.508 216.015 109.56 cv
207.242 111.647 mo
205.549 112.012 203.83 112.362 202.089 112.696 cv
201.886 112.736 201.689 112.602 201.65 112.399 cv
201.611 112.195 201.744 111.999 201.948 111.96 cv
203.683 111.626 205.396 111.277 207.084 110.913 cv
207.287 110.87 207.486 110.999 207.53 111.201 cv
207.574 111.404 207.445 111.603 207.242 111.647 cv
198.395 113.378 mo
196.685 113.68 194.956 113.968 193.209 114.242 cv
193.004 114.274 192.812 114.135 192.78 113.93 cv
192.748 113.725 192.888 113.533 193.093 113.501 cv
194.835 113.228 196.56 112.941 198.265 112.639 cv
198.469 112.603 198.663 112.739 198.699 112.943 cv
198.735 113.147 198.599 113.342 198.395 113.378 cv
189.495 114.799 mo
187.773 115.046 186.035 115.28 184.284 115.499 cv
184.079 115.525 183.892 115.379 183.866 115.174 cv
183.84 114.968 183.986 114.781 184.191 114.755 cv
185.938 114.536 187.671 114.303 189.389 114.057 cv
189.594 114.028 189.784 114.17 189.813 114.375 cv
189.842 114.58 189.7 114.77 189.495 114.799 cv
180.556 115.944 mo
178.824 116.14 177.081 116.323 175.328 116.493 cv
175.122 116.513 174.938 116.363 174.918 116.156 cv
174.898 115.95 175.049 115.767 175.255 115.747 cv
177.005 115.577 178.744 115.395 180.471 115.199 cv
180.677 115.176 180.863 115.324 180.886 115.529 cv
180.91 115.735 180.762 115.921 180.556 115.944 cv
171.594 116.834 mo
169.856 116.984 168.109 117.12 166.355 117.243 cv
166.149 117.258 165.969 117.102 165.955 116.896 cv
165.94 116.689 166.096 116.51 166.302 116.495 cv
168.052 116.372 169.796 116.236 171.53 116.087 cv
171.737 116.069 171.918 116.222 171.936 116.429 cv
171.954 116.635 171.801 116.817 171.594 116.834 cv
162.612 117.487 mo
160.868 117.591 159.118 117.683 157.364 117.762 cv
157.157 117.772 156.982 117.611 156.973 117.404 cv
156.963 117.198 157.124 117.022 157.33 117.013 cv
159.081 116.934 160.827 116.842 162.568 116.738 cv
162.774 116.726 162.952 116.884 162.964 117.09 cv
162.977 117.297 162.819 117.475 162.612 117.487 cv
153.615 117.912 mo
151.866 117.973 150.114 118.021 148.361 118.057 cv
148.154 118.062 147.983 117.897 147.979 117.69 cv
147.974 117.483 148.139 117.312 148.346 117.308 cv
150.095 117.272 151.844 117.223 153.589 117.162 cv
153.796 117.155 153.969 117.317 153.977 117.524 cv
153.984 117.731 153.822 117.905 153.615 117.912 cv
144.607 118.115 mo
143.346 118.128 142.084 118.135 140.822 118.135 cv
140.332 118.135 139.841 118.134 139.351 118.132 cv
139.144 118.131 138.977 117.962 138.978 117.755 cv
138.979 117.548 139.147 117.381 139.354 117.382 cv
139.843 117.384 140.333 117.385 140.822 117.385 cv
142.081 117.385 143.34 117.378 144.6 117.365 cv
144.807 117.363 144.976 117.529 144.979 117.736 cv
144.981 117.943 144.815 118.113 144.608 118.115 cv
144.607 118.115 li
135.597 118.097 mo
133.842 118.072 132.089 118.035 130.341 117.984 cv
130.134 117.978 129.971 117.805 129.977 117.598 cv
129.983 117.391 130.155 117.228 130.363 117.234 cv
132.107 117.285 133.856 117.322 135.608 117.347 cv
135.815 117.35 135.98 117.521 135.977 117.728 cv
135.974 117.935 135.804 118.1 135.597 118.097 cv
126.588 117.856 mo
124.831 117.787 123.08 117.704 121.335 117.609 cv
121.129 117.598 120.97 117.421 120.981 117.214 cv
120.993 117.008 121.169 116.849 121.376 116.86 cv
123.117 116.955 124.865 117.037 126.617 117.106 cv
126.824 117.115 126.985 117.289 126.977 117.496 cv
126.969 117.703 126.795 117.864 126.588 117.856 cv
117.586 117.384 mo
115.829 117.269 114.08 117.14 112.341 116.997 cv
112.134 116.981 111.981 116.8 111.998 116.593 cv
112.015 116.387 112.196 116.233 112.402 116.25 cv
114.137 116.392 115.882 116.52 117.635 116.635 cv
117.842 116.649 117.998 116.828 117.985 117.034 cv
117.971 117.241 117.793 117.398 117.586 117.384 cv
108.599 116.669 mo
106.844 116.505 105.1 116.327 103.369 116.134 cv
103.163 116.111 103.015 115.926 103.038 115.72 cv
103.061 115.514 103.246 115.366 103.452 115.389 cv
105.178 115.581 106.918 115.759 108.669 115.923 cv
108.875 115.942 109.026 116.125 109.007 116.331 cv
108.988 116.537 108.805 116.689 108.599 116.669 cv
99.6395 115.696 mo
97.887 115.478 96.1494 115.246 94.4285 114.998 cv
94.2235 114.969 94.0811 114.779 94.1106 114.574 cv
94.14 114.369 94.3301 114.227 94.5351 114.256 cv
96.2512 114.502 97.9841 114.734 99.7321 114.951 cv
99.9375 114.977 100.084 115.164 100.058 115.37 cv
100.032 115.575 99.8451 115.721 99.6395 115.696 cv
90.7147 114.438 mo
88.9667 114.161 87.2379 113.868 85.5301 113.56 cv
85.3264 113.523 85.191 113.328 85.2278 113.124 cv
85.2646 112.92 85.4596 112.785 85.6635 112.822 cv
87.3656 113.129 89.0892 113.421 90.8321 113.697 cv
91.0367 113.729 91.1762 113.922 91.1438 114.126 cv
91.1114 114.331 90.9194 114.47 90.7147 114.438 cv
81.8391 112.862 mo
80.0982 112.517 78.3819 112.156 76.6923 111.777 cv
76.4902 111.732 76.3631 111.531 76.4084 111.329 cv
76.4537 111.127 76.6543 111 76.8564 111.045 cv
78.5395 111.423 80.2497 111.783 81.9845 112.126 cv
82.1877 112.166 82.3199 112.364 82.2797 112.567 cv
82.2395 112.77 82.0422 112.902 81.8391 112.862 cv
1 /0 /CSD get_res sepcs
.749 sep
f
74.855 114.234 mo
66.605 108.984 li
76.355 108.234 li
74.855 114.234 li
cp
ef
230.105 169.359 mo
230.015 169.359 229.925 169.328 229.854 169.263 cv
228.65 168.177 li
228.872 168.038 229.097 167.905 229.326 167.776 cv
230.356 168.706 li
230.51 168.845 230.522 169.082 230.383 169.236 cv
230.309 169.318 230.207 169.359 230.105 169.359 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
228.65 168.177 mo
228.488 168.03 li
228.411 167.961 228.37 167.868 228.364 167.772 cv
228.434 167.831 228.52 167.86 228.605 167.86 cv
228.707 167.86 228.809 167.818 228.883 167.736 cv
228.953 167.658 228.985 167.56 228.979 167.464 cv
228.983 167.467 228.986 167.47 228.99 167.473 cv
229.326 167.776 li
229.097 167.905 228.872 168.038 228.65 168.177 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
225.955 165.614 mo
225.865 165.614 225.775 165.582 225.703 165.518 cv
221.806 162 li
221.73 161.931 221.688 161.838 221.683 161.743 cv
224.204 164.018 li
224.275 164.082 224.365 164.114 224.455 164.114 cv
224.557 164.114 224.659 164.073 224.733 163.99 cv
224.803 163.913 224.835 163.815 224.829 163.718 cv
226.206 164.961 li
226.36 165.1 226.372 165.337 226.233 165.491 cv
226.159 165.573 226.057 165.614 225.955 165.614 cv
219.273 159.585 mo
219.184 159.585 219.094 159.553 219.022 159.488 cv
215.124 155.971 li
215.048 155.902 215.007 155.808 215.001 155.713 cv
217.522 157.988 li
217.594 158.053 217.684 158.085 217.773 158.085 cv
217.876 158.085 217.978 158.043 218.052 157.961 cv
218.121 157.883 218.153 157.785 218.148 157.689 cv
219.524 158.931 li
219.678 159.07 219.69 159.307 219.552 159.461 cv
219.478 159.543 219.376 159.585 219.273 159.585 cv
212.592 153.555 mo
212.502 153.555 212.412 153.523 212.34 153.458 cv
212.105 153.245 li
212.332 153.114 212.558 152.982 212.785 152.849 cv
212.843 152.901 li
212.997 153.04 213.009 153.277 212.87 153.431 cv
212.796 153.513 212.694 153.555 212.592 153.555 cv
211.52 152.718 mo
208.443 149.941 li
208.367 149.872 208.325 149.779 208.32 149.684 cv
210.84 151.958 li
210.912 152.023 211.002 152.055 211.092 152.055 cv
211.194 152.055 211.296 152.013 211.37 151.931 cv
211.44 151.854 211.472 151.755 211.466 151.659 cv
212.201 152.322 li
211.974 152.454 211.747 152.586 211.52 152.718 cv
205.91 147.525 mo
205.82 147.525 205.731 147.493 205.659 147.429 cv
201.761 143.911 li
201.685 143.842 201.643 143.749 201.638 143.654 cv
204.159 145.929 li
204.231 145.993 204.32 146.025 204.41 146.025 cv
204.512 146.025 204.615 145.983 204.689 145.901 cv
204.758 145.824 204.79 145.726 204.785 145.629 cv
206.161 146.872 li
206.315 147.01 206.327 147.248 206.189 147.401 cv
206.115 147.483 206.012 147.525 205.91 147.525 cv
199.228 141.495 mo
199.139 141.495 199.049 141.464 198.977 141.399 cv
195.08 137.882 li
195.003 137.813 194.962 137.719 194.957 137.624 cv
197.477 139.899 li
197.549 139.964 197.639 139.996 197.729 139.996 cv
197.831 139.996 197.933 139.954 198.007 139.872 cv
198.077 139.794 198.108 139.696 198.103 139.6 cv
199.48 140.842 li
199.634 140.981 199.646 141.218 199.507 141.372 cv
199.433 141.454 199.331 141.495 199.228 141.495 cv
192.547 135.466 mo
192.457 135.466 192.368 135.434 192.296 135.369 cv
188.398 131.852 li
188.322 131.783 188.28 131.69 188.275 131.594 cv
190.796 133.869 li
190.868 133.934 190.957 133.966 191.047 133.966 cv
191.149 133.966 191.251 133.924 191.326 133.842 cv
191.395 133.765 191.427 133.666 191.422 133.57 cv
192.798 134.812 li
192.952 134.951 192.964 135.188 192.826 135.342 cv
192.752 135.424 192.649 135.466 192.547 135.466 cv
185.865 129.436 mo
185.776 129.436 185.686 129.404 185.614 129.34 cv
181.717 125.822 li
181.64 125.753 181.599 125.66 181.594 125.565 cv
184.114 127.84 li
184.186 127.904 184.276 127.936 184.365 127.936 cv
184.468 127.936 184.57 127.894 184.644 127.812 cv
184.714 127.735 184.745 127.637 184.74 127.54 cv
186.117 128.783 li
186.271 128.922 186.283 129.159 186.144 129.312 cv
186.07 129.394 185.968 129.436 185.865 129.436 cv
179.184 123.406 mo
179.094 123.406 179.005 123.375 178.933 123.31 cv
175.035 119.793 li
174.959 119.724 174.917 119.63 174.912 119.535 cv
177.433 121.81 li
177.504 121.875 177.594 121.907 177.684 121.907 cv
177.786 121.907 177.888 121.865 177.962 121.783 cv
178.032 121.705 178.064 121.607 178.058 121.511 cv
179.435 122.753 li
179.589 122.892 179.601 123.129 179.462 123.283 cv
179.388 123.365 179.286 123.406 179.184 123.406 cv
172.502 117.377 mo
172.413 117.377 172.323 117.345 172.251 117.28 cv
171.72 116.801 li
171.859 116.737 171.95 116.59 171.936 116.429 cv
171.919 116.233 171.755 116.086 171.563 116.086 cv
171.552 116.086 171.541 116.086 171.53 116.087 cv
171.347 116.103 171.164 116.118 170.981 116.134 cv
168.734 114.106 li
168.811 114.029 li
170.751 115.78 li
170.823 115.845 170.913 115.877 171.002 115.877 cv
171.105 115.877 171.207 115.835 171.281 115.753 cv
171.351 115.676 171.382 115.577 171.377 115.481 cv
172.754 116.723 li
172.908 116.862 172.92 117.099 172.781 117.253 cv
172.707 117.335 172.605 117.377 172.502 117.377 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
171.72 116.801 mo
170.981 116.134 li
171.164 116.118 171.347 116.103 171.53 116.087 cv
171.541 116.086 171.552 116.086 171.563 116.086 cv
171.755 116.086 171.919 116.233 171.936 116.429 cv
171.95 116.59 171.859 116.737 171.72 116.801 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
166.355 116.485 mo
161.855 107.484 li
170.855 111.984 li
169.342 113.498 li
167.356 111.706 li
167.284 111.641 167.195 111.61 167.105 111.61 cv
167.003 111.61 166.901 111.651 166.827 111.733 cv
166.688 111.887 166.7 112.124 166.854 112.263 cv
168.231 113.505 li
168.236 113.601 168.277 113.694 168.354 113.763 cv
168.734 114.106 li
166.355 116.485 li
1 /1 /CSD get_res sepcs
.0976547 sep
f
168.734 114.106 mo
168.354 113.763 li
168.277 113.694 168.236 113.601 168.231 113.505 cv
168.811 114.029 li
168.734 114.106 li
1 /1 /CSD get_res sepcs
.146867 sep
f
167.356 111.706 mo
171.254 115.223 li
171.407 115.362 171.42 115.599 171.281 115.753 cv
171.142 115.907 170.905 115.919 170.751 115.78 cv
166.854 112.263 li
166.7 112.124 166.688 111.887 166.827 111.733 cv
166.965 111.58 167.202 111.567 167.356 111.706 cv
174.038 117.736 mo
177.935 121.253 li
178.089 121.392 178.101 121.629 177.962 121.783 cv
177.824 121.936 177.587 121.949 177.433 121.81 cv
173.535 118.293 li
173.382 118.154 173.369 117.917 173.508 117.763 cv
173.647 117.609 173.884 117.597 174.038 117.736 cv
180.719 123.765 mo
184.617 127.283 li
184.771 127.422 184.783 127.659 184.644 127.812 cv
184.505 127.966 184.268 127.978 184.114 127.84 cv
180.217 124.322 li
180.063 124.183 180.051 123.946 180.19 123.793 cv
180.328 123.639 180.565 123.627 180.719 123.765 cv
187.401 129.795 mo
191.298 133.312 li
191.452 133.451 191.464 133.688 191.326 133.842 cv
191.187 133.996 190.95 134.008 190.796 133.869 cv
186.898 130.352 li
186.745 130.213 186.732 129.976 186.871 129.822 cv
187.01 129.668 187.247 129.656 187.401 129.795 cv
194.082 135.825 mo
197.98 139.342 li
198.134 139.481 198.146 139.718 198.007 139.872 cv
197.868 140.026 197.631 140.038 197.477 139.899 cv
193.58 136.382 li
193.426 136.243 193.414 136.006 193.553 135.852 cv
193.691 135.698 193.929 135.686 194.082 135.825 cv
200.764 141.855 mo
204.661 145.372 li
204.815 145.511 204.827 145.748 204.689 145.901 cv
204.55 146.055 204.313 146.067 204.159 145.929 cv
200.261 142.411 li
200.108 142.273 200.095 142.035 200.234 141.882 cv
200.373 141.728 200.61 141.716 200.764 141.855 cv
207.445 147.884 mo
211.343 151.401 li
211.497 151.54 211.509 151.777 211.37 151.931 cv
211.231 152.085 210.994 152.097 210.84 151.958 cv
206.943 148.441 li
206.789 148.302 206.777 148.065 206.916 147.911 cv
207.055 147.758 207.292 147.745 207.445 147.884 cv
214.127 153.914 mo
218.025 157.431 li
218.178 157.57 218.19 157.807 218.052 157.961 cv
217.913 158.114 217.676 158.127 217.522 157.988 cv
213.624 154.471 li
213.471 154.332 213.459 154.095 213.597 153.941 cv
213.736 153.787 213.973 153.775 214.127 153.914 cv
220.808 159.943 mo
224.706 163.461 li
224.86 163.6 224.872 163.837 224.733 163.99 cv
224.594 164.144 224.357 164.156 224.204 164.018 cv
220.306 160.5 li
220.152 160.362 220.14 160.124 220.279 159.971 cv
220.418 159.817 220.655 159.805 220.808 159.943 cv
227.49 165.973 mo
228.856 167.206 li
229.01 167.345 229.022 167.582 228.883 167.736 cv
228.745 167.889 228.507 167.902 228.354 167.763 cv
226.987 166.53 li
226.834 166.391 226.822 166.154 226.96 166 cv
227.099 165.847 227.336 165.834 227.49 165.973 cv
1 /0 /CSD get_res sepcs
.749 sep
f
165.605 114.984 mo
160.355 105.984 li
169.355 110.484 li
165.605 114.984 li
cp
ef
320.105 169.359 mo
320.016 169.359 319.927 169.328 319.855 169.264 cv
318.63 168.172 li
318.841 168.023 319.056 167.88 319.274 167.741 cv
320.354 168.705 li
320.509 168.842 320.523 169.079 320.385 169.234 cv
320.311 169.317 320.208 169.359 320.105 169.359 cv
.243137 0 .47451 .0980392 cmyk
f
318.63 168.172 mo
318.065 167.668 li
317.983 167.595 317.941 167.495 317.94 167.394 cv
318.355 167.764 li
318.427 167.828 318.516 167.859 318.605 167.859 cv
318.708 167.859 318.811 167.817 318.885 167.734 cv
318.95 167.661 318.981 167.57 318.98 167.479 cv
319.274 167.741 li
319.056 167.88 318.841 168.023 318.63 168.172 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
315.515 165.268 mo
315.427 165.268 315.337 165.236 315.266 165.173 cv
311.347 161.679 li
311.266 161.606 311.223 161.506 311.222 161.404 cv
313.766 163.673 li
313.838 163.736 313.927 163.768 314.015 163.768 cv
314.119 163.768 314.221 163.725 314.295 163.642 cv
314.361 163.569 314.392 163.478 314.391 163.387 cv
315.765 164.613 li
315.92 164.751 315.933 164.988 315.795 165.142 cv
315.721 165.225 315.619 165.268 315.515 165.268 cv
308.798 159.278 mo
308.709 159.278 308.62 159.247 308.548 159.183 cv
304.63 155.69 li
304.548 155.617 304.506 155.516 304.504 155.415 cv
307.048 157.683 li
307.12 157.747 307.209 157.778 307.298 157.778 cv
307.401 157.778 307.504 157.736 307.578 157.653 cv
307.643 157.58 307.674 157.489 307.673 157.398 cv
309.047 158.624 li
309.202 158.761 309.216 158.998 309.078 159.153 cv
309.004 159.236 308.901 159.278 308.798 159.278 cv
302.08 153.289 mo
301.991 153.289 301.902 153.258 301.831 153.194 cv
297.912 149.7 li
297.83 149.628 297.788 149.527 297.786 149.426 cv
300.331 151.694 li
300.402 151.758 300.491 151.789 300.58 151.789 cv
300.683 151.789 300.786 151.747 300.86 151.664 cv
300.925 151.591 300.956 151.499 300.955 151.409 cv
302.33 152.634 li
302.484 152.772 302.498 153.009 302.36 153.164 cv
302.286 153.247 302.183 153.289 302.08 153.289 cv
295.362 147.3 mo
295.273 147.3 295.184 147.268 295.113 147.205 cv
291.194 143.711 li
291.112 143.638 291.07 143.538 291.069 143.436 cv
293.613 145.705 li
293.684 145.768 293.773 145.8 293.862 145.8 cv
293.965 145.8 294.068 145.757 294.142 145.674 cv
294.207 145.601 294.239 145.51 294.237 145.419 cv
295.612 146.645 li
295.767 146.783 295.78 147.02 295.642 147.174 cv
295.568 147.257 295.465 147.3 295.362 147.3 cv
288.644 141.311 mo
288.556 141.311 288.467 141.279 288.395 141.215 cv
284.476 137.722 li
284.395 137.649 284.352 137.548 284.351 137.447 cv
286.895 139.715 li
286.967 139.779 287.056 139.81 287.145 139.81 cv
287.248 139.81 287.35 139.768 287.424 139.685 cv
287.49 139.612 287.521 139.521 287.52 139.43 cv
288.894 140.656 li
289.049 140.793 289.062 141.03 288.924 141.185 cv
288.85 141.268 288.748 141.311 288.644 141.311 cv
281.927 135.321 mo
281.838 135.321 281.749 135.29 281.677 135.226 cv
277.759 131.732 li
277.677 131.66 277.635 131.559 277.633 131.458 cv
280.177 133.726 li
280.249 133.79 280.338 133.821 280.427 133.821 cv
280.53 133.821 280.633 133.779 280.707 133.696 cv
280.772 133.623 280.803 133.531 280.802 133.441 cv
282.176 134.666 li
282.331 134.804 282.345 135.041 282.207 135.196 cv
282.133 135.279 282.03 135.321 281.927 135.321 cv
275.209 129.332 mo
275.12 129.332 275.031 129.301 274.96 129.237 cv
271.041 125.743 li
270.959 125.67 270.917 125.57 270.915 125.469 cv
273.46 127.737 li
273.531 127.801 273.62 127.832 273.709 127.832 cv
273.812 127.832 273.915 127.789 273.989 127.706 cv
274.054 127.633 274.085 127.542 274.084 127.451 cv
275.459 128.677 li
275.613 128.815 275.627 129.052 275.489 129.206 cv
275.415 129.29 275.312 129.332 275.209 129.332 cv
268.491 123.343 mo
268.402 123.343 268.313 123.311 268.242 123.247 cv
264.323 119.754 li
264.242 119.681 264.199 119.581 264.198 119.479 cv
266.742 121.747 li
266.813 121.811 266.902 121.843 266.991 121.843 cv
267.094 121.843 267.197 121.8 267.271 121.717 cv
267.336 121.644 267.368 121.553 267.366 121.462 cv
268.741 122.688 li
268.896 122.826 268.909 123.063 268.771 123.217 cv
268.697 123.3 268.594 123.343 268.491 123.343 cv
261.773 117.353 mo
261.685 117.353 261.596 117.322 261.524 117.258 cv
258.382 114.457 li
258.468 114.371 li
260.024 115.758 li
260.096 115.822 260.185 115.853 260.273 115.853 cv
260.377 115.853 260.479 115.811 260.553 115.728 cv
260.619 115.655 260.65 115.563 260.649 115.473 cv
262.023 116.698 li
262.178 116.836 262.191 117.073 262.053 117.228 cv
261.979 117.311 261.877 117.353 261.773 117.353 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
256.355 116.485 mo
251.105 107.484 li
260.855 111.984 li
258.999 113.84 li
256.604 111.705 li
256.533 111.641 256.444 111.609 256.355 111.609 cv
256.252 111.609 256.149 111.652 256.075 111.735 cv
255.937 111.889 255.951 112.127 256.105 112.264 cv
257.48 113.49 li
257.481 113.591 257.524 113.692 257.605 113.764 cv
258.382 114.457 li
256.355 116.485 li
f
258.382 114.457 mo
257.605 113.764 li
257.524 113.692 257.481 113.591 257.48 113.49 cv
258.468 114.371 li
258.382 114.457 li
1 /1 /CSD get_res sepcs
.146867 sep
f
256.604 111.705 mo
260.523 115.198 li
260.678 115.336 260.691 115.573 260.553 115.728 cv
260.416 115.882 260.179 115.896 260.024 115.758 cv
256.105 112.264 li
255.951 112.127 255.937 111.889 256.075 111.735 cv
256.213 111.58 256.45 111.567 256.604 111.705 cv
263.322 117.694 mo
267.241 121.188 li
267.395 121.325 267.409 121.563 267.271 121.717 cv
267.133 121.872 266.896 121.885 266.742 121.747 cv
262.823 118.254 li
262.669 118.116 262.655 117.879 262.793 117.724 cv
262.931 117.57 263.168 117.556 263.322 117.694 cv
270.04 123.683 mo
273.959 127.177 li
274.113 127.315 274.127 127.552 273.989 127.706 cv
273.851 127.861 273.614 127.875 273.46 127.737 cv
269.541 124.243 li
269.386 124.105 269.373 123.868 269.511 123.714 cv
269.648 123.559 269.885 123.545 270.04 123.683 cv
276.758 129.673 mo
280.676 133.166 li
280.831 133.304 280.845 133.541 280.707 133.696 cv
280.569 133.85 280.332 133.864 280.177 133.726 cv
276.259 130.232 li
276.104 130.095 276.09 129.857 276.228 129.703 cv
276.366 129.548 276.603 129.535 276.758 129.673 cv
283.475 135.662 mo
287.394 139.156 li
287.549 139.293 287.562 139.53 287.424 139.685 cv
287.287 139.84 287.05 139.853 286.895 139.715 cv
282.976 136.222 li
282.822 136.084 282.808 135.847 282.946 135.692 cv
283.084 135.538 283.321 135.524 283.475 135.662 cv
290.193 141.651 mo
294.112 145.145 li
294.266 145.283 294.28 145.52 294.142 145.674 cv
294.004 145.829 293.767 145.843 293.613 145.705 cv
289.694 142.211 li
289.539 142.073 289.526 141.836 289.664 141.681 cv
289.802 141.527 290.039 141.513 290.193 141.651 cv
296.911 147.641 mo
300.83 151.134 li
300.984 151.272 300.998 151.509 300.86 151.664 cv
300.722 151.818 300.485 151.832 300.331 151.694 cv
296.412 148.2 li
296.257 148.062 296.244 147.825 296.382 147.671 cv
296.519 147.516 296.756 147.503 296.911 147.641 cv
303.629 153.63 mo
307.547 157.124 li
307.702 157.261 307.716 157.498 307.578 157.653 cv
307.44 157.808 307.203 157.821 307.048 157.683 cv
303.13 154.19 li
302.975 154.052 302.961 153.815 303.099 153.66 cv
303.237 153.506 303.474 153.492 303.629 153.63 cv
310.346 159.619 mo
314.265 163.113 li
314.42 163.251 314.433 163.488 314.295 163.642 cv
314.158 163.797 313.921 163.81 313.766 163.673 cv
309.847 160.179 li
309.693 160.041 309.679 159.804 309.817 159.649 cv
309.955 159.495 310.192 159.481 310.346 159.619 cv
317.064 165.608 mo
318.854 167.205 li
319.009 167.342 319.023 167.579 318.885 167.734 cv
318.747 167.889 318.51 167.902 318.355 167.764 cv
316.565 166.168 li
316.41 166.03 316.397 165.793 316.535 165.639 cv
316.673 165.484 316.91 165.471 317.064 165.608 cv
1 /0 /CSD get_res sepcs
.749 sep
f
254.855 114.984 mo
249.605 105.984 li
259.355 110.484 li
254.855 114.984 li
cp
ef
71.4558 79.1417 mo
71.3726 78.3932 li
75.4228 77.5634 li
75.4482 77.5582 75.4736 77.5557 75.4986 77.5557 cv
75.6729 77.5557 75.8291 77.6781 75.8655 77.8555 cv
75.9071 78.0584 75.7763 78.2565 75.5733 78.2982 cv
71.4558 79.1417 li
79.1715 77.5532 mo
78.997 77.5532 78.8408 77.4309 78.8045 77.2534 cv
78.7629 77.0505 78.8937 76.8523 79.0965 76.8107 cv
84.2397 75.7571 li
84.2651 75.7519 84.2904 75.7494 84.3154 75.7494 cv
84.4898 75.7494 84.646 75.8717 84.6823 76.0491 cv
84.724 76.252 84.5931 76.4502 84.3902 76.4917 cv
79.2471 77.5455 li
79.2217 77.5507 79.1964 77.5532 79.1715 77.5532 cv
87.9883 75.7468 mo
87.8139 75.7468 87.6576 75.6246 87.6213 75.4471 cv
87.5798 75.2441 87.7105 75.0459 87.9134 75.0044 cv
93.0565 73.9506 li
93.0819 73.9454 93.1072 73.9429 93.1321 73.9429 cv
93.3066 73.9429 93.4628 74.0652 93.4992 74.2427 cv
93.5408 74.4456 93.41 74.6437 93.2071 74.6854 cv
88.0639 75.7392 li
88.0386 75.7443 88.0133 75.7468 87.9883 75.7468 cv
96.805 73.9404 mo
96.6307 73.9404 96.4745 73.8181 96.4382 73.6406 cv
96.3966 73.4377 96.5274 73.2396 96.7303 73.1979 cv
101.874 72.1443 li
101.899 72.1391 101.924 72.1366 101.949 72.1366 cv
102.124 72.1366 102.28 72.2589 102.316 72.4364 cv
102.358 72.6393 102.227 72.8374 102.024 72.879 cv
96.8808 73.9327 li
96.8554 73.9379 96.83 73.9404 96.805 73.9404 cv
105.622 72.134 mo
105.448 72.134 105.291 72.0118 105.255 71.8342 cv
105.213 71.6313 105.344 71.4333 105.547 71.3916 cv
110.69 70.3378 li
110.716 70.3326 110.741 70.3301 110.766 70.3301 cv
110.94 70.3301 111.097 70.4524 111.133 70.6299 cv
111.175 70.8328 111.044 71.0311 110.841 71.0726 cv
105.698 72.1264 li
105.672 72.1315 105.647 72.134 105.622 72.134 cv
114.439 70.3276 mo
114.264 70.3276 114.108 70.2053 114.072 70.0279 cv
114.03 69.825 114.161 69.6268 114.364 69.5853 cv
119.507 68.5315 li
119.532 68.5263 119.558 68.5238 119.583 68.5238 cv
119.757 68.5238 119.913 68.6461 119.95 68.8236 cv
119.991 69.0265 119.861 69.2247 119.658 69.2662 cv
114.515 70.3199 li
114.489 70.3251 114.464 70.3276 114.439 70.3276 cv
123.256 68.5213 mo
123.081 68.5213 122.925 68.3989 122.889 68.2214 cv
122.847 68.0185 122.978 67.8204 123.181 67.7789 cv
128.324 66.7252 li
128.349 66.7199 128.375 66.7174 128.4 66.7174 cv
128.574 66.7174 128.73 66.8398 128.767 67.0173 cv
128.808 67.2202 128.677 67.4183 128.474 67.4598 cv
123.331 68.5135 li
123.306 68.5188 123.281 68.5213 123.256 68.5213 cv
132.073 66.7149 mo
131.898 66.7149 131.742 66.5926 131.706 66.4151 cv
131.664 66.2122 131.795 66.014 131.998 65.9725 cv
137.141 64.9188 li
137.166 64.9136 137.192 64.9111 137.217 64.9111 cv
137.391 64.9111 137.547 65.0334 137.583 65.2108 cv
137.625 65.4137 137.494 65.6119 137.291 65.6534 cv
132.148 66.7072 li
132.123 66.7124 132.098 66.7149 132.073 66.7149 cv
140.889 64.9086 mo
140.715 64.9086 140.559 64.7863 140.522 64.6088 cv
140.481 64.4059 140.612 64.2076 140.815 64.1661 cv
145.605 63.1846 li
145.605 63.9502 li
140.965 64.9009 li
140.94 64.9061 140.914 64.9086 140.889 64.9086 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
145.605 63.9502 mo
145.605 63.1846 li
145.958 63.1124 li
145.983 63.1072 146.008 63.1047 146.033 63.1047 cv
146.208 63.1047 146.364 63.2269 146.4 63.4045 cv
146.442 63.6074 146.311 63.8054 146.108 63.8471 cv
145.605 63.9502 li
1 /1 /CSD get_res sepcs
.47451 sep
f
149.706 63.1021 mo
149.532 63.1021 149.376 62.9798 149.339 62.8023 cv
149.298 62.5994 149.428 62.4013 149.631 62.3597 cv
154.775 61.306 li
154.8 61.3008 154.825 61.2983 154.85 61.2983 cv
155.025 61.2983 155.181 61.4206 155.217 61.5981 cv
155.259 61.801 155.128 61.9991 154.925 62.0408 cv
149.782 63.0944 li
149.757 63.0996 149.731 63.1021 149.706 63.1021 cv
158.523 61.2958 mo
158.349 61.2958 158.192 61.1735 158.156 60.996 cv
158.114 60.7931 158.245 60.595 158.448 60.5533 cv
163.591 59.4997 li
163.617 59.4945 163.642 59.4919 163.667 59.4919 cv
163.841 59.4919 163.998 59.6143 164.034 59.7918 cv
164.076 59.9947 163.945 60.1928 163.742 60.2343 cv
158.599 61.2881 li
158.573 61.2933 158.548 61.2958 158.523 61.2958 cv
167.34 59.4894 mo
167.166 59.4894 167.009 59.3672 166.973 59.1896 cv
166.931 58.9867 167.062 58.7885 167.265 58.747 cv
172.408 57.6932 li
172.434 57.688 172.459 57.6855 172.484 57.6855 cv
172.658 57.6855 172.815 57.8078 172.851 57.9853 cv
172.892 58.1882 172.762 58.3864 172.559 58.428 cv
167.416 59.4817 li
167.39 59.4869 167.365 59.4894 167.34 59.4894 cv
176.157 57.683 mo
175.982 57.683 175.826 57.5606 175.79 57.3832 cv
175.748 57.1802 175.879 56.9822 176.082 56.9406 cv
181.225 55.8869 li
181.25 55.8817 181.276 55.8791 181.301 55.8791 cv
181.475 55.8791 181.631 56.0015 181.668 56.179 cv
181.709 56.3819 181.578 56.58 181.376 56.6216 cv
176.232 57.6753 li
176.207 57.6805 176.182 57.683 176.157 57.683 cv
184.973 55.8767 mo
184.799 55.8767 184.643 55.7543 184.607 55.5768 cv
184.565 55.3739 184.696 55.1758 184.899 55.1342 cv
190.042 54.0805 li
190.067 54.0753 190.093 54.0728 190.118 54.0728 cv
190.292 54.0728 190.448 54.1951 190.485 54.3725 cv
190.526 54.5754 190.395 54.7736 190.192 54.8151 cv
185.049 55.8689 li
185.024 55.8741 184.998 55.8767 184.973 55.8767 cv
193.791 54.0703 mo
193.616 54.0703 193.46 53.948 193.424 53.7705 cv
193.382 53.5676 193.513 53.3694 193.716 53.3278 cv
198.859 52.2741 li
198.884 52.2689 198.909 52.2664 198.934 52.2664 cv
199.109 52.2664 199.265 52.3886 199.301 52.5662 cv
199.343 52.7691 199.212 52.9673 199.009 53.0088 cv
193.866 54.0626 li
193.841 54.0678 193.815 54.0703 193.791 54.0703 cv
202.607 52.2638 mo
202.433 52.2638 202.277 52.1415 202.24 51.9641 cv
202.199 51.7611 202.33 51.563 202.532 51.5215 cv
207.676 50.4677 li
207.701 50.4625 207.726 50.46 207.751 50.46 cv
207.926 50.46 208.082 50.5823 208.118 50.7598 cv
208.16 50.9627 208.029 51.1608 207.826 51.2025 cv
202.683 52.2561 li
202.658 52.2613 202.632 52.2638 202.607 52.2638 cv
211.424 50.4575 mo
211.25 50.4575 211.094 50.3352 211.057 50.1577 cv
211.016 49.9548 211.146 49.7567 211.349 49.715 cv
216.492 48.6614 li
216.518 48.6562 216.543 48.6537 216.568 48.6537 cv
216.743 48.6537 216.899 48.776 216.935 48.9534 cv
216.977 49.1564 216.846 49.3545 216.643 49.396 cv
211.5 50.4498 li
211.474 50.455 211.449 50.4575 211.424 50.4575 cv
220.241 48.6511 mo
220.067 48.6511 219.91 48.5289 219.874 48.3513 cv
219.832 48.1484 219.963 47.9502 220.166 47.9087 cv
222.35 47.4612 li
222.495 47.6892 222.645 47.9137 222.8 48.1345 cv
220.317 48.6434 li
220.291 48.6486 220.266 48.6511 220.241 48.6511 cv
224.374 47.7456 mo
224.223 47.5462 224.076 47.3431 223.934 47.1368 cv
224.03 47.1172 li
224.055 47.1119 224.08 47.1094 224.105 47.1094 cv
224.28 47.1094 224.436 47.2318 224.472 47.4093 cv
224.498 47.5354 224.457 47.6596 224.374 47.7456 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
222.8 48.1345 mo
222.645 47.9137 222.495 47.6892 222.35 47.4612 cv
223.934 47.1368 li
224.076 47.3431 224.223 47.5462 224.374 47.7456 cv
224.323 47.7979 224.257 47.8361 224.18 47.8518 cv
222.8 48.1345 li
1 /1 /CSD get_res sepcs
.47451 sep
f
71.855 82.7344 mo
66.9083 81.9734 li
65.98 81.2838 64.9785 80.6806 63.918 80.1769 cv
71.105 75.9845 li
71.3726 78.3932 li
70.2797 78.6171 li
70.0768 78.6587 69.9461 78.8568 69.9876 79.0597 cv
70.0239 79.2372 70.1801 79.3596 70.3545 79.3596 cv
70.3794 79.3596 70.4048 79.357 70.4302 79.3518 cv
71.4558 79.1417 li
71.855 82.7344 li
62.8903 81.3553 mo
62.105 81.2345 li
62.3141 81.1125 li
62.5081 81.19 62.7002 81.271 62.8903 81.3553 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
66.9083 81.9734 mo
62.8903 81.3553 li
62.7002 81.271 62.5081 81.19 62.3141 81.1125 cv
63.918 80.1769 li
64.9785 80.6806 65.98 81.2838 66.9083 81.9734 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
70.3545 79.3596 mo
70.1801 79.3596 70.0239 79.2372 69.9876 79.0597 cv
69.9461 78.8568 70.0768 78.6587 70.2797 78.6171 cv
71.3726 78.3932 li
71.4558 79.1417 li
70.4302 79.3518 li
70.4048 79.357 70.3794 79.3596 70.3545 79.3596 cv
1 /1 /CSD get_res sepcs
.146867 sep
f
69.605 78.2345 mo
222.605 46.7345 li
1 /0 /CSD get_res sepcs
.749 sep
@
70.355 81.2345 mo
60.605 79.7345 li
69.605 74.4845 li
70.355 81.2345 li
cp
ef
173.209 173.579 mo
173.045 172.842 li
174.278 172.41 175.515 171.963 176.754 171.5 cv
176.798 171.484 176.842 171.476 176.885 171.476 cv
177.038 171.476 177.181 171.569 177.237 171.72 cv
177.309 171.914 177.211 172.13 177.017 172.202 cv
175.744 172.678 174.475 173.137 173.209 173.579 cv
180.387 170.881 mo
180.237 170.881 180.096 170.791 180.038 170.643 cv
179.962 170.451 180.056 170.233 180.249 170.157 cv
181.861 169.52 183.478 168.857 185.099 168.169 cv
185.147 168.148 185.197 168.139 185.245 168.139 cv
185.391 168.139 185.53 168.225 185.591 168.367 cv
185.672 168.558 185.583 168.778 185.392 168.859 cv
183.765 169.549 182.143 170.215 180.524 170.854 cv
180.479 170.872 180.432 170.881 180.387 170.881 cv
188.686 167.395 mo
188.543 167.395 188.406 167.312 188.343 167.172 cv
188.259 166.983 188.344 166.761 188.534 166.677 cv
190.12 165.972 191.709 165.244 193.301 164.493 cv
193.352 164.469 193.407 164.457 193.46 164.457 cv
193.601 164.457 193.736 164.537 193.8 164.672 cv
193.888 164.86 193.808 165.083 193.621 165.171 cv
192.024 165.924 190.43 166.655 188.838 167.362 cv
188.789 167.384 188.737 167.395 188.686 167.395 cv
196.841 163.581 mo
196.702 163.581 196.569 163.504 196.504 163.371 cv
196.413 163.185 196.49 162.961 196.676 162.869 cv
198.236 162.104 199.798 161.318 201.36 160.511 cv
201.415 160.483 201.473 160.469 201.531 160.469 cv
201.667 160.469 201.798 160.543 201.865 160.672 cv
201.96 160.856 201.888 161.082 201.704 161.178 cv
200.137 161.986 198.571 162.775 197.006 163.543 cv
196.953 163.569 196.897 163.581 196.841 163.581 cv
204.853 159.475 mo
204.719 159.475 204.589 159.403 204.522 159.276 cv
204.424 159.094 204.493 158.867 204.676 158.769 cv
206.21 157.949 207.744 157.11 209.277 156.253 cv
209.335 156.22 209.398 156.205 209.46 156.205 cv
209.592 156.205 209.719 156.274 209.788 156.397 cv
209.889 156.578 209.824 156.806 209.643 156.907 cv
208.106 157.767 206.568 158.608 205.029 159.43 cv
204.973 159.46 204.912 159.475 204.853 159.475 cv
212.723 155.103 mo
212.593 155.103 212.467 155.036 212.397 154.915 cv
212.294 154.736 212.355 154.506 212.535 154.403 cv
214.044 153.533 215.551 152.646 217.055 151.742 cv
217.116 151.706 217.182 151.689 217.248 151.689 cv
217.375 151.689 217.499 151.753 217.57 151.871 cv
217.676 152.048 217.619 152.279 217.441 152.385 cv
216.435 152.99 215.427 153.587 214.418 154.177 cv
214.127 153.914 li
214.055 153.849 213.965 153.817 213.876 153.817 cv
213.773 153.817 213.671 153.859 213.597 153.941 cv
213.459 154.095 213.471 154.332 213.624 154.471 cv
213.738 154.573 li
213.462 154.734 213.186 154.893 212.91 155.053 cv
212.851 155.087 212.786 155.103 212.723 155.103 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
213.738 154.573 mo
213.624 154.471 li
213.471 154.332 213.459 154.095 213.597 153.941 cv
213.671 153.859 213.773 153.817 213.876 153.817 cv
213.965 153.817 214.055 153.849 214.127 153.914 cv
214.418 154.177 li
214.192 154.309 213.965 154.441 213.738 154.573 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
220.452 150.487 mo
220.326 150.487 220.204 150.424 220.133 150.309 cv
220.024 150.133 220.078 149.902 220.255 149.793 cv
221.738 148.877 223.218 147.945 224.694 146.998 cv
224.756 146.958 224.827 146.939 224.896 146.939 cv
225.019 146.939 225.14 147 225.212 147.111 cv
225.324 147.286 225.273 147.518 225.099 147.63 cv
223.619 148.579 222.136 149.513 220.649 150.431 cv
220.587 150.469 220.519 150.487 220.452 150.487 cv
228.042 145.645 mo
227.92 145.645 227.8 145.585 227.728 145.476 cv
227.614 145.303 227.662 145.07 227.835 144.957 cv
229.293 143.997 230.745 143.023 232.193 142.036 cv
232.258 141.992 232.331 141.971 232.404 141.971 cv
232.524 141.971 232.642 142.028 232.714 142.134 cv
232.831 142.305 232.787 142.539 232.616 142.655 cv
231.165 143.645 229.709 144.621 228.248 145.583 cv
228.184 145.625 228.113 145.645 228.042 145.645 cv
235.492 140.589 mo
235.373 140.589 235.257 140.533 235.184 140.429 cv
235.065 140.259 235.107 140.025 235.276 139.907 cv
236.711 138.904 238.14 137.888 239.562 136.86 cv
239.629 136.812 239.706 136.789 239.782 136.789 cv
239.898 136.789 240.013 136.842 240.086 136.944 cv
240.207 137.112 240.169 137.346 240.002 137.467 cv
238.576 138.498 237.144 139.516 235.706 140.521 cv
235.641 140.567 235.566 140.589 235.492 140.589 cv
242.817 135.318 mo
242.702 135.318 242.589 135.266 242.515 135.167 cv
242.392 135 242.427 134.765 242.593 134.642 cv
244 133.601 245.399 132.548 246.791 131.483 cv
246.859 131.431 246.939 131.406 247.018 131.406 cv
247.131 131.406 247.243 131.457 247.317 131.554 cv
247.442 131.718 247.411 131.953 247.247 132.079 cv
245.852 133.146 244.449 134.201 243.04 135.245 cv
242.973 135.294 242.894 135.318 242.817 135.318 cv
249.989 129.859 mo
249.878 129.859 249.767 129.809 249.693 129.715 cv
249.566 129.552 249.595 129.316 249.758 129.188 cv
251.135 128.11 252.505 127.021 253.865 125.922 cv
253.935 125.866 254.018 125.839 254.101 125.839 cv
254.21 125.839 254.318 125.887 254.392 125.978 cv
254.523 126.14 254.498 126.376 254.336 126.506 cv
252.973 127.607 251.601 128.698 250.22 129.779 cv
250.151 129.833 250.07 129.859 249.989 129.859 cv
257.005 124.216 mo
256.897 124.216 256.79 124.17 256.716 124.08 cv
256.584 123.921 256.606 123.684 256.766 123.552 cv
258.114 122.438 259.453 121.315 260.781 120.182 cv
260.851 120.122 260.938 120.092 261.024 120.092 cv
261.13 120.092 261.235 120.137 261.31 120.224 cv
261.444 120.381 261.425 120.618 261.267 120.753 cv
261.267 120.752 li
259.936 121.888 258.595 123.014 257.244 124.13 cv
257.174 124.188 257.089 124.216 257.005 124.216 cv
264.051 118.344 mo
263.518 117.868 li
263.539 117.82 263.571 117.775 263.614 117.738 cv
264.931 116.589 266.237 115.431 267.532 114.265 cv
267.604 114.2 267.694 114.169 267.783 114.169 cv
267.886 114.169 267.988 114.21 268.062 114.293 cv
268.2 114.447 268.188 114.684 268.034 114.822 cv
266.736 115.991 265.427 117.151 264.107 118.303 cv
264.089 118.319 264.07 118.332 264.051 118.344 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
263.86 118.396 mo
263.756 118.396 263.652 118.352 263.578 118.267 cv
263.479 118.154 263.46 117.997 263.518 117.868 cv
264.051 118.344 li
263.992 118.379 263.926 118.396 263.86 118.396 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
270.548 112.4 mo
270.447 112.4 270.346 112.359 270.272 112.279 cv
270.132 112.127 270.142 111.889 270.294 111.749 cv
271.583 110.561 272.859 109.366 274.123 108.163 cv
274.195 108.094 274.288 108.06 274.381 108.06 cv
274.48 108.06 274.579 108.099 274.653 108.176 cv
274.796 108.326 274.79 108.563 274.64 108.706 cv
273.374 109.912 272.094 111.11 270.802 112.3 cv
270.73 112.367 270.639 112.4 270.548 112.4 cv
277.083 106.207 mo
276.985 106.207 276.888 106.169 276.814 106.094 cv
276.67 105.946 276.673 105.708 276.821 105.564 cv
278.077 104.339 279.319 103.108 280.546 101.871 cv
280.62 101.797 280.716 101.76 280.813 101.76 cv
280.908 101.76 281.003 101.796 281.077 101.868 cv
281.224 102.014 281.225 102.252 281.079 102.399 cv
281.079 102.399 li
279.849 103.639 278.604 104.873 277.345 106.101 cv
277.272 106.172 277.177 106.207 277.083 106.207 cv
283.437 99.83 mo
283.343 99.83 283.249 99.795 283.177 99.7246 cv
283.028 99.5805 283.024 99.3431 283.168 99.1942 cv
283.718 98.6255 284.265 98.0555 284.809 97.4844 cv
285.843 97.4844 li
285.137 98.2302 284.425 98.9739 283.707 99.7157 cv
283.633 99.7918 283.535 99.83 283.437 99.83 cv
286.786 96.4845 mo
285.757 96.4845 li
286.1 96.1209 286.441 95.7569 286.782 95.3924 cv
286.855 95.3133 286.955 95.2734 287.056 95.2734 cv
287.147 95.2734 287.239 95.3067 287.312 95.3742 cv
287.463 95.5155 287.471 95.7528 287.33 95.9042 cv
287.149 96.0977 286.968 96.2912 286.786 96.4845 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
285.843 97.4844 mo
284.809 97.4844 li
285.126 97.1515 285.442 96.8182 285.757 96.4845 cv
286.786 96.4845 li
286.473 96.8182 286.159 97.1515 285.843 97.4844 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
289.598 93.2649 mo
289.508 93.2649 289.417 93.2326 289.345 93.1673 cv
289.192 93.0279 289.181 92.7908 289.32 92.6376 cv
290.502 91.3376 291.667 90.033 292.812 88.7244 cv
292.886 88.6396 292.99 88.5963 293.094 88.5963 cv
293.182 88.5963 293.27 88.6269 293.341 88.6891 cv
293.497 88.8256 293.513 89.0624 293.376 89.2183 cv
292.228 90.5306 291.06 91.8388 289.875 93.1422 cv
289.801 93.2236 289.699 93.2649 289.598 93.2649 cv
295.545 86.5067 mo
295.459 86.5067 295.373 86.4773 295.302 86.4173 cv
295.145 86.2831 295.125 86.0464 295.26 85.8886 cv
296.026 84.9879 296.783 84.0855 297.531 83.1817 cv
297.809 83.239 298.085 83.2966 298.361 83.3545 cv
297.529 84.3631 296.686 85.37 295.831 86.3747 cv
295.757 86.4619 295.651 86.5067 295.545 86.5067 cv
298.899 82.7009 mo
298.623 82.6429 298.347 82.5851 298.071 82.5276 cv
298.253 82.3053 298.436 82.0828 298.617 81.8604 cv
298.691 81.7695 298.799 81.7224 298.908 81.7224 cv
298.991 81.7224 299.075 81.7501 299.145 81.8069 cv
299.305 81.9379 299.329 82.1742 299.198 82.3346 cv
299.198 82.3345 li
299.099 82.4567 298.999 82.5788 298.899 82.7009 cv
301.257 79.5485 mo
301.176 79.5485 301.094 79.5221 301.025 79.4677 cv
300.862 79.3391 300.835 79.1033 300.963 78.9408 cv
302.055 77.5602 303.125 76.1772 304.17 74.7927 cv
304.244 74.695 304.356 74.6436 304.47 74.6436 cv
304.549 74.6436 304.628 74.6682 304.696 74.7193 cv
304.861 74.8441 304.894 75.0793 304.769 75.2445 cv
303.72 76.6338 302.647 78.0212 301.552 79.4061 cv
301.478 79.4997 301.368 79.5485 301.257 79.5485 cv
306.705 72.3814 mo
306.628 72.3814 306.551 72.358 306.484 72.3094 cv
306.317 72.1874 306.28 71.9529 306.402 71.7855 cv
307.44 70.3615 308.452 68.9368 309.438 67.5116 cv
309.511 67.4063 309.628 67.3498 309.747 67.3498 cv
309.82 67.3498 309.894 67.3714 309.96 67.4164 cv
310.13 67.5342 310.172 67.7678 310.055 67.9382 cv
309.066 69.3684 308.05 70.7986 307.008 72.2273 cv
306.935 72.328 306.82 72.3814 306.705 72.3814 cv
311.85 64.9948 mo
311.779 64.9948 311.707 64.9745 311.643 64.9322 cv
311.471 64.8177 311.424 64.5849 311.538 64.4124 cv
312.514 62.9427 313.46 61.4736 314.376 60.0061 cv
314.447 59.8921 314.569 59.8295 314.694 59.8295 cv
314.762 59.8295 314.831 59.8478 314.892 59.8863 cv
315.068 59.996 315.121 60.2273 315.012 60.403 cv
314.092 61.8768 313.142 63.3518 312.163 64.8272 cv
312.091 64.9359 311.972 64.9948 311.85 64.9948 cv
316.645 57.3762 mo
316.579 57.3762 316.514 57.3593 316.453 57.3236 cv
316.275 57.2178 316.217 56.9877 316.323 56.8095 cv
317.168 55.387 317.984 53.9669 318.769 52.5494 cv
318.982 52.6791 319.198 52.8045 319.418 52.9255 cv
318.631 54.3453 317.814 55.7681 316.967 57.1927 cv
316.897 57.3107 316.773 57.3762 316.645 57.3762 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
319.418 52.9255 mo
319.198 52.8045 318.982 52.6791 318.769 52.5494 cv
318.821 52.4541 318.874 52.3587 318.927 52.2635 cv
318.995 52.1395 319.123 52.0694 319.255 52.0694 cv
319.316 52.0694 319.379 52.0844 319.436 52.116 cv
319.617 52.2159 319.683 52.444 319.583 52.6254 cv
319.583 52.6255 li
319.528 52.7255 319.473 52.8254 319.418 52.9255 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
173.855 176.484 mo
164.105 176.484 li
172.355 169.734 li
172.644 171.035 li
172.039 171.25 171.436 171.462 170.833 171.67 cv
170.637 171.737 170.533 171.951 170.6 172.147 cv
170.654 172.302 170.799 172.4 170.955 172.4 cv
170.995 172.4 171.037 172.393 171.077 172.379 cv
171.653 172.18 172.23 171.978 172.808 171.773 cv
173.045 172.842 li
172.788 172.932 172.53 173.021 172.273 173.11 cv
172.077 173.177 171.973 173.391 172.04 173.587 cv
172.094 173.742 172.239 173.84 172.395 173.84 cv
172.435 173.84 172.477 173.833 172.517 173.819 cv
172.748 173.739 172.978 173.659 173.209 173.579 cv
173.855 176.484 li
1 /1 /CSD get_res sepcs
.0976547 sep
f
172.395 173.84 mo
172.239 173.84 172.094 173.742 172.04 173.587 cv
171.973 173.391 172.077 173.177 172.273 173.11 cv
172.53 173.021 172.788 172.932 173.045 172.842 cv
173.209 173.579 li
172.978 173.659 172.748 173.739 172.517 173.819 cv
172.477 173.833 172.435 173.84 172.395 173.84 cv
1 /1 /CSD get_res sepcs
.146867 sep
f
318.143 51.1855 mo
317.306 52.7051 316.434 54.2277 315.527 55.7528 cv
315.422 55.9308 315.191 55.9893 315.013 55.8835 cv
314.835 55.7777 314.777 55.5476 314.883 55.3696 cv
315.785 53.8514 316.653 52.3358 317.486 50.8234 cv
317.586 50.6421 317.814 50.5761 317.996 50.676 cv
318.177 50.7759 318.243 51.004 318.143 51.1855 cv
313.572 58.963 mo
312.652 60.4368 311.702 61.9118 310.723 63.3872 cv
310.608 63.5598 310.376 63.6068 310.203 63.4922 cv
310.031 63.3777 309.983 63.1449 310.098 62.9724 cv
311.074 61.5028 312.02 60.0337 312.936 58.566 cv
313.045 58.3903 313.277 58.3367 313.452 58.4463 cv
313.628 58.556 313.682 58.7873 313.572 58.963 cv
308.615 66.4981 mo
307.626 67.9285 306.61 69.3585 305.568 70.7873 cv
305.446 70.9547 305.211 70.9914 305.044 70.8694 cv
304.877 70.7475 304.84 70.5129 304.962 70.3456 cv
306 68.9216 307.012 67.4967 307.998 66.0716 cv
308.116 65.9013 308.349 65.8586 308.519 65.9765 cv
308.69 66.0942 308.732 66.3278 308.615 66.4981 cv
303.329 73.8045 mo
302.28 75.1938 301.207 76.5812 300.112 77.9662 cv
299.983 78.1286 299.747 78.1561 299.585 78.0276 cv
299.422 77.8991 299.395 77.6634 299.523 77.5009 cv
300.616 76.1202 301.685 74.7372 302.73 73.3526 cv
302.855 73.1874 303.09 73.1545 303.256 73.2794 cv
303.421 73.4042 303.454 73.6392 303.329 73.8045 cv
297.758 80.8946 mo
296.656 82.2445 295.534 83.5914 294.391 84.9346 cv
294.257 85.0924 294.02 85.1116 293.862 84.9772 cv
293.704 84.8432 293.685 84.6064 293.82 84.4486 cv
294.959 83.1093 296.079 81.7663 297.177 80.4203 cv
297.308 80.2599 297.544 80.2359 297.705 80.3669 cv
297.865 80.4979 297.889 80.7341 297.758 80.8946 cv
291.936 87.7783 mo
290.788 89.0907 289.62 90.3988 288.435 91.7022 cv
288.296 91.8554 288.058 91.8667 287.905 91.7272 cv
287.752 91.588 287.741 91.3508 287.88 91.1975 cv
289.062 89.8976 290.227 88.593 291.372 87.2843 cv
291.509 87.1286 291.745 87.1128 291.901 87.2491 cv
292.057 87.3856 292.073 87.6225 291.936 87.7783 cv
285.89 94.4643 mo
284.699 95.7401 283.491 97.0109 282.267 98.2757 cv
282.123 98.4246 281.885 98.4285 281.737 98.2845 cv
281.588 98.1404 281.584 97.9031 281.728 97.7542 cv
282.949 96.4925 284.153 95.225 285.342 93.9524 cv
285.483 93.801 285.72 93.7929 285.872 93.9342 cv
286.023 94.0755 286.031 94.3128 285.89 94.4641 cv
285.89 94.4643 li
279.639 100.959 mo
278.409 102.199 277.164 103.433 275.905 104.661 cv
275.756 104.805 275.519 104.802 275.374 104.654 cv
275.23 104.506 275.233 104.268 275.381 104.124 cv
276.637 102.899 277.879 101.668 279.106 100.431 cv
279.252 100.283 279.49 100.283 279.637 100.428 cv
279.784 100.574 279.785 100.812 279.639 100.959 cv
279.639 100.959 li
273.2 107.266 mo
271.934 108.472 270.654 109.67 269.362 110.86 cv
269.21 111.001 268.973 110.991 268.833 110.839 cv
268.692 110.686 268.702 110.449 268.854 110.309 cv
270.143 109.121 271.419 107.926 272.683 106.723 cv
272.833 106.58 273.07 106.586 273.213 106.736 cv
273.356 106.886 273.35 107.123 273.2 107.266 cv
266.594 113.382 mo
265.296 114.551 263.987 115.711 262.667 116.863 cv
262.511 116.999 262.274 116.983 262.138 116.827 cv
262.002 116.671 262.018 116.434 262.174 116.298 cv
263.491 115.149 264.797 113.991 266.092 112.825 cv
266.246 112.686 266.483 112.699 266.622 112.853 cv
266.76 113.007 266.748 113.244 266.594 113.382 cv
259.828 119.312 mo
258.496 120.448 257.155 121.574 255.804 122.69 cv
255.644 122.822 255.408 122.8 255.276 122.64 cv
255.144 122.481 255.166 122.244 255.326 122.112 cv
256.674 120.998 258.013 119.875 259.341 118.742 cv
259.498 118.607 259.735 118.626 259.869 118.784 cv
260.004 118.941 259.985 119.178 259.828 119.312 cv
252.896 125.066 mo
251.533 126.167 250.161 127.258 248.78 128.339 cv
248.617 128.467 248.381 128.438 248.254 128.275 cv
248.126 128.112 248.155 127.876 248.318 127.748 cv
249.695 126.67 251.065 125.581 252.425 124.482 cv
252.586 124.352 252.822 124.377 252.953 124.538 cv
253.083 124.7 253.058 124.936 252.896 125.066 cv
245.807 130.639 mo
244.412 131.706 243.009 132.761 241.6 133.805 cv
241.433 133.928 241.198 133.893 241.075 133.726 cv
240.952 133.56 240.987 133.325 241.153 133.202 cv
242.56 132.161 243.959 131.108 245.351 130.043 cv
245.515 129.918 245.751 129.949 245.877 130.114 cv
246.002 130.278 245.971 130.513 245.807 130.639 cv
238.562 136.027 mo
237.136 137.058 235.704 138.076 234.266 139.081 cv
234.096 139.2 233.862 139.159 233.744 138.989 cv
233.625 138.819 233.667 138.586 233.836 138.467 cv
235.271 137.464 236.7 136.448 238.122 135.42 cv
238.29 135.298 238.525 135.336 238.646 135.504 cv
238.767 135.672 238.73 135.906 238.562 136.027 cv
238.562 136.027 li
231.176 141.216 mo
229.725 142.205 228.269 143.181 226.808 144.143 cv
226.635 144.257 226.402 144.209 226.288 144.036 cv
226.174 143.863 226.222 143.63 226.395 143.516 cv
227.853 142.557 229.305 141.583 230.753 140.596 cv
230.924 140.479 231.157 140.523 231.274 140.694 cv
231.391 140.865 231.347 141.099 231.176 141.216 cv
223.659 146.189 mo
222.179 147.139 220.696 148.073 219.209 148.991 cv
219.033 149.1 218.802 149.045 218.693 148.869 cv
218.584 148.693 218.638 148.462 218.815 148.353 cv
220.298 147.437 221.778 146.505 223.254 145.558 cv
223.428 145.446 223.66 145.497 223.772 145.671 cv
223.884 145.846 223.833 146.078 223.659 146.189 cv
216.001 150.945 mo
214.493 151.851 212.982 152.74 211.47 153.613 cv
211.29 153.716 211.061 153.655 210.957 153.475 cv
210.854 153.296 210.915 153.066 211.095 152.963 cv
212.604 152.093 214.111 151.206 215.615 150.302 cv
215.793 150.196 216.023 150.253 216.13 150.431 cv
216.236 150.608 216.179 150.839 216.001 150.945 cv
208.203 155.467 mo
206.666 156.327 205.128 157.168 203.589 157.99 cv
203.406 158.088 203.179 158.019 203.082 157.836 cv
202.984 157.654 203.053 157.426 203.236 157.329 cv
204.77 156.509 206.304 155.67 207.837 154.813 cv
208.018 154.712 208.247 154.776 208.348 154.957 cv
208.449 155.138 208.384 155.366 208.203 155.467 cv
208.203 155.467 li
200.264 159.737 mo
198.697 160.546 197.131 161.335 195.566 162.103 cv
195.38 162.194 195.155 162.117 195.064 161.931 cv
194.973 161.745 195.05 161.521 195.236 161.429 cv
196.796 160.664 198.358 159.878 199.92 159.071 cv
200.104 158.976 200.33 159.048 200.425 159.232 cv
200.52 159.416 200.448 159.643 200.264 159.737 cv
192.181 163.731 mo
190.584 164.484 188.99 165.215 187.398 165.922 cv
187.209 166.006 186.987 165.921 186.903 165.732 cv
186.819 165.542 186.904 165.321 187.094 165.237 cv
188.68 164.532 190.269 163.804 191.861 163.053 cv
192.048 162.965 192.271 163.045 192.36 163.232 cv
192.448 163.42 192.368 163.643 192.181 163.731 cv
192.181 163.731 li
183.952 167.419 mo
182.326 168.109 180.703 168.775 179.084 169.414 cv
178.892 169.49 178.674 169.396 178.598 169.203 cv
178.522 169.011 178.616 168.793 178.809 168.717 cv
180.421 168.08 182.038 167.417 183.659 166.729 cv
183.85 166.648 184.07 166.737 184.151 166.927 cv
184.232 167.118 184.143 167.338 183.952 167.419 cv
175.577 170.763 mo
174.072 171.325 172.572 171.864 171.077 172.379 cv
170.881 172.447 170.668 172.342 170.6 172.147 cv
170.533 171.951 170.637 171.737 170.833 171.67 cv
172.321 171.157 173.815 170.62 175.314 170.06 cv
175.508 169.988 175.724 170.086 175.797 170.28 cv
175.869 170.474 175.771 170.69 175.577 170.762 cv
175.577 170.763 li
1 /0 /CSD get_res sepcs
.749 sep
f
172.355 174.984 mo
162.605 174.984 li
170.855 168.984 li
172.355 174.984 li
cp
ef
315.995 87.5796 mo
315.962 87.5796 315.929 87.5752 315.896 87.5661 cv
315.428 87.4378 314.959 87.3103 314.487 87.1838 cv
314.634 86.9621 314.787 86.744 314.944 86.53 cv
315.329 86.6337 315.712 86.738 316.094 86.8429 cv
316.294 86.8977 316.411 87.1041 316.357 87.3038 cv
316.311 87.4702 316.16 87.5796 315.995 87.5796 cv
312.965 86.7799 mo
312.624 86.6905 312.282 86.6015 311.938 86.513 cv
311.738 86.4613 311.617 86.2568 311.669 86.0563 cv
311.712 85.8871 311.865 85.7747 312.032 85.7747 cv
312.063 85.7747 312.094 85.7786 312.126 85.7867 cv
312.551 85.8964 312.975 86.0068 313.397 86.1178 cv
313.248 86.3353 313.104 86.5556 312.965 86.7799 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
314.487 87.1838 mo
313.982 87.0481 313.475 86.9136 312.965 86.7799 cv
313.104 86.5556 313.248 86.3353 313.397 86.1178 cv
313.915 86.2542 314.431 86.3916 314.944 86.53 cv
314.787 86.744 314.634 86.9621 314.487 87.1838 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
308.394 85.613 mo
308.365 85.613 308.335 85.6096 308.305 85.6023 cv
306.625 85.1929 304.923 84.794 303.199 84.4056 cv
302.997 84.3601 302.87 84.1593 302.916 83.9573 cv
302.955 83.783 303.11 83.6647 303.281 83.6647 cv
303.309 83.6647 303.336 83.6677 303.364 83.6739 cv
305.092 84.0633 306.799 84.4632 308.483 84.8736 cv
308.684 84.9226 308.807 85.1255 308.758 85.3267 cv
308.717 85.4981 308.563 85.613 308.394 85.613 cv
80.9602 85.0831 mo
80.7975 84.3509 li
82.1425 84.0346 83.5006 83.7248 84.871 83.4216 cv
84.8983 83.4156 84.9255 83.4127 84.9523 83.4127 cv
85.1244 83.4127 85.2794 83.5319 85.3182 83.7067 cv
85.363 83.909 85.2352 84.1092 85.0331 84.1539 cv
83.6628 84.4571 82.3049 84.7668 80.9602 85.0831 cv
299.619 83.6118 mo
299.593 83.6118 299.566 83.6091 299.54 83.6035 cv
299.148 83.52 298.755 83.437 298.361 83.3545 cv
298.541 83.1367 298.72 82.9189 298.899 82.7009 cv
299.165 82.757 299.431 82.8134 299.696 82.8699 cv
299.899 82.9131 300.028 83.1124 299.985 83.3149 cv
299.947 83.4911 299.792 83.6118 299.619 83.6118 cv
297.531 83.1817 mo
297.06 83.0841 296.586 82.9872 296.112 82.8911 cv
296.293 82.6729 296.475 82.4547 296.655 82.2363 cv
297.129 82.3327 297.6 82.4297 298.071 82.5276 cv
297.891 82.7457 297.712 82.9637 297.531 83.1817 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
298.361 83.3545 mo
298.085 83.2966 297.809 83.239 297.531 83.1817 cv
297.712 82.9637 297.891 82.7457 298.071 82.5276 cv
298.347 82.5851 298.623 82.6429 298.899 82.7009 cv
298.72 82.9189 298.541 83.1367 298.361 83.3545 cv
1 /1 /CSD get_res sepcs
.146867 sep
f
88.618 83.3737 mo
88.4443 83.3737 88.2884 83.2523 88.2515 83.0755 cv
88.209 82.8728 88.3389 82.674 88.5416 82.6315 cv
90.2417 82.2756 91.9595 81.9295 93.6942 81.593 cv
93.7182 81.5884 93.7423 81.5861 93.7659 81.5861 cv
93.9419 81.5861 94.0989 81.7106 94.1337 81.8898 cv
94.1731 82.0931 94.0402 82.29 93.8369 82.3294 cv
92.1059 82.665 90.3917 83.0104 88.6953 83.3656 cv
88.6694 83.3711 88.6435 83.3737 88.618 83.3737 cv
295.275 82.7229 mo
294.985 82.6648 294.694 82.607 294.402 82.5494 cv
294.199 82.5094 294.066 82.3121 294.107 82.1089 cv
294.142 81.9303 294.299 81.8065 294.474 81.8065 cv
294.498 81.8065 294.523 81.8088 294.547 81.8136 cv
294.973 81.8976 295.398 81.9823 295.821 82.0675 cv
295.64 82.2861 295.458 82.5044 295.275 82.7229 cv
290.792 81.8498 mo
290.769 81.8498 290.746 81.8477 290.723 81.8434 cv
289.018 81.5251 287.296 81.2162 285.559 80.9163 cv
285.355 80.8812 285.218 80.6871 285.254 80.483 cv
285.285 80.3006 285.443 80.1717 285.623 80.1717 cv
285.644 80.1717 285.665 80.1735 285.687 80.1773 cv
287.427 80.4777 289.152 80.7872 290.86 81.1061 cv
291.064 81.144 291.198 81.3399 291.16 81.5435 cv
291.126 81.7239 290.969 81.8498 290.792 81.8498 cv
97.4505 81.6412 mo
97.273 81.6412 97.1153 81.5146 97.0821 81.3337 cv
97.0447 81.13 97.1796 80.9345 97.3833 80.8971 cv
97.3833 80.8973 li
99.0936 80.5835 100.819 80.2789 102.559 79.9837 cv
102.58 79.9801 102.601 79.9784 102.622 79.9784 cv
102.802 79.9784 102.96 80.1078 102.991 80.2908 cv
103.026 80.4949 102.889 80.6886 102.684 80.7232 cv
100.948 81.0178 99.2257 81.3217 97.5186 81.635 cv
97.4957 81.6392 97.473 81.6412 97.4505 81.6412 cv
281.925 80.3013 mo
281.905 80.3013 281.884 80.2997 281.864 80.2963 cv
280.15 80.0168 278.422 79.7461 276.681 79.4842 cv
276.476 79.4533 276.335 79.2624 276.366 79.0574 cv
276.394 78.8716 276.554 78.7382 276.736 78.7382 cv
276.755 78.7382 276.773 78.7396 276.792 78.7424 cv
278.537 79.0048 280.268 79.276 281.985 79.5561 cv
282.189 79.5894 282.328 79.7822 282.294 79.9865 cv
282.264 80.1705 282.105 80.3013 281.925 80.3013 cv
106.322 80.1182 mo
106.141 80.1182 105.981 79.9868 105.952 79.8024 cv
105.919 79.5979 106.058 79.4055 106.263 79.3727 cv
107.981 79.0972 109.713 78.8306 111.457 78.5727 cv
111.475 78.57 111.494 78.5687 111.512 78.5687 cv
111.695 78.5687 111.855 78.7026 111.882 78.8888 cv
111.913 79.0937 111.771 79.2845 111.566 79.3147 cv
109.825 79.572 108.097 79.8383 106.382 80.1134 cv
106.361 80.1166 106.341 80.1182 106.322 80.1182 cv
273.026 78.9462 mo
273.009 78.9462 272.991 78.9449 272.973 78.9424 cv
271.252 78.6982 269.519 78.4625 267.774 78.2354 cv
267.569 78.2086 267.424 78.0204 267.451 77.815 cv
267.475 77.6261 267.637 77.4885 267.822 77.4885 cv
267.838 77.4885 267.855 77.4895 267.871 77.4917 cv
269.618 77.7192 271.354 77.9553 273.078 78.1998 cv
273.283 78.2288 273.426 78.4187 273.397 78.6238 cv
273.37 78.811 273.21 78.9462 273.026 78.9462 cv
115.223 78.7857 mo
115.039 78.7857 114.879 78.65 114.852 78.4625 cv
114.824 78.2573 114.967 78.068 115.172 78.0393 cv
116.897 77.7989 118.634 77.5669 120.381 77.3435 cv
120.397 77.3415 120.413 77.3405 120.429 77.3405 cv
120.615 77.3405 120.776 77.4786 120.8 77.6679 cv
120.826 77.8734 120.681 78.0611 120.476 78.0874 cv
118.732 78.3105 116.998 78.5421 115.276 78.7821 cv
115.258 78.7845 115.241 78.7857 115.223 78.7857 cv
264.102 77.7685 mo
264.087 77.7685 264.072 77.7676 264.056 77.7657 cv
262.329 77.5545 260.591 77.3512 258.845 77.1562 cv
258.639 77.1331 258.491 76.9476 258.514 76.7418 cv
258.535 76.55 258.697 76.4084 258.886 76.4084 cv
258.9 76.4084 258.914 76.4091 258.928 76.4107 cv
260.677 76.6061 262.417 76.8097 264.147 77.0213 cv
264.353 77.0465 264.499 77.2334 264.474 77.439 cv
264.451 77.6291 264.289 77.7685 264.102 77.7685 cv
124.15 77.6291 mo
123.963 77.6291 123.801 77.4892 123.778 77.2988 cv
123.753 77.0931 123.9 76.9064 124.105 76.8817 cv
125.836 76.6739 127.577 76.4742 129.326 76.2827 cv
129.34 76.2811 129.353 76.2804 129.367 76.2804 cv
129.556 76.2804 129.718 76.4226 129.739 76.6147 cv
129.762 76.8205 129.613 77.0057 129.407 77.0283 cv
127.661 77.2195 125.923 77.4188 124.195 77.6264 cv
124.18 77.6282 124.165 77.6291 124.15 77.6291 cv
255.158 76.7558 mo
255.145 76.7558 255.132 76.7551 255.118 76.7537 cv
253.387 76.573 251.646 76.4002 249.897 76.2354 cv
249.691 76.2158 249.539 76.033 249.559 75.8268 cv
249.577 75.6326 249.741 75.4869 249.932 75.4869 cv
249.944 75.4869 249.956 75.4874 249.967 75.4886 cv
251.719 75.6537 253.462 75.8269 255.196 76.0078 cv
255.402 76.0293 255.552 76.2137 255.53 76.4197 cv
255.51 76.6124 255.348 76.7558 255.158 76.7558 cv
133.095 76.6358 mo
132.906 76.6358 132.743 76.492 132.723 76.299 cv
132.702 76.0929 132.852 75.9089 133.058 75.8878 cv
134.794 75.7105 136.537 75.5411 138.288 75.3797 cv
138.299 75.3786 138.311 75.3781 138.323 75.3781 cv
138.514 75.3781 138.678 75.5241 138.696 75.7187 cv
138.715 75.9249 138.563 76.1075 138.357 76.1265 cv
136.608 76.2877 134.867 76.4569 133.134 76.6338 cv
133.121 76.6352 133.108 76.6358 133.095 76.6358 cv
246.198 75.8977 mo
246.187 75.8977 246.176 75.8972 246.165 75.8963 cv
244.428 75.7445 242.685 75.6005 240.935 75.4642 cv
240.728 75.4481 240.574 75.2677 240.59 75.0612 cv
240.606 74.8647 240.77 74.7153 240.964 74.7153 cv
240.973 74.7153 240.983 74.7157 240.993 74.7165 cv
240.993 74.7165 li
242.745 74.8529 244.491 74.9972 246.23 75.1491 cv
246.436 75.1671 246.589 75.349 246.571 75.5554 cv
246.554 75.7505 246.39 75.8977 246.198 75.8977 cv
142.049 75.7972 mo
141.856 75.7972 141.692 75.6495 141.676 75.4541 cv
141.658 75.2478 141.811 75.0663 142.017 75.0486 cv
143.21 74.9468 144.406 74.8487 145.605 74.7541 cv
145.605 75.5064 li
144.428 75.5994 143.253 75.6959 142.081 75.7958 cv
142.07 75.7967 142.059 75.7972 142.049 75.7972 cv
146.605 75.4284 mo
146.605 74.6762 li
146.819 74.6597 147.034 74.6433 147.248 74.627 cv
147.258 74.6263 147.267 74.6259 147.277 74.6259 cv
147.471 74.6259 147.635 74.7757 147.65 74.9725 cv
147.666 75.1791 147.511 75.3592 147.305 75.3749 cv
147.071 75.3926 146.838 75.4104 146.605 75.4284 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
145.605 75.5064 mo
145.605 74.7541 li
145.938 74.7279 146.271 74.7019 146.605 74.6762 cv
146.605 75.4284 li
146.271 75.4541 145.938 75.4801 145.605 75.5064 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
237.224 75.1863 mo
237.215 75.1863 237.206 75.186 237.197 75.1853 cv
235.455 75.0611 233.706 74.9444 231.953 74.8353 cv
231.746 74.8224 231.589 74.6444 231.602 74.4376 cv
231.614 74.2389 231.779 74.086 231.976 74.086 cv
231.984 74.086 231.992 74.0862 231.999 74.0867 cv
231.999 74.0866 li
233.755 74.196 235.506 74.3128 237.251 74.4372 cv
237.457 74.4519 237.613 74.6314 237.598 74.8379 cv
237.584 75.0355 237.419 75.1863 237.224 75.1863 cv
151.009 75.1047 mo
150.814 75.1047 150.649 74.9534 150.636 74.7557 cv
150.621 74.549 150.777 74.37 150.984 74.3556 cv
152.725 74.2348 154.471 74.1217 156.221 74.016 cv
156.229 74.0155 156.237 74.0153 156.244 74.0153 cv
156.441 74.0153 156.606 74.1687 156.618 74.3678 cv
156.631 74.5745 156.473 74.7522 156.267 74.7647 cv
154.518 74.8702 152.774 74.9832 151.036 75.1038 cv
151.027 75.1044 151.018 75.1047 151.009 75.1047 cv
228.224 74.6143 mo
228.217 74.6143 228.21 74.6141 228.203 74.6137 cv
226.458 74.5162 224.709 74.4261 222.955 74.3435 cv
222.749 74.3337 222.589 74.1581 222.599 73.9512 cv
222.608 73.7504 222.774 73.5938 222.973 73.5938 cv
222.979 73.5938 222.985 73.594 222.991 73.5942 cv
224.746 73.677 226.498 73.7673 228.245 73.8649 cv
228.452 73.8764 228.61 74.0535 228.598 74.2603 cv
228.587 74.4598 228.422 74.6143 228.224 74.6143 cv
159.983 74.5516 mo
159.785 74.5516 159.619 74.3967 159.608 74.1968 cv
159.597 73.99 159.756 73.8134 159.963 73.8021 cv
161.707 73.7079 163.455 73.6212 165.206 73.5417 cv
165.212 73.5415 165.217 73.5414 165.223 73.5414 cv
165.422 73.5414 165.588 73.6982 165.598 73.8995 cv
165.607 74.1064 165.447 74.2816 165.24 74.291 cv
163.491 74.3702 161.745 74.457 160.003 74.551 cv
159.996 74.5514 159.989 74.5516 159.983 74.5516 cv
219.22 74.1784 mo
219.215 74.1784 219.21 74.1783 219.204 74.178 cv
217.458 74.1065 215.708 74.0422 213.955 73.9853 cv
213.748 73.9786 213.586 73.8055 213.593 73.5984 cv
213.599 73.3956 213.766 73.2356 213.967 73.2356 cv
213.971 73.2356 213.976 73.2357 213.98 73.2358 cv
215.734 73.2928 217.486 73.357 219.235 73.4287 cv
219.442 73.4373 219.603 73.6119 219.594 73.8188 cv
219.586 74.0205 219.42 74.1784 219.22 74.1784 cv
168.966 74.1333 mo
168.765 74.1333 168.599 73.975 168.591 73.773 cv
168.583 73.5661 168.744 73.3917 168.951 73.3836 cv
170.698 73.3151 172.447 73.2541 174.199 73.2003 cv
174.203 73.2002 174.207 73.2002 174.211 73.2002 cv
174.413 73.2002 174.579 73.3605 174.585 73.5637 cv
174.592 73.7708 174.429 73.9437 174.222 73.95 cv
172.473 74.0037 170.725 74.0647 168.981 74.133 cv
168.976 74.1332 168.971 74.1333 168.966 74.1333 cv
210.214 73.8751 mo
210.211 73.8751 210.207 73.8751 210.204 73.875 cv
208.456 73.8286 206.706 73.7898 204.954 73.758 cv
204.747 73.7544 204.582 73.5835 204.586 73.3763 cv
204.59 73.1715 204.757 73.0081 204.961 73.0081 cv
204.963 73.0081 204.966 73.0081 204.968 73.0082 cv
206.722 73.0399 208.474 73.0789 210.224 73.1252 cv
210.431 73.1307 210.594 73.3029 210.589 73.51 cv
210.583 73.7137 210.417 73.8751 210.214 73.8751 cv
177.957 73.8465 mo
177.754 73.8465 177.587 73.6847 177.582 73.4808 cv
177.577 73.2737 177.741 73.1018 177.948 73.0967 cv
177.948 73.0967 li
179.697 73.0536 181.447 73.0177 183.199 72.989 cv
183.201 72.989 183.203 72.989 183.205 72.989 cv
183.41 72.989 183.577 73.1529 183.58 73.3578 cv
183.584 73.5649 183.418 73.7355 183.211 73.7389 cv
181.462 73.7675 179.713 73.8033 177.966 73.8464 cv
177.963 73.8465 177.96 73.8465 177.957 73.8465 cv
201.208 73.7014 mo
201.207 73.7014 201.205 73.7014 201.204 73.7014 cv
199.455 73.6802 197.705 73.6663 195.955 73.6596 cv
195.747 73.6588 195.58 73.4903 195.581 73.2831 cv
195.582 73.0766 195.75 72.9096 195.956 72.9096 cv
195.956 72.9096 195.957 72.9096 195.957 72.9096 cv
197.71 72.9163 199.462 72.9302 201.213 72.9515 cv
201.42 72.954 201.586 73.124 201.583 73.3311 cv
201.581 73.5365 201.413 73.7014 201.208 73.7014 cv
186.954 73.6889 mo
186.749 73.6889 186.582 73.5237 186.58 73.3178 cv
186.577 73.1107 186.744 72.9412 186.951 72.939 cv
188.701 72.9208 190.453 72.91 192.204 72.9064 cv
192.204 72.9064 192.204 72.9064 192.205 72.9064 cv
192.411 72.9064 192.579 73.0738 192.58 73.2806 cv
192.58 73.4876 192.413 73.6559 192.205 73.6563 cv
190.456 73.66 188.707 73.6709 186.958 73.6889 cv
186.957 73.6889 186.956 73.6889 186.954 73.6889 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
296.112 82.8911 mo
295.833 82.8348 295.554 82.7787 295.275 82.7229 cv
295.458 82.5044 295.64 82.2861 295.821 82.0675 cv
296.1 82.1235 296.378 82.1798 296.655 82.2363 cv
296.475 82.4547 296.293 82.6729 296.112 82.8911 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
81.605 87.9845 mo
71.6306 87.2721 li
71.5769 87.1785 71.5225 87.0856 71.4671 86.9931 cv
80.1049 81.2345 li
80.7975 84.3509 li
80.4467 84.4335 80.0969 84.5164 79.7479 84.5998 cv
79.7479 84.5997 li
79.5464 84.6479 79.4221 84.8501 79.4702 85.0517 cv
79.5113 85.2238 79.665 85.3396 79.8345 85.3396 cv
79.8634 85.3396 79.8928 85.3362 79.9221 85.3292 cv
80.2673 85.2467 80.6133 85.1647 80.9602 85.0831 cv
81.605 87.9845 li
1 /1 /CSD get_res sepcs
.0976547 sep
f
71.6306 87.2721 mo
71.105 87.2345 li
71.4671 86.9931 li
71.5225 87.0856 71.5769 87.1785 71.6306 87.2721 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
79.8345 85.3396 mo
79.665 85.3396 79.5113 85.2238 79.4702 85.0517 cv
79.4221 84.8501 79.5464 84.6479 79.7479 84.5997 cv
79.7479 84.5998 li
80.0969 84.5164 80.4467 84.4335 80.7975 84.3509 cv
80.9602 85.0831 li
80.6133 85.1647 80.2673 85.2467 79.9221 85.3292 cv
79.8928 85.3362 79.8634 85.3396 79.8345 85.3396 cv
1 /1 /CSD get_res sepcs
.146867 sep
f
78.395 83.5245 mo
147.025 67.1245 250.205 68.0945 314.555 85.7645 cv
1 /0 /CSD get_res sepcs
.749 sep
@
80.105 86.4845 mo
69.605 85.7345 li
78.605 80.4845 li
80.105 86.4845 li
cp
ef
259.948 231.355 mo
259.741 231.355 259.573 231.188 259.573 230.981 cv
259.572 230.774 259.739 230.606 259.946 230.605 cv
261.695 230.598 263.441 230.565 265.182 230.504 cv
265.186 230.504 265.191 230.504 265.195 230.504 cv
265.396 230.504 265.562 230.663 265.569 230.865 cv
265.577 231.072 265.415 231.246 265.208 231.253 cv
263.459 231.314 261.706 231.348 259.949 231.355 cv
259.949 231.355 259.948 231.355 259.948 231.355 cv
256.202 231.327 mo
256.2 231.327 256.197 231.327 256.195 231.327 cv
256.195 231.327 li
254.447 231.295 252.694 231.236 250.939 231.149 cv
250.732 231.139 250.573 230.963 250.583 230.756 cv
250.593 230.556 250.759 230.4 250.957 230.4 cv
250.963 230.4 250.97 230.4 250.976 230.4 cv
252.724 230.486 254.468 230.545 256.209 230.577 cv
256.416 230.581 256.581 230.752 256.577 230.959 cv
256.573 231.164 256.406 231.327 256.202 231.327 cv
268.931 231.081 mo
268.734 231.081 268.569 230.927 268.557 230.728 cv
268.545 230.521 268.703 230.344 268.91 230.332 cv
270.651 230.232 272.387 230.105 274.118 229.951 cv
274.13 229.95 274.141 229.949 274.152 229.949 cv
274.344 229.949 274.508 230.096 274.525 230.291 cv
274.543 230.497 274.391 230.68 274.185 230.698 cv
272.446 230.853 270.702 230.98 268.953 231.08 cv
268.946 231.081 268.938 231.081 268.931 231.081 cv
247.219 230.925 mo
247.211 230.925 247.202 230.925 247.192 230.924 cv
245.449 230.8 243.702 230.65 241.953 230.472 cv
241.747 230.451 241.597 230.268 241.618 230.061 cv
241.638 229.868 241.801 229.724 241.991 229.724 cv
242.004 229.724 242.016 229.725 242.029 229.726 cv
243.771 229.903 245.509 230.053 247.246 230.176 cv
247.452 230.191 247.608 230.37 247.593 230.577 cv
247.579 230.774 247.415 230.925 247.219 230.925 cv
277.87 230.326 mo
277.682 230.326 277.52 230.184 277.498 229.993 cv
277.475 229.787 277.623 229.601 277.829 229.578 cv
279.563 229.385 281.29 229.163 283.012 228.915 cv
283.03 228.913 283.048 228.911 283.066 228.911 cv
283.249 228.911 283.41 229.046 283.437 229.233 cv
283.466 229.438 283.324 229.628 283.119 229.658 cv
283.119 229.658 li
281.389 229.907 279.654 230.129 277.912 230.324 cv
277.898 230.325 277.884 230.326 277.87 230.326 cv
238.271 230.056 mo
238.255 230.056 238.24 230.055 238.224 230.053 cv
236.49 229.84 234.754 229.6 233.016 229.333 cv
232.811 229.302 232.671 229.111 232.702 228.906 cv
232.731 228.72 232.891 228.588 233.073 228.588 cv
233.092 228.588 233.111 228.589 233.13 228.592 cv
234.861 228.857 236.589 229.097 238.316 229.309 cv
238.522 229.334 238.668 229.522 238.642 229.727 cv
238.619 229.917 238.457 230.056 238.271 230.056 cv
286.761 229.086 mo
286.581 229.086 286.422 228.956 286.392 228.773 cv
286.357 228.569 286.495 228.375 286.699 228.341 cv
288.42 228.053 290.134 227.738 291.841 227.395 cv
291.866 227.39 291.891 227.388 291.915 227.388 cv
292.09 227.388 292.247 227.511 292.283 227.689 cv
292.323 227.892 292.192 228.09 291.989 228.13 cv
291.989 228.13 li
290.274 228.474 288.552 228.791 286.823 229.081 cv
286.802 229.084 286.782 229.086 286.761 229.086 cv
229.379 228.731 mo
229.358 228.731 229.336 228.729 229.314 228.726 cv
227.594 228.425 225.872 228.098 224.149 227.744 cv
223.946 227.703 223.816 227.505 223.857 227.302 cv
223.894 227.124 224.05 227.002 224.224 227.002 cv
224.249 227.002 224.275 227.005 224.3 227.01 cv
226.016 227.362 227.73 227.687 229.443 227.987 cv
229.647 228.023 229.784 228.217 229.748 228.421 cv
229.716 228.603 229.558 228.731 229.379 228.731 cv
295.576 227.36 mo
295.404 227.36 295.249 227.241 295.21 227.067 cv
295.165 226.865 295.292 226.664 295.494 226.619 cv
297.197 226.236 298.892 225.827 300.579 225.391 cv
300.611 225.383 300.642 225.379 300.673 225.379 cv
300.84 225.379 300.992 225.491 301.036 225.66 cv
301.088 225.86 300.967 226.065 300.767 226.117 cv
299.072 226.555 297.369 226.966 295.658 227.35 cv
295.631 227.357 295.603 227.36 295.576 227.36 cv
220.566 226.963 mo
220.538 226.963 220.511 226.96 220.483 226.953 cv
218.78 226.568 217.077 226.157 215.374 225.719 cv
215.173 225.668 215.052 225.464 215.103 225.263 cv
215.147 225.094 215.299 224.981 215.466 224.981 cv
215.497 224.981 215.529 224.985 215.56 224.993 cv
217.257 225.428 218.953 225.838 220.649 226.222 cv
220.85 226.268 220.977 226.469 220.931 226.671 cv
220.892 226.845 220.737 226.963 220.566 226.963 cv
304.288 225.149 mo
304.125 225.149 303.974 225.042 303.927 224.876 cv
303.871 224.677 303.987 224.47 304.186 224.413 cv
305.865 223.938 307.536 223.435 309.198 222.906 cv
309.236 222.894 309.275 222.888 309.312 222.888 cv
309.471 222.888 309.619 222.99 309.669 223.149 cv
309.732 223.346 309.623 223.557 309.426 223.62 cv
307.756 224.152 306.077 224.657 304.391 225.135 cv
304.356 225.145 304.322 225.149 304.288 225.149 cv
211.852 224.765 mo
211.818 224.765 211.784 224.76 211.751 224.751 cv
210.07 224.284 208.388 223.791 206.708 223.273 cv
206.51 223.212 206.399 223.003 206.46 222.805 cv
206.509 222.643 206.657 222.54 206.818 222.54 cv
206.854 222.54 206.891 222.545 206.928 222.557 cv
208.603 223.072 210.277 223.563 211.952 224.029 cv
212.151 224.084 212.268 224.291 212.213 224.49 cv
212.166 224.656 212.016 224.765 211.852 224.765 cv
312.87 222.459 mo
312.714 222.459 312.569 222.362 312.516 222.206 cv
312.448 222.01 312.552 221.797 312.748 221.73 cv
314.399 221.162 316.04 220.567 317.672 219.946 cv
317.716 219.929 317.761 219.921 317.806 219.921 cv
317.957 219.921 318.099 220.014 318.156 220.163 cv
318.23 220.357 318.133 220.573 317.939 220.647 cv
316.299 221.271 314.65 221.868 312.992 222.439 cv
312.952 222.453 312.911 222.459 312.87 222.459 cv
203.245 222.151 mo
203.207 222.151 203.167 222.145 203.128 222.132 cv
201.47 221.585 199.812 221.014 198.156 220.418 cv
197.961 220.348 197.859 220.133 197.93 219.938 cv
197.985 219.785 198.129 219.69 198.283 219.69 cv
198.325 219.69 198.368 219.697 198.41 219.712 cv
200.06 220.306 201.711 220.875 203.363 221.42 cv
203.56 221.485 203.666 221.697 203.602 221.893 cv
203.55 222.051 203.403 222.151 203.245 222.151 cv
321.296 219.297 mo
321.148 219.297 321.008 219.209 320.948 219.064 cv
320.87 218.872 320.962 218.653 321.154 218.575 cv
322.771 217.917 324.378 217.232 325.975 216.521 cv
326.025 216.499 326.077 216.488 326.127 216.488 cv
326.271 216.488 326.408 216.571 326.47 216.711 cv
326.554 216.9 326.469 217.122 326.28 217.206 cv
324.676 217.92 323.061 218.608 321.437 219.27 cv
321.391 219.288 321.343 219.297 321.296 219.297 cv
194.767 219.137 mo
194.722 219.137 194.677 219.129 194.633 219.112 cv
193.002 218.49 191.373 217.843 189.744 217.173 cv
189.553 217.094 189.461 216.875 189.54 216.683 cv
189.6 216.538 189.74 216.451 189.887 216.451 cv
189.935 216.451 189.983 216.46 190.03 216.479 cv
191.652 217.147 193.276 217.792 194.9 218.411 cv
195.094 218.485 195.191 218.702 195.117 218.895 cv
195.06 219.045 194.918 219.137 194.767 219.137 cv
186.433 215.741 mo
186.383 215.741 186.333 215.731 186.284 215.71 cv
184.683 215.015 183.084 214.297 181.486 213.556 cv
181.299 213.468 181.217 213.245 181.304 213.057 cv
181.368 212.921 181.503 212.84 181.645 212.84 cv
181.698 212.84 181.751 212.852 181.802 212.875 cv
183.394 213.614 184.987 214.33 186.583 215.022 cv
186.773 215.104 186.86 215.325 186.777 215.515 cv
186.716 215.656 186.578 215.741 186.433 215.741 cv
329.539 215.673 mo
329.399 215.673 329.264 215.594 329.2 215.458 cv
329.111 215.271 329.191 215.047 329.379 214.959 cv
330.957 214.212 332.525 213.44 334.082 212.642 cv
334.137 212.614 334.195 212.6 334.253 212.6 cv
334.389 212.6 334.521 212.675 334.587 212.804 cv
334.681 212.989 334.609 213.215 334.424 213.309 cv
332.86 214.111 331.285 214.887 329.699 215.637 cv
329.648 215.661 329.593 215.673 329.539 215.673 cv
178.258 211.981 mo
178.203 211.981 178.147 211.969 178.094 211.943 cv
176.525 211.18 174.958 210.394 173.394 209.584 cv
173.21 209.489 173.138 209.263 173.233 209.079 cv
173.3 208.95 173.431 208.876 173.566 208.876 cv
173.624 208.876 173.683 208.889 173.738 208.918 cv
175.297 209.725 176.859 210.508 178.422 211.268 cv
178.608 211.359 178.686 211.583 178.595 211.77 cv
178.53 211.903 178.397 211.981 178.258 211.981 cv
337.576 211.599 mo
337.443 211.599 337.314 211.528 337.246 211.402 cv
337.147 211.22 337.215 210.993 337.397 210.894 cv
338.933 210.062 340.457 209.205 341.97 208.322 cv
342.029 208.287 342.094 208.271 342.158 208.271 cv
342.287 208.271 342.413 208.337 342.483 208.457 cv
342.587 208.636 342.527 208.865 342.348 208.97 cv
340.828 209.857 339.297 210.718 337.754 211.554 cv
337.698 211.584 337.637 211.599 337.576 211.599 cv
170.25 207.874 mo
170.19 207.874 170.129 207.86 170.073 207.829 cv
168.538 207.001 167.005 206.15 165.475 205.276 cv
165.296 205.174 165.233 204.945 165.336 204.765 cv
165.405 204.644 165.532 204.576 165.662 204.576 cv
165.725 204.576 165.789 204.591 165.847 204.625 cv
167.372 205.495 168.899 206.343 170.429 207.169 cv
170.611 207.267 170.679 207.495 170.581 207.677 cv
170.513 207.803 170.384 207.874 170.25 207.874 cv
345.384 207.09 mo
345.258 207.09 345.135 207.026 345.064 206.911 cv
344.955 206.735 345.011 206.504 345.187 206.395 cv
346.676 205.481 348.152 204.542 349.616 203.578 cv
349.68 203.536 349.751 203.516 349.822 203.516 cv
349.944 203.516 350.064 203.575 350.136 203.685 cv
350.25 203.858 350.202 204.09 350.029 204.204 cv
348.558 205.172 347.075 206.116 345.58 207.034 cv
345.518 207.072 345.451 207.09 345.384 207.09 cv
162.422 203.44 mo
162.42 203.44 162.418 203.44 162.416 203.44 cv
162.742 202.869 li
162.812 202.984 162.818 203.133 162.745 203.256 cv
162.675 203.374 162.55 203.44 162.422 203.44 cv
352.941 202.163 mo
352.822 202.163 352.705 202.106 352.632 202.001 cv
352.514 201.83 352.557 201.597 352.728 201.479 cv
354.165 200.486 355.59 199.468 357.002 198.427 cv
357.069 198.377 357.147 198.353 357.224 198.353 cv
357.339 198.353 357.453 198.406 357.526 198.506 cv
357.649 198.672 357.614 198.907 357.447 199.03 cv
356.029 200.077 354.598 201.099 353.154 202.096 cv
353.089 202.141 353.014 202.163 352.941 202.163 cv
360.217 196.844 mo
360.105 196.844 359.994 196.794 359.92 196.699 cv
359.794 196.535 359.824 196.299 359.988 196.173 cv
361.366 195.108 362.732 194.02 364.084 192.909 cv
364.154 192.851 364.238 192.823 364.322 192.823 cv
364.43 192.823 364.538 192.87 364.612 192.96 cv
364.743 193.12 364.72 193.356 364.56 193.488 cv
364.56 193.488 li
363.202 194.604 361.831 195.697 360.446 196.766 cv
360.378 196.819 360.297 196.844 360.217 196.844 cv
367.193 191.161 mo
367.087 191.161 366.982 191.117 366.908 191.03 cv
366.773 190.873 366.791 190.637 366.948 190.502 cv
368.269 189.367 369.576 188.21 370.87 187.03 cv
370.942 186.964 371.032 186.932 371.122 186.932 cv
371.224 186.932 371.326 186.973 371.4 187.054 cv
371.539 187.207 371.528 187.444 371.375 187.584 cv
371.375 187.584 li
370.076 188.769 368.763 189.931 367.437 191.071 cv
367.366 191.131 367.279 191.161 367.193 191.161 cv
373.866 185.125 mo
373.766 185.126 373.668 185.086 373.594 185.009 cv
373.451 184.859 373.457 184.622 373.607 184.479 cv
374.868 183.279 376.114 182.057 377.347 180.812 cv
377.42 180.738 377.517 180.701 377.614 180.701 cv
377.709 180.701 377.804 180.737 377.877 180.809 cv
378.025 180.955 378.026 181.193 377.88 181.34 cv
377.88 181.34 li
376.642 182.589 375.39 183.817 374.124 185.022 cv
374.051 185.091 373.958 185.125 373.866 185.125 cv
380.224 178.76 mo
380.131 178.76 380.038 178.726 379.966 178.657 cv
379.816 178.514 379.81 178.277 379.952 178.126 cv
381.151 176.865 382.335 175.582 383.505 174.277 cv
383.579 174.195 383.682 174.153 383.785 174.153 cv
383.874 174.153 383.963 174.185 384.035 174.249 cv
384.189 174.387 384.202 174.624 384.064 174.778 cv
384.064 174.778 li
382.889 176.088 381.7 177.376 380.496 178.643 cv
380.422 178.721 380.323 178.76 380.224 178.76 cv
386.259 172.086 mo
386.173 172.086 386.086 172.057 386.015 171.996 cv
385.858 171.86 385.84 171.624 385.975 171.467 cv
387.11 170.148 388.231 168.809 389.337 167.449 cv
389.411 167.358 389.519 167.311 389.628 167.311 cv
389.711 167.311 389.795 167.338 389.864 167.395 cv
390.025 167.525 390.049 167.762 389.918 167.922 cv
388.808 169.288 387.683 170.632 386.544 171.956 cv
386.469 172.042 386.365 172.086 386.259 172.086 cv
391.964 165.128 mo
391.883 165.128 391.802 165.102 391.733 165.049 cv
391.57 164.921 391.541 164.686 391.668 164.522 cv
392.739 163.151 393.794 161.76 394.835 160.349 cv
394.908 160.249 395.022 160.197 395.137 160.197 cv
395.214 160.197 395.292 160.221 395.359 160.27 cv
395.526 160.393 395.561 160.628 395.438 160.794 cv
394.394 162.211 393.334 163.607 392.259 164.984 cv
392.185 165.079 392.075 165.128 391.964 165.128 cv
397.332 157.908 mo
397.257 157.908 397.182 157.885 397.116 157.839 cv
396.947 157.719 396.907 157.485 397.026 157.316 cv
398.031 155.897 399.021 154.458 399.996 153 cv
400.068 152.892 400.187 152.833 400.308 152.833 cv
400.38 152.833 400.452 152.854 400.516 152.897 cv
400.688 153.012 400.735 153.245 400.62 153.417 cv
400.62 153.417 li
399.641 154.88 398.647 156.324 397.639 157.749 cv
397.566 157.853 397.45 157.908 397.332 157.908 cv
402.362 150.447 mo
402.293 150.447 402.223 150.428 402.16 150.388 cv
401.986 150.276 401.935 150.044 402.047 149.869 cv
402.986 148.406 403.91 146.924 404.819 145.424 cv
404.889 145.307 405.013 145.243 405.14 145.243 cv
405.206 145.243 405.273 145.26 405.334 145.297 cv
405.511 145.404 405.567 145.635 405.46 145.812 cv
404.548 147.318 403.621 148.806 402.678 150.275 cv
402.606 150.386 402.486 150.447 402.362 150.447 cv
407.052 142.768 mo
406.988 142.768 406.923 142.752 406.864 142.717 cv
406.685 142.613 406.624 142.384 406.728 142.205 cv
407.601 140.701 408.459 139.18 409.302 137.641 cv
409.37 137.516 409.499 137.446 409.631 137.446 cv
409.692 137.446 409.754 137.461 409.811 137.492 cv
409.993 137.592 410.059 137.82 409.96 138.001 cv
409.114 139.546 408.253 141.072 407.376 142.581 cv
407.307 142.701 407.181 142.768 407.052 142.768 cv
411.402 134.892 mo
411.343 134.892 411.284 134.878 411.228 134.849 cv
411.045 134.752 410.974 134.526 411.07 134.342 cv
411.878 132.803 412.67 131.246 413.447 129.673 cv
413.513 129.54 413.646 129.464 413.784 129.464 cv
413.84 129.464 413.896 129.476 413.95 129.503 cv
414.135 129.594 414.211 129.819 414.12 130.005 cv
413.34 131.584 412.545 133.146 411.734 134.691 cv
411.667 134.818 411.537 134.892 411.402 134.892 cv
415.414 126.838 mo
415.361 126.838 415.306 126.826 415.254 126.802 cv
415.067 126.713 414.987 126.49 415.075 126.302 cv
415.818 124.731 416.545 123.143 417.258 121.538 cv
417.32 121.398 417.457 121.315 417.6 121.315 cv
417.651 121.315 417.703 121.326 417.752 121.348 cv
417.942 121.432 418.027 121.653 417.943 121.842 cv
417.229 123.452 416.499 125.046 415.753 126.623 cv
415.69 126.758 415.555 126.838 415.414 126.838 cv
419.092 118.626 mo
419.043 118.626 418.994 118.616 418.946 118.596 cv
418.755 118.515 418.666 118.295 418.747 118.104 cv
419.425 116.504 420.089 114.888 420.736 113.256 cv
420.795 113.109 420.936 113.019 421.085 113.019 cv
421.131 113.019 421.178 113.028 421.223 113.046 cv
421.416 113.122 421.51 113.34 421.434 113.533 cv
420.784 115.17 420.118 116.791 419.438 118.397 cv
419.377 118.54 419.238 118.626 419.092 118.626 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
161.105 205.734 mo
154.355 198.234 li
164.105 200.484 li
162.742 202.869 li
162.711 202.819 162.668 202.775 162.614 202.742 cv
162.468 202.656 162.323 202.569 162.177 202.482 cv
162.117 202.447 162.051 202.429 161.985 202.429 cv
161.858 202.429 161.733 202.495 161.663 202.612 cv
161.557 202.79 161.615 203.02 161.793 203.127 cv
161.939 203.214 162.085 203.3 162.231 203.387 cv
162.289 203.422 162.353 203.439 162.416 203.44 cv
161.105 205.734 li
f
162.416 203.44 mo
162.353 203.439 162.289 203.422 162.231 203.387 cv
162.085 203.3 161.939 203.214 161.793 203.127 cv
161.615 203.02 161.557 202.79 161.663 202.612 cv
161.733 202.495 161.858 202.429 161.985 202.429 cv
162.051 202.429 162.117 202.447 162.177 202.482 cv
162.323 202.569 162.468 202.656 162.614 202.742 cv
162.668 202.775 162.711 202.819 162.742 202.869 cv
162.416 203.44 li
1 /1 /CSD get_res sepcs
.146867 sep
f
419.645 111.954 mo
375.885 222.184 261.565 261.634 160.545 201.364 cv
1 /0 /CSD get_res sepcs
.749 sep
@
159.605 204.234 mo
152.855 196.734 li
162.605 198.984 li
159.605 204.234 li
cp
ef
133.355 174.609 mo
133.266 174.609 133.177 174.578 133.106 174.515 cv
132.45 173.931 li
132.573 173.708 132.703 173.488 132.838 173.272 cv
133.604 173.954 li
133.759 174.092 133.773 174.329 133.635 174.484 cv
133.561 174.567 133.458 174.609 133.355 174.609 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
132.45 173.931 mo
132.105 173.624 li
131.95 173.486 131.937 173.249 132.074 173.094 cv
132.148 173.011 132.251 172.969 132.354 172.969 cv
132.443 172.969 132.532 173 132.604 173.064 cv
132.838 173.272 li
132.703 173.488 132.573 173.708 132.45 173.931 cv
1 /1 /CSD get_res sepcs
.47451 sep
f
129.553 171.225 mo
129.465 171.225 129.376 171.194 129.304 171.13 cv
125.383 167.639 li
125.228 167.502 125.214 167.265 125.352 167.11 cv
125.426 167.027 125.529 166.984 125.632 166.984 cv
125.721 166.984 125.81 167.016 125.882 167.079 cv
129.803 170.57 li
129.958 170.708 129.971 170.945 129.834 171.1 cv
129.759 171.183 129.657 171.225 129.553 171.225 cv
122.831 165.241 mo
122.743 165.241 122.654 165.21 122.582 165.146 cv
118.661 161.655 li
118.506 161.517 118.492 161.28 118.63 161.126 cv
118.704 161.042 118.807 161 118.91 161 cv
118.999 161 119.088 161.031 119.159 161.095 cv
123.081 164.586 li
123.235 164.723 123.249 164.961 123.111 165.115 cv
123.037 165.198 122.934 165.241 122.831 165.241 cv
116.109 159.257 mo
116.02 159.257 115.931 159.225 115.86 159.162 cv
111.939 155.671 li
111.784 155.533 111.77 155.296 111.908 155.141 cv
111.982 155.058 112.085 155.016 112.188 155.016 cv
112.277 155.016 112.366 155.047 112.437 155.111 cv
116.358 158.601 li
116.513 158.739 116.527 158.976 116.389 159.131 cv
116.315 159.214 116.212 159.257 116.109 159.257 cv
109.387 153.272 mo
109.298 153.272 109.209 153.241 109.138 153.177 cv
105.216 149.686 li
105.062 149.549 105.048 149.312 105.186 149.157 cv
105.26 149.074 105.362 149.031 105.466 149.031 cv
105.554 149.031 105.644 149.063 105.715 149.126 cv
109.636 152.617 li
109.791 152.755 109.805 152.992 109.667 153.147 cv
109.593 153.23 109.49 153.272 109.387 153.272 cv
102.665 147.288 mo
102.576 147.288 102.487 147.257 102.416 147.193 cv
98.4943 143.702 li
98.3396 143.564 98.3258 143.327 98.4635 143.173 cv
98.5376 143.089 98.6404 143.047 98.7437 143.047 cv
98.8324 143.047 98.9214 143.078 98.9929 143.142 cv
102.914 146.633 li
103.069 146.77 103.083 147.007 102.945 147.162 cv
102.871 147.245 102.768 147.288 102.665 147.288 cv
95.9425 141.303 mo
95.8538 141.303 95.7648 141.272 95.6934 141.209 cv
91.7721 137.718 li
91.6174 137.58 91.6036 137.343 91.7413 137.188 cv
91.8154 137.105 91.9183 137.063 92.0215 137.063 cv
92.1103 137.063 92.1993 137.094 92.2707 137.158 cv
96.192 140.648 li
96.3467 140.786 96.3605 141.023 96.2228 141.178 cv
96.1487 141.261 96.0458 141.303 95.9425 141.303 cv
89.2205 135.319 mo
89.1317 135.319 89.0427 135.288 88.9712 135.224 cv
85.0499 131.733 li
84.8953 131.596 84.8815 131.359 85.0191 131.204 cv
85.0933 131.121 85.1962 131.078 85.2994 131.078 cv
85.3881 131.078 85.4771 131.109 85.5486 131.173 cv
89.4698 134.664 li
89.6245 134.802 89.6383 135.039 89.5006 135.193 cv
89.4266 135.277 89.3237 135.319 89.2205 135.319 cv
82.4983 129.335 mo
82.4096 129.335 82.3205 129.303 82.249 129.24 cv
78.3278 125.749 li
78.1731 125.611 78.1593 125.374 78.297 125.22 cv
78.3711 125.136 78.474 125.094 78.5773 125.094 cv
78.666 125.094 78.755 125.125 78.8264 125.189 cv
82.7477 128.68 li
82.9024 128.817 82.9161 129.054 82.7785 129.209 cv
82.7044 129.292 82.6016 129.335 82.4983 129.335 cv
75.7762 123.35 mo
75.6874 123.35 75.5984 123.319 75.5269 123.255 cv
71.9861 120.103 li
72.5173 119.572 li
76.0256 122.695 li
76.1803 122.833 76.194 123.07 76.0563 123.225 cv
75.9823 123.308 75.8794 123.35 75.7762 123.35 cv
1 /1 /CSD get_res sepcs
.0976547 sep
f
69.605 122.485 mo
65.105 113.484 li
74.1049 117.984 li
72.5173 119.572 li
72.1044 119.204 li
72.0329 119.141 71.9438 119.109 71.8551 119.109 cv
71.7518 119.109 71.649 119.152 71.575 119.235 cv
71.4371 119.39 71.4509 119.627 71.6056 119.765 cv
71.9861 120.103 li
69.605 122.485 li
f
71.9861 120.103 mo
71.6056 119.765 li
71.4509 119.627 71.4371 119.39 71.575 119.235 cv
71.649 119.152 71.7518 119.109 71.8551 119.109 cv
71.9438 119.109 72.0329 119.141 72.1044 119.204 cv
72.5173 119.572 li
71.9861 120.103 li
1 /1 /CSD get_res sepcs
.146867 sep
f
70.355 117.984 mo
131.855 173.484 li
1 /0 /CSD get_res sepcs
.749 sep
@
68.855 120.984 mo
63.605 111.984 li
72.605 116.484 li
68.855 120.984 li
cp
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H)
%%Title: (XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {0 -141 996 855} def
/FontInfo 4 dict dup begin
/FSType 0 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 22141 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
19762 <001C60D8A8C9B5EE31023AD540F7399E304110A491D65ABF7179F1593
7FEF0D425B08C5F24A4B9378B70B6F6B137F0DB5FD0D4E2E7F059FA55236A37C
A6CE43C44EE1F4A0C646358234387FBE15981926F733BFDA38D5FBBC86704E8F
9D044CEE78656304644AE010B9C9A2DCF9C57CA8444F52B0F8599C3CB6E9438A
269C663151CC9438499CB6EFED46089247DD364C1C2E2770E7ABADB6D35CCBED
A83E34CEB34C6DAB8F13E6D8FE4555407EF9F7FCEFD6711E26EBC31D59215192
4> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H-Identity-H /Identity-H 0 [/XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [12.0002 0 0 -12.0002 0 0 ]msf
1.79299 70.2845 mo
(M2)sh
XZAJVP+CALIBRI*1 [12.0002 0 0 -12.0002 0 0 ]msf
13.793 70.2845 mo
(h)sh
%ADOBeginSubsetFont: XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H 1 GetGlyphDirectory
6122 <001C60D8A8C9B5EE310268CEE58B09B136AE5EBCDDD3F845B0A4346B62
F4273D3F83F24F386F15C6437BA2FF9EDB38280027861407817BC86D4C08E81A
D2AE423F096D5E9E0C3EC25E188BFBC09FCE8D244DF29C1B41D55B050DE2574E
A03A4B315A5E6CD0AB46353BE1F9CDA2565201DC9EC215BF72941E601CD8F010
48F721F86120BA6F414A48A779CDD6F00FD92EF7B233E44390553419AAC7756A
68A634C9CDCF54B27E6773191801779C65D250128B125F74304E645A8B44B456
ECEDCE49624D671F9EEDC26ED2F93F54BB01FDFF994B2AD27A83E46D422A6AEC
1EF6EBE6A79D20BFB46837E5F4471187F330A09C5F7ED2FC2A63553FA89A44D9
57B3A9F096C21786BF27857A1342537CEB983130C9D4B10E71B2CDFA3BACC90A
C4DCE890585A7FCF5DAF1E9BFFC537D49B583A6C1959747F0623678F8DAB28F2
1D2C80D8> |
!
end
end end
%ADOEndSubsetFont
/XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H-Identity-H findfont [12.0002 0 0 -12.0002 0 0 ]msf
20.095 70.2845 mo
(\027\352)sh
1 /0 /CSD get_res sepcs
1 sep
XZAJVP+CALIBRI*1 [12.0002 0 0 -12.0002 0 0 ]msf
32.095 70.2845 mo
(s)sh
1 lw
[] 0 dsh
51.655 79.7345 mo
28.125 66.5145 20.765 72.4245 34.625 93.4245 cv
1 /0 /CSD get_res sepcs
.749 sep
@
37.355 97.7345 mo
30.605 93.9845 li
30.755 94.0245 li
33.205 93.6745 35.345 92.1845 36.535 90.0145 cv
36.605 90.2345 li
37.355 97.7345 li
cp
ef
0 1 1 .00173953 cmyk
%ADOBeginSubsetFont: PBAAAA+CALIBRI AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XZAJVP+CALIBRI gcheck setglobal} if

2 0 3 <> XZAJVP+CALIBRI AddT42Char 
2 2574 853 <0001002afede017300e0001b000ab20b171c0010d4cd313025140e020707
0e0323222e02371335343e0233321e020173060e171189050d1319131117
0a0104850b18241a1924170b8f1f342e2d19ce070a080303070c08011380
1b20100606102000>XZAJVP+CALIBRI AddT42Char 
2 2672 898 <00010056febe02440580004f001d400d3f3f1dc813130834db264adb0800
2fed2fed12392fed393d2f313001140e0223060623222e023535342e0227
2e0335343e023736363535343e0233321617321e0215140e022307220e02
1515140e02071e031515141e023317321e02024404090c06121b13435632
1211233727090c070403070c094a4913335542131912070d090404090d08
291822150b10294434344429100a1521172a090e0904feff10170d080401
2b55806ace44543f270402070e170f10160f0602087f7ca16980562b0104
070e1710111710060111315659924967523b0b0a3b53664abe5856311201
060f1700>XZAJVP+CALIBRI AddT42Char 
2 2916 899 <00010075febe026505800051001d400d29294dc605051034db421edb1000
2fed2fed12392fed393d2f313001140e02070e031515140e022322262722
2e0235343e023337323e023535343e02372e033535342e022327222e0235
343e0233363633321e021515141e0217321e02026503070c082a38230e14
325641131a14070c080606090c072b1822160a11284533334528110a1521
17280b0f0a0405090d09111a134256321311233727080c0803023710160e
07010433506348a16980562b0203080d1710111710060112305659924a74
64480b0a2c43584abe5955311201060f171210170e0704012b55806ace44
452e1905080f1500>XZAJVP+CALIBRI AddT42Char 
XZAJVP+CALIBRI /CharStrings get begin
/space 3 def
/comma 853 def
/braceleft 898 def
/braceright 899 def
end
XZAJVP+CALIBRI /Encoding get
dup 32 /space put
dup 44 /comma put
dup 123 /braceleft put
dup 125 /braceright put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XZAJVP+CALIBRI*1 
[32{/.notdef}rp /space 11{/.notdef}rp /comma 3{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight /nine 43{/.notdef}rp 
/e 2{/.notdef}rp /h /i 8{/.notdef}rp /r /s 7{/.notdef}rp 
/braceleft /.notdef /braceright 130{/.notdef}rp]
XZAJVP+CALIBRI nf
XZAJVP+CALIBRI*1 [12.0002 0 0 -12.0002 0 0 ]msf
322.215 155.584 mo
({)sh
325.985 155.584 mo
(s)sh
330.678 155.584 mo
(h)sh
336.983 155.584 mo
(e)sh
342.955 155.584 mo
(,)sh
345.949 155.584 mo
( )sh
348.665 155.584 mo
(h)sh
354.97 155.584 mo
(e)sh
360.945 155.584 mo
(})sh
406.325 70.5445 mo
({)sh
410.105 70.5445 mo
(h)sh
416.41 70.5445 mo
(e)sh
422.381 70.5445 mo
(r)sh
426.564 70.5445 mo
(s)sh
431.255 70.5445 mo
(})sh
317.565 13.8545 mo
({)sh
321.335 13.8545 mo
(h)sh
327.64 13.8545 mo
(i)sh
330.394 13.8545 mo
(s)sh
335.085 13.8545 mo
(})sh
202.085 84.7245 mo
({)sh
205.855 84.7245 mo
(h)sh
212.16 84.7245 mo
(e)sh
218.135 84.7245 mo
(})sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
/XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H-Identity-H uf
/XZAJVQ+#cb#ce#cc#e5-GBK-EUC-H /CIDFont ur
/XZAJVP+CALIBRI*1 uf
/XZAJVP+CALIBRI uf
/PBAAAA+CALIBRI uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
