@Comment{jabref-meta: keypatterndefault:[auth][year];}

@Comment{jabref-meta: pdfDirectory:/home/pz/Documents/literatures/Dict
ionary_Matching;}


@InProceedings{Agarwal2013,
	Title = {A high-speed and large-scale dictionary matching engine for Information Extraction systems},
	Author = {Agarwal, K. and Polig, R.},
	Booktitle = {Application-Specific Systems, Architectures and Processors (ASAP), 2013 IEEE 24th International Conference on},
	Year = {2013},
	Month = {June},
	Pages = {59-66},
	Abstract = {Dictionary matching is a commonly used operation in Information Extraction (IE) systems. It involves matching a set of strings in a document against a dictionary of pre-defined patterns. In this paper, we describe a high performance and scalable hardware architecture to enable high throughput dictionary matching on very large dictionaries for text analytics applications. Our hardware accelerator employs a novel hashing based approach instead of commonly used deterministic finite automata (DFA) based algorithms. A limitation of the DFA based approaches is that they typically process one character every cycle, while the proposed hash based scheme can process a string token every cycle, thus achieving significantly higher processing throughput than the DFA based implementations. Our measurement results based on a prototype implementation on an Altera Stratix IV FPGA device indicate that our hardware dictionary matching engine can process typical document streams at a processing rate of ~1.5GB/s (~12 Gbps) while simultaneously allowing support for large dictionary sizes containing up to ~100K patterns, thus making it very useful for IE workload acceleration.},
	Doi = {10.1109/ASAP.2013.6567551},
	File = {Agarwal2013.pdf:Agarwal2013.pdf:PDF},
	Imestamp = {2016.02.24},
	ISSN = {2160-0511},
	Keywords = {dictionaries;field programmable gate arrays;file organisation;information retrieval systems;string matching;text analysis;Altera Stratix IV FPGA device;DFA based algorithms;IE systems;IE workload acceleration;deterministic finite automata based algorithms;hardware accelerator;hardware dictionary matching engine;hashing based approach;high throughput dictionary matching;high-speed dictionary matching engine;information extraction system;large-scale dictionary matching engine;scalable hardware architecture;string matching;string token;text analytics applications;Arrays;Dictionaries;Field programmable gate arrays;Hardware;Pattern matching;Random access memory;Throughput;FPGA;dictionary matching;hardware acceleration;hashing;information extraction;pattern matching;string matching;text analytics},
	Owner = {pz}
}

@Article{Aho1975,
	Title = {Efficient String Matching: An Aid to Bibliographic Search},
	Author = {Aho, Alfred V. and Corasick, Margaret J.},
	Journal = {Commun. ACM},
	Year = {1975},
	Month = jun,
	Note = {AC},
	Number = {6},
	Pages = {333--340},
	Volume = {18},
	Acmid = {360855},
	Address = {New York, NY, USA},
	Doi = {10.1145/360825.360855},
	File = {Aho1975.pdf:Aho1975.pdf:PDF},
	ISSN = {0001-0782},
	Issue_date = {June 1975},
	Keywords = {bibliographic search, computational complexity, finite state machines, information retrieval, keywords and phrases, string pattern matching, text-editing},
	Numpages = {8},
	Publisher = {ACM},
	Url = {http://doi.acm.org/10.1145/360825.360855}
}

@Article{Amir2015,
	Title = {Dictionary matching with a few gaps },
	Author = {Amihood Amir and Avivit Levy and Ely Porat and B. Riva Shalom},
	Journal = {Theoretical Computer Science },
	Year = {2015},
	Pages = {34 - 46},
	Volume = {589},
	Abstract = {Abstract The dictionary matching with gaps problem is to preprocess a dictionary D of total size | D | containing d gapped patterns P 1 , … , P d over an alphabet Σ, where each gapped pattern P i is a sequence of subpatterns separated by bounded sequences of don't cares. Then, given a query text T of length n over Σ, the goal is to output all locations in T in which a pattern P i ∈ D , 1 ≤ i ≤ d , ends. There is a renewed current interest in the gapped matching problem stemming from cyber security. In this paper we solve the problem where all patterns in the dictionary have one gap or a few gaps with at least α and at most β don't cares, where α and β are given parameters. Specifically, we show that the dictionary matching with a single gap problem can be solved in either O ( d log ⁡ d + | D | ) preprocessing time and O ( d log ε ⁡ d + | D | ) space, and query time O ( n ( β − α ) log ⁡ log ⁡ d log 2 ⁡ | D | + occ ) , where occ is the number of patterns found, or preprocessing time and space: O ( d 2 + | D | ) , and query time O ( n ( β − α ) + occ ) , where occ is the number of patterns found. We also show that the dictionary matching with k gaps problem, where k ≥ 1 , can be solved in preprocessing time: O ( | D | log ⁡ | D | ) , space: O ( | D | + d ( c 1 log ⁡ d ) k k ! ) , and query time: O ( ( β − α ) k ( n + ( c 2 log ⁡ d ) k k ! log ⁡ log ⁡ | D | ) + occ ) , where c 1 , c 2 &gt; 1 are constants and occ is the number of patterns found. As far as we know, these are the best solutions for this setting of the problem, where many overlaps may exist in the dictionary. },
	Doi = {http://dx.doi.org/10.1016/j.tcs.2015.04.011},
	File = {Amir2015.pdf:Amir2015.pdf:PDF},
	ISSN = {0304-3975},
	Keywords = {String matching},
	Owner = {pz},
	Timestamp = {2016.02.24},
	Url = {http://www.sciencedirect.com/science/article/pii/S0304397515003187}
}

@Article{Boyer1977,
	timestamp = {六 8月 12 20:28:08 2017},
	Title = {A Fast String Searching Algorithm},
	Author = {Boyer, Robert S. and Moore, J. Strother},
	Journal = {Commun. ACM},
	Year = {1977},
	Month = oct,
	Note = {BM},
	Number = {10},
	Pages = {762--772},
	Volume = {20},
	Acmid = {359859},
	Address = {New York, NY, USA},
	Doi = {10.1145/359842.359859},
	File = {Boyer1977.pdf:Boyer1977.pdf:PDF},
	ISSN = {0001-0782},
	Issue_date = {Oct. 1977},
	Keywords = {bibliographic search, computational complexity, information retrieval, linear time bound, pattern matching, text editing},
	Numpages = {11},
	Publisher = {ACM},
	Url = {http://doi.acm.org/10.1145/359842.359859}
}

@InProceedings{Bremler2011,
	timestamp = {六 8月 12 20:33:53 2017},
	Title = {Space-time tradeoffs in software-based deep Packet Inspection},
	Author = {A. Bremler-Barr and Y. Harchol and D. Hay},
	Booktitle = {High Performance Switching and Routing (HPSR), 2011 IEEE 12th International Conference on},
	Year = {2011},
	Month = {July},
	Pages = {1-8},
	Doi = {10.1109/HPSR.2011.5985996},
	File = {Bremler-Barr2011.pdf:Bremler-Barr2011.pdf:PDF},
	Keywords = {Internet;authorisation;computer networks;AC algorithm;Aho-Corasick automaton;DPI;NIDS systems;Web application firewalls;algorithmic complexity attacks;compression technique;deterministic finite automaton;network intrusion detection;packet inspection;packet processing;prevention systems;software-based deep;space-time tradeoffs;state transition;Automata;Doped fiber amplifiers;Encoding;Pattern matching;Software;Software algorithms;Throughput}
}

@Article{Choi2011,
	Title = {A fast pattern matching algorithm with multi-byte search unit for high-speed network security },
	Author = {Yoon-Ho Choi and Moon-Young Jung and Seung-Woo Seo},
	Journal = {Computer Communications },
	Year = {2011},
	Note = {L+1-MWM},
	Number = {14},
	Pages = {1750 - 1763},
	Volume = {34},
	Abstract = {A signature-based intrusion detection system identifies intrusions by comparing the data traffic with known signature patterns. In this process, matching of packet strings against signature patterns is the most time-consuming step and dominates the overall system performance. Many signature-based network intrusion detection systems (NIDS), e.g., the Snort, employ one or multiple pattern matching algorithms to detect multiple attack types. So far, many pattern matching algorithms have been proposed. Most of them use single-byte standard unit for search, while a few algorithms such as the Modified Wu–Manber (MWM) algorithm use typically two-byte unit, which guarantees better performance than others even as the number of different signatures increases. Among those algorithms, the \{MWM\} algorithm has been known as the fastest pattern matching algorithm when the patterns in a rule set rarely appear in packets. However, the matching time of the \{MWM\} algorithm increases as the length of the shortest pattern in a signature group decreases. In this paper, by extending the length of the shortest pattern, we minimize the pattern matching time of the algorithm which uses multi-byte unit. We propose a new pattern matching algorithm called the L+1-MWM algorithm for multi-pattern matching. The proposed algorithm minimizes the performance degradation that is originated from the dependency on the length of the shortest pattern. We show that the L+1-MWM algorithm improves the performance of the \{MWM\} algorithm by as much as 20% in average under various lengths of shortest patterns and normal traffic conditions. Moreover, when the length of the shortest pattern in a rule set is less than 5, the L+1-MWM algorithm shows 38.87% enhancement in average. We also conduct experiments on a real campus network and show that 12.48% enhancement is obtained in average. In addition, it is shown that the L+1-MWM algorithm provides a better performance than the \{MWM\} algorithm by as much as 25% in average under various numbers of signatures and normal traffic conditions, and 20.12% enhancement in average with real on-line traffic. },
	Doi = {http://dx.doi.org/10.1016/j.comcom.2011.03.014},
	File = {Choi2011.pdf:Choi2011.pdf:PDF},
	ISSN = {0140-3664},
	Keywords = {Network intrusion detection system},
	Owner = {pz},
	Timestamp = {六 8月 12 20:40:15 2017},
	Url = {http://www.sciencedirect.com/science/article/pii/S0140366411001216}
}

@Article{Hon2013,
	Title = {Faster compressed dictionary matching },
	Author = {Wing-Kai Hon and Tsung-Han Ku and Rahul Shah and Sharma V. Thankachan and Jeffrey Scott Vitter},
	Journal = {Theoretical Computer Science },
	Year = {2013},
	Pages = {113 - 119},
	Volume = {475},
	Abstract = {Given a set D of d patterns, the dictionary matching problem is to index D such that for any query text T , we can locate the occurrences of any pattern within T efficiently. When D contains a total of n characters drawn from an alphabet of size σ , Hon et al. (2008) [12] gave an n H k ( D ) + o ( n log σ ) -bit index which supports a query in O ( | T | ( log ϵ n + log d ) + o c c ) time, where ϵ &gt; 0 and H k ( D ) denotes the k th-order entropy of D . Very recently, Belazzougui (2010) [3] has proposed an elegant scheme, which takes n log σ + O ( n ) bits of index space and supports a query in optimal O ( | T | + o c c ) time. In this paper, we provide connections between Belazzougui’s index and the \{XBW\} compression of Ferragina and Manzini (2005) [8], and show that Belazzougui’s index can be slightly modified to be stored in n H k ( D ) + O ( n ) bits, while query time remains optimal; this improves the compressed index by Hon et al. (2008) [12] in both space and time. },
	Doi = {http://dx.doi.org/10.1016/j.tcs.2012.10.050},
	File = {Hon2013.pdf:Hon2013.pdf:PDF},
	ISSN = {0304-3975},
	Owner = {pz},
	Timestamp = {2016.02.24},
	Url = {http://www.sciencedirect.com/science/article/pii/S0304397512009826}
}

@InProceedings{Huang2008,
	Title = {A GPU-Based Multiple-Pattern Matching Algorithm for Network Intrusion Detection Systems},
	Author = {Nen-Fu Huang and Hsien-Wei Hung and Sheng-Hung Lai and Yen-Ming Chu and Wen-Yen Tsai},
	Booktitle = {Advanced Information Networking and Applications - Workshops, 2008. AINAW 2008. 22nd International Conference on},
	Year = {2008},
	Month = {March},
	Pages = {62-67},
	Abstract = {By the development of network applications, network security issues are getting more and more important. This paper proposes a multiple-pattern matching algorithm for the network intrusion detection systems based on the GPU (Graphics Processing Units). The highly parallelism of the GPU computation power is used to inspect the packet content in parallel. The performance of the proposed approach is analyzed through evaluations such as using various texture formats and different implementations. Experimental results indicate that the performance of the proposed approach is twice of that of the modified Wu-Manber algorithm used in Snort. The proposed approach makes a commodity and cheap GPU card as a high performance pattern matching co-processor.},
	Doi = {10.1109/WAINA.2008.145},
	File = {Huang2008.pdf:Huang2008.pdf:PDF},
	Keywords = {pattern matching;security of data;GPU computation power;graphics processing unit;multiple pattern matching algorithm;network application;network intrusion detection system;network security;packet content;pattern matching coprocessor;texture format;Application software;Communication system security;Computer graphics;Computer science;Concurrent computing;Coprocessors;Intrusion detection;Parallel processing;Pattern matching;Power engineering and energy;GPU;IDS;network security;pattern match},
	Owner = {pz},
	Timestamp = {2016.02.24}
}

@Article{I2015,
	Title = {Compressed automata for dictionary matching },
	Author = {Tomohiro I and Takaaki Nishimoto and Shunsuke Inenaga and Hideo Bannai and Masayuki Takeda},
	Journal = {Theoretical Computer Science },
	Year = {2015},
	Note = {Implementation and Application of Automata },
	Pages = {30 - 41},
	Volume = {578},
	Abstract = {Abstract We address a variant of the dictionary matching problem where the dictionary is represented by a straight line program (SLP). For a given SLP-compressed dictionary D of size n and height h representing m patterns of total length N, we present an O ( n 2 log ⁡ N ) -size representation of Aho–Corasick automaton which recognizes all occurrences of the patterns in D in amortized O ( h + m ) running time per character. We also propose an algorithm to construct this compressed Aho–Corasick automaton in O ( n 3 log ⁡ n log ⁡ N ) time and O ( n 2 log ⁡ N ) space. In a spacial case where D represents only a single pattern, we present an O ( n log ⁡ N ) -size representation of the Morris–Pratt automaton which permits us to find all occurrences of the pattern in amortized O ( h ) running time per character, and we show how to construct this representation in O ( n 3 log ⁡ n log ⁡ N ) time with O ( n 2 log ⁡ N ) working space. },
	Doi = {http://dx.doi.org/10.1016/j.tcs.2015.01.019},
	File = {I2015.pdf:I2015.pdf:PDF},
	ISSN = {0304-3975},
	Keywords = {Straight line program},
	Url = {http://www.sciencedirect.com/science/article/pii/S0304397515000468}
}

@article{Kandhan2010,
	timestamp = {六 8月 12 20:35:12 2017},
	title = {SigMatch: fast and scalable multi-pattern matching},
	author = {Kandhan, Ramakrishnan and Teletia, Nikhil and Patel, Jignesh M},
	journal = {Proceedings of the VLDB Endowment},
	volume = {3},
	number = {1-2},
	pages = {1173--1184},
	year = {2010},
	publisher = {VLDB Endowment}
}

@Article{Karp1987,
	timestamp = {六 8月 12 20:41:50 2017},
	Title = {Efficient randomized pattern-matching algorithms},
	Author = {R. M. Karp and M. O. Rabin},
	Journal = {IBM Journal of Research and Development},
	Year = {1987},
	Month = {March},
	Note = {Rabin-Karp},
	Number = {2},
	Pages = {249-260},
	Volume = {31},
	Doi = {10.1147/rd.312.0249},
	File = {Karp1987.pdf:Karp1987.pdf:PDF},
	ISSN = {0018-8646}
}

@Article{Khancome2013,
	Title = {A NEW LINEAR-TIME DYNAMIC DICTIONARY MATCHING ALGORITHM},
	Author = {Khancome, Chouvalit and Boonjing, Veera},
	Journal = {COMPUTING AND INFORMATICS},
	Year = {2013},
	Number = {5},
	Pages = {897-923},
	Volume = {32},
	Abstract = {This research presents inverted lists as a new data structure for the dynamic dictionary matching algorithm. The inverted lists structure, which derives from the inverted index, is implemented by the perfect hashing table. The dictionary is constructed in optimal time and the individual patterns can be updated in minimal time. The searching phase scans the given text in a single pass, even in a worst case scenario. In experimental results, the inverted lists used less time and space than the traditional structures; the searches were processed and showed an efficient linear time.},
	Address = {DUBRAVSKA CESTA 9, 84237 BRATISLAVA, SLOVAKIA},
	Affiliation = {Khancome, C (Reprint Author), KMITL, Fac Sci, Dept Math \& Comp Sci, Software Syst Engn Lab, Bangkok 10520, Thailand. Khancome, Chouvalit; Boonjing, Veera, KMITL, Fac Sci, Dept Math \& Comp Sci, Software Syst Engn Lab, Bangkok 10520, Thailand. Boonjing, Veera, PERDO, Natl Ctr Excellence Math, Bangkok 10400, Thailand.},
	Author-email = {Chouvalit@hotmail.com kbveera@kmitl.ac.th},
	Doc-delivery-number = {257TU},
	File = {Khancome2013.pdf:Khancome2013.pdf:PDF},
	ISSN = {1335-9150},
	Journal-iso = {Comput. Inform.},
	Keywords = {Dynamic dictionary matching; static dictionary matching; multiple pattern string matching; inverted index; inverted lists; trie; bit-parallel; hashing table},
	Keywords-plus = {INVERTED FILES; CONSTRUCTION; SEARCH; DNA},
	Language = {English},
	Number-of-cited-references = {41},
	Publisher = {SLOVAK ACAD SCIENCES INST INFORMATICS},
	Research-areas = {Computer Science},
	Times-cited = {0},
	Type = {Article},
	Unique-id = {ISI:000327410900001},
	Usage-count-since-2013 = {3},
	Web-of-science-categories = {Computer Science, Artificial Intelligence}
}

@article{Kim2015,
	timestamp = {日 10月 30 13:08:16 2016},
	Author = {Kim, HyunJin and Choi, Kang-Il and Choi, Sang-Il},
	Title = {{A Memory-Efficient Deterministic Finite Automaton-Based Bit-Split String
   Matching Scheme Using Pattern Uniqueness in Deep Packet Inspection}},
	Journal = {{PLOS ONE}},
	Year = {2015},
	Volume = {{10}},
	Number = {{5}},
	Month = {{MAY 4}},
	Abstract = {{This paper proposes a memory-efficient bit-split string matching scheme
   for deep packet inspection (DPI). When the number of target patterns
   becomes large, the memory requirements of the string matching engine
   become a critical issue. The proposed string matching scheme reduces the
   memory requirements using the uniqueness of the target patterns in the
   deterministic finite automaton (DFA)-based bit-split string matching.
   The pattern grouping extracts a set of unique patterns from the target
   patterns. In the set of unique patterns, a pattern is not the suffix of
   any other patterns. Therefore, in the DFA constructed with the set of
   unique patterns, when only one pattern can be matched in an output
   state. In the bit-split string matching, multiple finite-state machine
   (FSM) tiles with several input bit groups are adopted in order to reduce
   the number of stored state transitions. However, the memory requirements
   for storing the matching vectors can be large because each bit in the
   matching vector is used to identify whether its own pattern is matched
   or not. In our research, the proposed pattern grouping is applied to the
   multiple FSM tiles in the bit-split string matching. For the set of
   unique patterns, the memory-based bit-split string matching engine
   stores only the pattern match index for each state to indicate the match
   with its own unique pattern. Therefore, the memory requirements are
   significantly decreased by not storing the matching vectors in the
   string matchers for the set of unique patterns. The experimental results
   show that the proposed string matching scheme can reduce the storage
   cost significantly compared to the previous bit-split string matching
   methods.}},
	Publisher = {{PUBLIC LIBRARY SCIENCE}},
	Address = {{1160 BATTERY STREET, STE 100, SAN FRANCISCO, CA 94111 USA}},
	Type = {{Article}},
	Language = {{English}},
	Affiliation = {{Choi, SI (Reprint Author), Dankook Univ, Dept Appl Comp Engn, Yongin, South Korea.
   Kim, HyunJin, Dankook Univ, Sch Elect \& Elect Engn, Yongin, South Korea.
   Choi, Kang-Il, Elect \& Telecommun Res Inst, Adv Commun Res Lab, Taejon 305606, South Korea.
   Choi, Sang-Il, Dankook Univ, Dept Appl Comp Engn, Yongin, South Korea.}},
	DOI = {{10.1371/journal.pone.0126517}},
	Article-Number = {{e0126517}},
	ISSN = {{1932-6203}},
	Keywords-Plus = {{ARCHITECTURE; ALGORITHM}},
	Research-Areas = {{Science \& Technology - Other Topics}},
	Web-of-Science-Categories = {{Multidisciplinary Sciences}},
	Author-Email = {{choisi@dankook.ac.kr}},
	Funding-Acknowledgement = {{ICT R\&D program of the Ministry of Science, ICT \& Future
   Planning/Institute for Information \& communications Technology
   Promotion, Republic of Korea (Smart Networking Core Technology
   Development) {[}14-000-05-001]; Basic Science Research Program through
   the National Research Foundation of Korea (NRF) - Ministry of Science,
   ICT \& Future Planning {[}NRF-2012R1A1A1002993]}},
	Funding-Text = {{This work was partly supported by ICT R\&D program of the Ministry of
   Science, ICT \& Future Planning/Institute for Information \&
   communications Technology Promotion, Republic of Korea (14-000-05-001,
   Smart Networking Core Technology Development), and Basic Science
   Research Program through the National Research Foundation of Korea (NRF)
   funded by the Ministry of Science, ICT \& Future Planning
   (NRF-2012R1A1A1002993). The funders had no role in study design, data
   collection and analysis, decision to publish, or preparation of the
   manuscript.}},
	Number-of-Cited-References = {{27}},
	Times-Cited = {{2}}
}

@Article{Knuth1977,
	timestamp = {六 8月 12 20:26:21 2017},
	Title = {Fast Pattern Matching in Strings},
	Author = {Donald E. Knuth and James H. Morris, Jr. and Vaughan R. Pratt},
	Journal = {SIAM Journal on Computing},
	Year = {1977},
	Note = {KMP},
	Number = {2},
	Pages = {323-350},
	Volume = {6},
	Doi = {10.1137/0206024},
	Eprint = { http://dx.doi.org/10.1137/0206024 
},
	File = {Knuth1977.pdf:Knuth1977.pdf:PDF},
	Url = { http://dx.doi.org/10.1137/0206024 
}
}

@Article{Le2013,
	Title = {A Memory-Efficient and Modular Approach for Large-Scale String Pattern Matching},
	Author = {Hoang Le and Prasanna, V.K.},
	Journal = {Computers, IEEE Transactions on},
	Year = {2013},
	Month = {May},
	Note = {MASM},
	Number = {5},
	Pages = {844-857},
	Volume = {62},
	Abstract = {In Network Intrusion Detection Systems (NIDSs), string pattern matching demands exceptionally high performance to match the content of network traffic against a predefined database (or dictionary) of malicious patterns. Much work has been done in this field; however, most of the prior work results in low memory efficiency (defined as the ratio of the amount of the required storage in bytes and the size of the dictionary in number of characters). Due to such inefficiency, state-of-the-art designs cannot support large dictionaries without using high-latency external DRAM. We propose an algorithm called "leaf-attaching" to preprocess a given dictionary without increasing the number of patterns. The resulting set of postprocessed patterns can be searched using any tree-search data structure. We also present a scalable, high-throughput, Memory-efficient Architecture for large-scale String Matching (MASM) based on a pipelined binary search tree. The proposed algorithm and architecture achieve a memory efficiency of 0.56 (for the Rogets dictionary) and 1.32 (for the Snort dictionary). As a result, our design scales well to support larger dictionaries. Implementations on 45 nm ASIC and a state-of-the-art FPGA device (for latest Rogets and Snort dictionaries) show that our architecture achieves 24 and 3.2 Gbps, respectively. The MASM module can simply be duplicated to accept multiple characters per cycle, leading to scalable throughput with respect to the number of characters processed in each cycle. Dictionary update involves simply rewriting the content of the memory, which can be done quickly without reconfiguring the chip.},
	Doi = {10.1109/TC.2012.38},
	File = {Le2013.pdf:Le2013.pdf:PDF;Le2013.pdf:Le2013.pdf:PDF},
	ISSN = {0018-9340},
	Keywords = {Internet;application specific integrated circuits;computer network security;field programmable gate arrays;storage management;string matching;tree searching;ASIC;FPGA device;MASM module;NIDS;Rogets dictionary;Snort dictionary;characters per cycle;content matching;dictionary dictionary;dictionary preprocessing;dictionary update;high-latency external DRAM;large-scale string pattern matching;leaf-attaching;malicious pattern dictionary;memory content rewriting;modular approach;network intrusion detection systems;network traffic;pipelined binary search tree;predefined database;scalable high-throughput memory-efficient architecture;tree-search data structure;Databases;Dictionaries;Memory management;Pattern matching;Throughput;Vectors;ASIC;Aho-Corasick;DFA;Databases;Dictionaries;Memory management;Pattern matching;Rogets;Snort;String matching;Throughput;Vectors;field-programmable gate array (FPGA);leaf attaching;pipeline;reconfigurable},
	Owner = {pz},
	Timestamp = {2016.02.24}
}

@Article{Lee2013,
	Title = {A Pattern-Matching Scheme With High Throughput Performance and Low Memory Requirement},
	Author = {Tsern-Huei Lee and Nai-Lun Huang},
	Journal = {Networking, IEEE/ACM Transactions on},
	Year = {2013},
	Month = {Aug},
	Note = {Pre-filter+AC},
	Number = {4},
	Pages = {1104-1116},
	Volume = {21},
	Abstract = {Pattern-matching techniques have recently been applied to network security applications such as intrusion detection, virus protection, and spam filters. The widely used Aho-Corasick (AC) algorithm can simultaneously match multiple patterns while providing a worst-case performance guarantee. However, as transmission technologies improve, the AC algorithm cannot keep up with transmission speeds in high-speed networks. Moreover, it may require a huge amount of space to store a two-dimensional state transition table when the total length of patterns is large. In this paper, we present a pattern-matching architecture consisting of a stateful pre-filter and an AC-based verification engine. The stateful pre-filter is optimal in the sense that it is equivalent to utilizing all previous query results. In addition, the filter can be easily realized with bitmaps and simple bitwise-AND and shift operations. The size of the two-dimensional state transition table in our proposed architecture is proportional to the number of patterns, as opposed to the total length of patterns in previous designs. Our proposed architecture achieves a significant improvement in both throughput performance and memory usage.},
	Doi = {10.1109/TNET.2012.2224881},
	File = {Lee2013.pdf:Lee2013.pdf:PDF},
	ISSN = {1063-6692},
	Keywords = {pattern matching;query processing;security of data;storage management;AC-based verification engine;Aho-Corasick algorithm;high throughput performance;information retrieval;intrusion detection;low memory requirement;network security applications;pattern-matching scheme;shift operations;spam filters;stateful pre-filter;text editing;two-dimensional state transition table;virus protection;Algorithm design and analysis;Data structures;Engines;IEEE transactions;Memory management;Pattern matching;Throughput;Aho–Corasick (AC) algorithm;Bloom filter;deep packet inspection;pattern matching},
	Owner = {pz},
	Timestamp = {2016.02.24}
}

@InProceedings{Leis2013,
	timestamp = {六 8月 12 20:45:06 2017},
	Title = {The adaptive radix tree: ARTful indexing for main-memory databases},
	Author = {V. Leis and A. Kemper and T. Neumann},
	Booktitle = {Data Engineering (ICDE), 2013 IEEE 29th International Conference on},
	Year = {2013},
	Month = {April},
	Note = {ART},
	Pages = {38-49},
	Doi = {10.1109/ICDE.2013.6544812},
	File = {Leis2013.pdf:Leis2013.pdf:PDF},
	ISSN = {1063-6382},
	Keywords = {cache storage;database indexing;table lookup;tree data structures;tree searching;ART performance;ARTful indexing;RAM;adaptive radix tree;balanced binary search tree;deletion;hash table;in-memory data structure;index structure performance;insertion;internal node;lookup performance;main memory index;main-memory database system;min memory capacity;on-CPU cache utilization;point query;prefix lookup;range scan;read-only search tree;sorted order data;worst-case space consumption;Arrays;Indexing;Subspace constraints;Vegetation}
}

@article{Moraru2012,
	timestamp = {六 8月 12 20:43:38 2017},
	title = {Exact pattern matching with feed-forward bloom filters},
	author = {Moraru, Iulian and Andersen, David G},
	journal = {Journal of Experimental Algorithmics (JEA)},
	volume = {17},
	pages = {3--4},
	year = {2012},
	publisher = {ACM}
}

@Article{Neuburger2012,
	Title = {Succinct 2D Dictionary Matching},
	Author = {Neuburger, Shoshana and Sokol, Dina},
	Journal = {Algorithmica},
	Year = {2012},
	Number = {3},
	Pages = {662--684},
	Volume = {65},
	Abstract = {The dictionary matching problem seeks all locations in a given text that match any of the patterns in a given dictionary. Efficient algorithms for dictionary matching scan the text once, searching for all patterns simultaneously. Existing algorithms that solve the 2-dimensional dictionary matching problem all require working space proportional to the size of the dictionary.},
	Doi = {10.1007/s00453-012-9615-9},
	File = {Neuburger2012.pdf:Neuburger2012.pdf:PDF},
	ISSN = {1432-0541},
	Owner = {pz},
	Timestamp = {2016.02.24},
	Url = {http://dx.doi.org/10.1007/s00453-012-9615-9}
}

@InProceedings{Ramakrishna1997,
	timestamp = {六 8月 12 20:45:34 2017},
	Title = {Performance in Practice of String Hashing Functions},
	Author = {Ramakrishna, M. V. and Zobel, Justin},
	Booktitle = {Proceedings of the Fifth International Conference on Database Systems for Advanced Applications (DASFAA)},
	Year = {1997},
	Note = {Shift-And-Or},
	Pages = {215--224},
	Publisher = {World Scientific Press},
	Acmid = {759509},
	File = {Ramakrishna1997.pdf:Ramakrishna1997.pdf:PDF},
	ISBN = {981-02-3107-5},
	Numpages = {10},
	Url = {http://dl.acm.org/citation.cfm?id=646711.759509}
}

@article{Tang2015,
	timestamp = {六 8月 12 20:32:49 2017},
	title = {Document representation with statistical word senses in cross-lingual document clustering},
	author = {Tang, Guoyu and Xia, Yunqing and Cambria, Erik and Jin, Peng and Zheng, Thomas Fang},
	journal = {International Journal of Pattern Recognition and Artificial Intelligence},
	volume = {29},
	number = {02},
	pages = {1559003},
	year = {2015},
	publisher = {World Scientific}
}

@InProceedings{Tuck2004,
	timestamp = {六 8月 12 20:33:28 2017},
	Title = {Deterministic memory-efficient string matching algorithms for intrusion detection},
	Author = {N. Tuck and T. Sherwood and B. Calder and G. Varghese},
	Booktitle = {INFOCOM 2004. Twenty-third AnnualJoint Conference of the IEEE Computer and Communications Societies},
	Year = {2004},
	Month = {March},
	Pages = {2628-2639 vol.4},
	Volume = {4},
	Doi = {10.1109/INFCOM.2004.1354682},
	File = {Tuck2004.pdf:Tuck2004.pdf:PDF},
	ISSN = {0743-166X},
	Keywords = {Internet;performance evaluation;security of data;string matching;Aho-Corasick string-matching algorithm;Internet;deterministic memory-efficient string matching algorithm;intrusion detection system;worst-case performance;Computer crime;Computer science;Hardware;Internet;Intrusion detection;Power engineering and energy;Protection;Software performance;Telecommunication traffic;Web server}
}

@Misc{Wu1994,
	Title = {A Fast Algorithm For Multi-Pattern Searching},
	Author = {Sun Wu and Udi Manber},
	Note = {WM},
	Year = {1994},
	File = {Wu1994.pdf:Wu1994.pdf:PDF}
}

@article{Xiao2016,
	timestamp = {六 8月 12 20:48:42 2017},
	title = {Queueing analysis of continuous queries for uncertain data streams over sliding windows},
	author = {Xiao, Guoqing and Li, Kenli and Zhou, Xu and Li, Keqin},
	journal = {International Journal of Pattern Recognition and Artificial Intelligence},
	volume = {30},
	number = {09},
	pages = {1660001},
	year = {2016},
	publisher = {World Scientific}
}

@article{Xue2015,
	timestamp = {六 8月 12 20:50:33 2017},
	Author = {Xue, Xingsi and Wang, Yuping},
	Title = {{Optimizing ontology alignments through a Memetic Algorithm using both
   MatchFmeasure and Unanimous Improvement Ratio}},
	Journal = {{ARTIFICIAL INTELLIGENCE}},
	Year = {2015},
	Volume = {{223}},
	Pages = {{65-81}},
	Month = {{JUN}},
	Abstract = {{There are three main drawbacks of current evolutionary approaches for
   determining the weights of ontology matching system. The first drawback
   is that it is difficult to simultaneously deal with several pairs of
   ontologies, i.e. finding a universal weight configuration that can be
   used for different ontology pairs without adjustment. The second one is
   that a reference alignment between two ontologies to be aligned should
   be given in advance which could be very expensive to obtain especially
   when the scale of ontologies is considerably large. The last one arises
   from f-measure, a generally used evaluation metric of the alignment's
   quality, which may cause the bias improvement of the solution. To
   overcome these three defects, in this paper, we propose to use both
   MatchFmeasure, a rough evaluation metric on no reference alignment to
   approximate f-measure, and Unanimous Improvement Ratio (UIR), a measure
   that complements MatchFmeasure, in the process of optimizing the
   ontology alignments by Memetic Algorithm (MA). The experimental results
   have shown that the MA using both MatchFmeasure and UIR is effective to
   simultaneously align multiple pairs of ontologies and avoid the bias
   improvement caused by MatchFeasure. Moreover, the comparison with
   state-of-the-art ontology matching systems further indicates the
   effectiveness of the proposed method. (C) 2015 Elsevier B.V. All rights
   reserved.}},
	Publisher = {{ELSEVIER SCIENCE BV}},
	Address = {{PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS}},
	Type = {{Article}},
	Language = {{English}},
	Affiliation = {{Wang, YP (Reprint Author), Xidian Univ, Sch Comp Sci \& Technol, Xian, Shaanxi, Peoples R China.
   Xue, Xingsi; Wang, Yuping, Xidian Univ, Sch Comp Sci \& Technol, Xian, Shaanxi, Peoples R China.
   Xue, Xingsi, Fujian Univ Technol, Sch Informat Sci \& Engn, Fuzhou, Fujian, Peoples R China.}},
	DOI = {{10.1016/j.artint.2015.03.001}},
	ISSN = {{0004-3702}},
	EISSN = {{1872-7921}},
	Keywords = {{Ontology alignment; Memetic Algorithm; MatchFmeasure; Unanimous
   Improvement Ratio}},
	Research-Areas = {{Computer Science}},
	Web-of-Science-Categories = {{Computer Science, Artificial Intelligence}},
	Author-Email = {{ywang@xidian.edu.cn}},
	Funding-Acknowledgement = {{National Natural Science Foundation of China {[}61272119, 61472297]}},
	Funding-Text = {{This work was supported by the National Natural Science Foundation of
   China (No. 61272119 and No. 61472297).}},
	Number-of-Cited-References = {{29}},
	Times-Cited = {{3}}
}

@article{Xue2016,
	timestamp = {六 8月 12 20:50:43 2017},
	Author = {Xue, Xingsi and Wang, Yuping},
	Title = {{Using Memetic Algorithm for Instance Coreference Resolution}},
	Journal = {{IEEE TRANSACTIONS ON KNOWLEDGE AND DATA ENGINEERING}},
	Year = {2016},
	Volume = {{28}},
	Number = {{2}},
	Pages = {{580-591}},
	Month = {{FEB 1}},
	Note = {{IEEE 30th International Conference on Data Engineering (ICDE), Chicago,
   IL, MAR 31-APR 04, 2014}},
	Organization = {{IEEE; Microsoft; Qatar Comp Res Inst; HERE Nokia; Purdue Univ, Cyber
   Ctr; NW Univ, McCormick Sch Engn; Google}},
	Abstract = {{Instance coreference resolution is an essential problem in studying
   semantic web, and it is also critical for the implementation of web of
   data and future integration and application of semantic data. In this
   paper, we propose to use Memetic Algorithm (MA) to solve this instance
   coreference problem in a sequential stage, i.e., the instance-level
   matching is carried out with the result of schema-level matching. We
   first give the optimization model for schema-level matching and
   instance-level matching. Then, we, respectively, present profile
   similarity measures and the rough evaluation metrics with the assumption
   that the golden alignment for both schema-level matching and
   instance-level matching is one-to-one. Furthermore, we give the details
   of the MA. Finally, the experiments of comparing our approach with the
   state-of-the-art systems on OAEI benchmarks and real-world datasets are
   conducted and the results demonstrate that our approach is effective.}},
	Publisher = {{IEEE COMPUTER SOC}},
	Address = {{10662 LOS VAQUEROS CIRCLE, PO BOX 3014, LOS ALAMITOS, CA 90720-1314 USA}},
	Type = {{Article; Proceedings Paper}},
	Language = {{English}},
	Affiliation = {{Xue, XS; Wang, YP (Reprint Author), Xidian Univ, Sch Comp Sci \& Technol, Xian, Shaanxi, Peoples R China.
   Xue, XS (Reprint Author), Fujian Univ Technol, Sch Informat Sci \& Engn, Fuzhou, Fujian, Peoples R China.
   Xue, Xingsi; Wang, Yuping, Xidian Univ, Sch Comp Sci \& Technol, Xian, Shaanxi, Peoples R China.
   Xue, Xingsi, Fujian Univ Technol, Sch Informat Sci \& Engn, Fuzhou, Fujian, Peoples R China.}},
	DOI = {{10.1109/TKDE.2015.2475755}},
	ISSN = {{1041-4347}},
	EISSN = {{1558-2191}},
	Keywords = {{Instance coreference resolution; memetic algorithm; profile similarity
   measure}},
	Keywords-Plus = {{ONTOLOGY ALIGNMENT}},
	Research-Areas = {{Computer Science; Engineering}},
	Web-of-Science-Categories = {{Computer Science, Artificial Intelligence; Computer Science, Information
   Systems; Engineering, Electrical \& Electronic}},
	Author-Email = {{jack8375@gmail.com
   ywang@xidian.edu.cn}},
	Funding-Acknowledgement = {{National Natural Science Foundation of China {[}61272119, 61472297,
   61503082]; Fundamental Research Funds for the Central Universities
   {[}BDZ021430]}},
	Funding-Text = {{This work was supported by the National Natural Science Foundation of
   China (Nos. 61272119, 61472297 and 61503082) and the Fundamental
   Research Funds for the Central Universities (Nos. BDZ021430).}},
	Number-of-Cited-References = {{44}},
	Times-Cited = {{0}}
}

@article{Yan2016,
	timestamp = {六 8月 12 20:50:21 2017},
	title = {Combining Renyi Entropy and EWMA to Detect Common Attacks in Network},
	author = {Yan, Ruoyu},
	journal = {International Journal of Pattern Recognition and Artificial Intelligence},
	volume = {30},
	number = {10},
	pages = {1650021},
	year = {2016},
	publisher = {World Scientific}
}

@InProceedings{Zhan2014,
	Title = {An Improved Multi-pattern Matching Algorithm for Large-Scale Pattern Sets},
	Author = {P. Zhan and W. Yuping and X. Jinfeng},
	Booktitle = {Computational Intelligence and Security (CIS), 2014 Tenth International Conference on},
	Year = {2014},
	Month = {Nov},
	Note = {my},
	Pages = {197-200},
	Abstract = {Multi-pattern matching algorithms are broadly used in many fields of computer science. However, the performance of the existing algorithms seriously degrades with the increasing of the number of patterns. In this paper, an improved multi-pattern matching algorithm based on the framework of the Wu-Manber (WM) algorithm is proposed to effectively deal with the large pattern sets. The WM algorithm is improved in two aspects. Firstly, the lengths of lists in the HASH table are balanced to reduce the number of candidate patterns, Secondly, a data structure called the "INDEX table" based on binary search is designed to reduce the time for finding candidate patterns. Experimental results show that our algorithm is efficient for large-scale pattern sets.},
	Doi = {10.1109/CIS.2014.136},
	File = {Zhan2014.pdf:Zhan2014.pdf:PDF},
	Keywords = {data structures;image matching;WM algorithm;Wu-Manber algorithm;binary search;computer science;data structure;hash table;improved multipattern matching algorithm;index table;large-scale pattern sets;Algorithm design and analysis;Computer science;Educational institutions;Indexes;Pattern matching;Security;Time complexity;Wu-Manber algorithm;multi-pattern matching;string matching}
}

@InProceedings{Zhang2009,
	timestamp = {六 8月 12 20:38:37 2017},
	Title = {High Concurrence Wu-Manber Multiple Patterns Matching Algorithm},
	Author = {Baojun Zhang and Xiaoping Chen and Xuezeng Pan and Zhaohui Wu},
	Year = {2009},
	Month = {August},
	File = {Zhang2009.pdf:Zhang2009.pdf:PDF}
}

@Article{Zhang2015,
	timestamp = {六 8月 12 20:42:16 2017},
	Title = {An efficient parallel algorithm for exact multi-pattern matching},
	Author = {Zhang, Hongli and Xu, Dongliang and Tian, Zhihong and Fan, Yujian},
	Journal = {SECURITY AND COMMUNICATION NETWORKS},
	Year = {2015},
	Month = {JUN},
	Note = {PEBF},
	Number = {9},
	Pages = {1688-1697},
	Volume = {8},
	Abstract = {This paper presents a parallel algorithm Parallel Extended Bloom Filter (PEBF) for exact multi-pattern matching based on Bloom filter. To improve the throughput and parallelism of the algorithm, we divided the pattern set into N subsets where the length of patterns is the same, and different subsets would not intersect each other. We construct an EBF for each subset and use N threads to simultaneously process the subsets in parallel. We implement our solution on the graphics processing unit, called G-PEBF. Experimental results demonstrate that PEBF performs better than the Wu-Manber (WM) algorithm in terms of time and space. And G-PEBF outperforms the G-WM (WM algorithm implemented on graphics processing unit). The speedup of G-PEBF is up to 60 times at peak performance and almost 10 times at worst performance to the PEBF algorithm. Copyright (c) 2014 John Wiley \& Sons, Ltd.},
	Address = {111 RIVER ST, HOBOKEN 07030-5774, NJ USA},
	Affiliation = {Xu, DL (Reprint Author), Harbin Inst Technol, Sch Comp Sci \& Technol, Harbin 150006, Peoples R China. Zhang, Hongli; Xu, Dongliang; Tian, Zhihong; Fan, Yujian, Harbin Inst Technol, Sch Comp Sci \& Technol, Harbin 150006, Peoples R China.},
	Doi = {10.1002/sec.1115},
	Eissn = {1939-0122},
	File = {Zhang2015.pdf:Zhang2015.pdf:PDF},
	ISSN = {1939-0114},
	Keywords = {multi-pattern matching; parallel matching; Bloom Filter; GPU},
	Language = {English},
	Publisher = {WILEY-BLACKWELL},
	Type = {Article}
}

@article{Zhang2016,
	timestamp = {六 8月 12 20:29:49 2017},
	title = {A new feature selection approach to naive Bayes text classifiers},
	author = {Zhang, Lungan and Jiang, Liangxiao and Li, Chaoqun},
	journal = {International Journal of Pattern Recognition and Artificial Intelligence},
	volume = {30},
	number = {02},
	pages = {1650003},
	year = {2016},
	publisher = {World Scientific}
}

@InBook{Zhou2007,
	timestamp = {六 8月 12 20:00:06 2017},
	Title = {Information and Communications Security: 9th International Conference, ICICS 2007, Zhengzhou, China, December 12-15, 2007. Proceedings},
	Author = {Zhou, Zongwei and Xue, Yibo and Liu, Junda and Zhang, Wei and Li, Jun},
	Chapter = {MDH: A High Speed Multi-phase Dynamic Hash String Matching Algorithm for Large-Scale Pattern Set},
	Editor = {Qing, Sihan and Imai, Hideki and Wang, Guilin},
	Pages = {201--215},
	Publisher = {Springer Berlin Heidelberg},
	Year = {2007},
	Address = {Berlin, Heidelberg},
	Doi = {10.1007/978-3-540-77048-0_16},
	File = {Zhou2007.pdf:Zhou2007.pdf:PDF},
	ISBN = {978-3-540-77048-0},
	Url = {http://dx.doi.org/10.1007/978-3-540-77048-0_16}
}

